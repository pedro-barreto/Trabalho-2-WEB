{"ast":null,"code":"\"use strict\";\n\nconst dataTypes = require(\"./data-types\");\n\nconst {\n  logger\n} = require(\"./utils/logger\");\n\nfunction arrayToList(array, timeZone, dialect, format2) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += \", \";\n    }\n\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format2)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format2);\n    }\n\n    return sql;\n  }, \"\");\n}\n\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format2) {\n  let prependN = false;\n\n  if (val === void 0 || val === null) {\n    return \"NULL\";\n  }\n\n  switch (typeof val) {\n    case \"boolean\":\n      if ([\"sqlite\", \"mssql\"].includes(dialect)) {\n        return +!!val;\n      }\n\n      return (!!val).toString();\n\n    case \"number\":\n      return val.toString();\n\n    case \"string\":\n      prependN = dialect === \"mssql\";\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, {\n      timezone: timeZone\n    });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format2);\n\n    if (dialect === \"postgres\" && !format2) {\n      return dataTypes.ARRAY.prototype.stringify(val, {\n        escape: partialEscape\n      });\n    }\n\n    return arrayToList(val, timeZone, dialect, format2);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if ([\"postgres\", \"sqlite\", \"mssql\", \"snowflake\", \"db2\"].includes(dialect)) {\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === \"postgres\") {\n      val = val.replace(/\\0/g, \"\\\\0\");\n    }\n  } else {\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, s => {\n      switch (s) {\n        case \"\\0\":\n          return \"\\\\0\";\n\n        case \"\\n\":\n          return \"\\\\n\";\n\n        case \"\\r\":\n          return \"\\\\r\";\n\n        case \"\\b\":\n          return \"\\\\b\";\n\n        case \"\t\":\n          return \"\\\\t\";\n\n        case \"\u001a\":\n          return \"\\\\Z\";\n\n        default:\n          return `\\\\${s}`;\n      }\n    });\n  }\n\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\n\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== \"string\") {\n    throw new Error(`Invalid SQL string provided: ${sql}`);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\n\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if (dialect === \"postgres\" && value.slice(0, 2) === \"::\") {\n      return value;\n    }\n\n    if (values[key] !== void 0) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\n\nexports.formatNamedParameters = formatNamedParameters;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\sql-string.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst dataTypes = require('./data-types');\nconst { logger } = require('./utils/logger');\n\nfunction arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n    return sql;\n  }, '');\n}\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (['sqlite', 'mssql'].includes(dialect)) {\n        return +!!val;\n      }\n      return (!!val).toString();\n    case 'number':\n      return val.toString();\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, { escape: partialEscape });\n    }\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if (['postgres', 'sqlite', 'mssql', 'snowflake', 'db2'].includes(dialect)) {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else {\n\n    // eslint-disable-next-line no-control-regex\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\x1a': return '\\\\Z';\n        default: return `\\\\${s}`;\n      }\n    });\n  }\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error(`Invalid SQL string provided: ${sql}`);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n"]},"metadata":{},"sourceType":"script"}