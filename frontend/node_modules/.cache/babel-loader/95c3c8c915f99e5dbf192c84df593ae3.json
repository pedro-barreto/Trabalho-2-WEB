{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst AbstractDialect = require(\"../abstract\");\n\nconst ConnectionManager = require(\"./connection-manager\");\n\nconst Query = require(\"./query\");\n\nconst QueryGenerator = require(\"./query-generator\");\n\nconst DataTypes = require(\"../../data-types\").snowflake;\n\nconst {\n  SnowflakeQueryInterface\n} = require(\"./query-interface\");\n\nclass SnowflakeDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nSnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"VALUES ()\": true,\n  \"LIMIT ON UPDATE\": true,\n  lock: true,\n  forShare: \"LOCK IN SHARE MODE\",\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: \" IGNORE\",\n    updateOnDuplicate: false\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  GEOMETRY: false,\n  JSON: false,\n  REGEXP: true,\n  schemas: true\n});\nSnowflakeDialect.prototype.defaultVersion = \"5.7.0\";\nSnowflakeDialect.prototype.Query = Query;\nSnowflakeDialect.prototype.QueryGenerator = QueryGenerator;\nSnowflakeDialect.prototype.DataTypes = DataTypes;\nSnowflakeDialect.prototype.name = \"snowflake\";\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\nmodule.exports = SnowflakeDialect;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\snowflake\\index.js"],"names":[],"mappings":";;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;;AACA,MAAM,eAAA,GAAkB,OAAA,CAAQ,aAAR,CAAxB;;AACA,MAAM,iBAAA,GAAoB,OAAA,CAAQ,sBAAR,CAA1B;;AACA,MAAM,KAAA,GAAQ,OAAA,CAAQ,SAAR,CAAd;;AACA,MAAM,cAAA,GAAiB,OAAA,CAAQ,mBAAR,CAAvB;;AACA,MAAM,SAAA,GAAY,OAAA,CAAQ,kBAAR,CAAA,CAA4B,SAA9C;;AACA,MAAM;AAAE,EAAA;AAAF,IAA8B,OAAA,CAAQ,mBAAR,CAApC;;AAEA,MAAA,gBAAA,SAA+B,eAA/B,CAA+C;AAC7C,EAAA,WAAA,CAAY,SAAZ,EAAuB;AACrB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,iBAAL,GAAyB,IAAI,iBAAJ,CAAsB,IAAtB,EAA4B,SAA5B,CAAzB;AACA,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB;AACvC,MAAA,QAAA,EAAU,IAD6B;AAEvC,MAAA;AAFuC,KAAnB,CAAtB;AAIA,SAAK,cAAL,GAAsB,IAAI,uBAAJ,CAA4B,SAA5B,EAAuC,KAAK,cAA5C,CAAtB;AAAkE;;AATvB;;AAa/C,gBAAA,CAAiB,SAAjB,CAA2B,QAA3B,GAAsC,CAAA,CAAE,KAAF,CAAQ,CAAA,CAAE,SAAF,CAAY,eAAA,CAAgB,SAAhB,CAA0B,QAAtC,CAAR,EAAyD;AAC7F,eAAa,IADgF;AAE7F,qBAAmB,IAF0E;AAG7F,EAAA,IAAA,EAAM,IAHuF;AAI7F,EAAA,QAAA,EAAU,oBAJmF;AAK7F,EAAA,sCAAA,EAAwC,KALqD;AAM7F,EAAA,OAAA,EAAS;AACP,IAAA,gBAAA,EAAkB,SADX;AAIP,IAAA,iBAAA,EAAmB;AAJZ,GANoF;AAY7F,EAAA,KAAA,EAAO;AACL,IAAA,OAAA,EAAS,KADJ;AAEL,IAAA,MAAA,EAAQ,IAFH;AAGL,IAAA,MAAA,EAAQ,IAHH;AAIL,IAAA,IAAA,EAAM,IAJD;AAKL,IAAA,KAAA,EAAO;AALF,GAZsF;AAmB7F,EAAA,WAAA,EAAa;AACX,IAAA,cAAA,EAAgB,KADL;AAEX,IAAA,KAAA,EAAO;AAFI,GAnBgF;AAuB7F,EAAA,aAAA,EAAe,IAvB8E;AAwB7F,EAAA,UAAA,EAAY,IAxBiF;AAyB7F,EAAA,OAAA,EAAS,IAzBoF;AA2B7F,EAAA,QAAA,EAAU,KA3BmF;AA4B7F,EAAA,IAAA,EAAM,KA5BuF;AA6B7F,EAAA,MAAA,EAAQ,IA7BqF;AA8B7F,EAAA,OAAA,EAAS;AA9BoF,CAAzD,CAAtC;AAiCA,gBAAA,CAAiB,SAAjB,CAA2B,cAA3B,GAA4C,OAA5C;AACA,gBAAA,CAAiB,SAAjB,CAA2B,KAA3B,GAAmC,KAAnC;AACA,gBAAA,CAAiB,SAAjB,CAA2B,cAA3B,GAA4C,cAA5C;AACA,gBAAA,CAAiB,SAAjB,CAA2B,SAA3B,GAAuC,SAAvC;AACA,gBAAA,CAAiB,SAAjB,CAA2B,IAA3B,GAAkC,WAAlC;AACA,gBAAA,CAAiB,SAAjB,CAA2B,SAA3B,GAAuC,GAAvC;AACA,gBAAA,CAAiB,SAAjB,CAA2B,cAA3B,GAA4C,gBAAA,CAAiB,SAAjB,CAA2B,SAAvE;AACA,gBAAA,CAAiB,SAAjB,CAA2B,eAA3B,GAA6C,gBAAA,CAAiB,SAAjB,CAA2B,SAAxE;AAEA,MAAA,CAAO,OAAP,GAAiB,gBAAjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').snowflake;\nconst { SnowflakeQueryInterface } = require('./query-interface');\n\nclass SnowflakeDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nSnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  lock: true,\n  forShare: 'LOCK IN SHARE MODE',\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: ' IGNORE',\n    // disable for now, but could be enable by approach below\n    // https://stackoverflow.com/questions/54828745/how-to-migrate-on-conflict-do-nothing-from-postgresql-to-snowflake\n    updateOnDuplicate: false\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  // disable for now, need more work to enable the GEOGRAPHY MAPPING\n  GEOMETRY: false,\n  JSON: false,\n  REGEXP: true,\n  schemas: true\n});\n\nSnowflakeDialect.prototype.defaultVersion = '5.7.0';\nSnowflakeDialect.prototype.Query = Query;\nSnowflakeDialect.prototype.QueryGenerator = QueryGenerator;\nSnowflakeDialect.prototype.DataTypes = DataTypes;\nSnowflakeDialect.prototype.name = 'snowflake';\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\n\nmodule.exports = SnowflakeDialect;\n"]},"metadata":{},"sourceType":"script"}