{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nclass MySQLQueryInterface extends QueryInterface {\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n    const [results] = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, columnName), __spreadValues({\n      raw: true\n    }, options));\n\n    if (results.length && results[0].constraint_name !== \"PRIMARY\") {\n      await Promise.all(results.map(constraint => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), __spreadValues({\n        raw: true\n      }, options))));\n    }\n\n    return await this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), __spreadValues({\n      raw: true\n    }, options));\n  }\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Object.values(options.model.primaryKeys).map(item => item.field);\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, constraintName);\n    const constraints = await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n    }));\n    const constraint = constraints[0];\n    let query;\n\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n\n    if (constraint.constraintType === \"FOREIGN KEY\") {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\mysql\\query-interface.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,eAAA,GAAkB,OAAA,CAAQ,cAAR,CAAxB;;AACA,MAAM;AAAE,EAAA;AAAF,IAAqB,OAAA,CAAQ,6BAAR,CAA3B;;AACA,MAAM,UAAA,GAAa,OAAA,CAAQ,mBAAR,CAAnB;;AAKA,MAAA,mBAAA,SAAkC,cAAlC,CAAiD;AAMzC,QAAA,YAAA,CAAa,SAAb,EAAwB,UAAxB,EAAoC,OAApC,EAA6C;AACjD,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AAEA,UAAM,CAAC,OAAD,IAAY,MAAM,KAAK,SAAL,CAAe,KAAf,CACtB,KAAK,cAAL,CAAoB,kBAApB,CAAuC,SAAA,CAAU,SAAV,GAAsB,SAAtB,GAAkC;AACvE,MAAA,SADuE;AAEvE,MAAA,MAAA,EAAQ,KAAK,SAAL,CAAe,MAAf,CAAsB;AAFyC,KAAzE,EAGG,UAHH,CADsB,EAKtB,cAAA,CAAA;AAAE,MAAA,GAAA,EAAK;AAAP,KAAA,EAAgB,OAAhB,CALsB,CAAxB;;AASA,QAAI,OAAA,CAAQ,MAAR,IAAkB,OAAA,CAAQ,CAAR,CAAA,CAAW,eAAX,KAA+B,SAArD,EAAgE;AAC9D,YAAM,OAAA,CAAQ,GAAR,CAAY,OAAA,CAAQ,GAAR,CAAY,UAAA,IAAc,KAAK,SAAL,CAAe,KAAf,CAC1C,KAAK,cAAL,CAAoB,mBAApB,CAAwC,SAAxC,EAAmD,UAAA,CAAW,eAA9D,CAD0C,EAE1C,cAAA,CAAA;AAAE,QAAA,GAAA,EAAK;AAAP,OAAA,EAAgB,OAAhB,CAF0C,CAA1B,CAAZ,CAAN;AAEkB;;AAIpB,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CACX,KAAK,cAAL,CAAoB,iBAApB,CAAsC,SAAtC,EAAiD,UAAjD,CADW,EAEX,cAAA,CAAA;AAAE,MAAA,GAAA,EAAK;AAAP,KAAA,EAAgB,OAAhB,CAFW,CAAb;AAEkB;;AAOd,QAAA,MAAA,CAAO,SAAP,EAAkB,YAAlB,EAAgC,YAAhC,EAA8C,KAA9C,EAAqD,OAArD,EAA8D;AAClE,IAAA,OAAA,GAAU,cAAA,CAAA,EAAA,EAAK,OAAL,CAAV;AAEA,IAAA,OAAA,CAAQ,IAAR,GAAe,UAAA,CAAW,MAA1B;AACA,IAAA,OAAA,CAAQ,iBAAR,GAA4B,MAAA,CAAO,IAAP,CAAY,YAAZ,CAA5B;AACA,IAAA,OAAA,CAAQ,UAAR,GAAqB,MAAA,CAAO,MAAP,CAAc,OAAA,CAAQ,KAAR,CAAc,WAA5B,EAAyC,GAAzC,CAA6C,IAAA,IAAQ,IAAA,CAAK,KAA1D,CAArB;AAEA,UAAM,KAAA,GAAQ,OAAA,CAAQ,KAAtB;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,YAA3C,EAAyD,KAAA,CAAM,aAA/D,EAA8E,OAA9E,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAMnC,QAAA,gBAAA,CAAiB,SAAjB,EAA4B,cAA5B,EAA4C,OAA5C,EAAqD;AACzD,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,oBAApB,CACV,SAAA,CAAU,SAAV,GAAsB,SAAtB,GAAkC;AAChC,MAAA,SADgC;AAEhC,MAAA,MAAA,EAAQ,KAAK,SAAL,CAAe,MAAf,CAAsB;AAFE,KADxB,EAIP,cAJO,CAAZ;AAMA,UAAM,WAAA,GAAc,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAClD,MAAA,IAAA,EAAM,KAAK,SAAL,CAAe,UAAf,CAA0B;AADkB,KAAA,CAA1B,CAA1B;AAGA,UAAM,UAAA,GAAa,WAAA,CAAY,CAAZ,CAAnB;AACA,QAAI,KAAJ;;AACA,QAAI,CAAC,UAAD,IAAe,CAAC,UAAA,CAAW,cAA/B,EAA+C;AAC7C,YAAM,IAAI,eAAA,CAAgB,sBAApB,CACJ;AACE,QAAA,OAAA,EAAS,cAAc,cAAA,aAA2B,SAAA,iBADpD;AAEE,QAAA,UAAA,EAAY,cAFd;AAGE,QAAA,KAAA,EAAO;AAHT,OADI,CAAN;AAIW;;AAIb,QAAI,UAAA,CAAW,cAAX,KAA8B,aAAlC,EAAiD;AAC/C,MAAA,KAAA,GAAQ,KAAK,cAAL,CAAoB,mBAApB,CAAwC,SAAxC,EAAmD,cAAnD,CAAR;AAA2D,KAD7D,MAEO;AACL,MAAA,KAAA,GAAQ,KAAK,cAAL,CAAoB,gBAApB,CAAqC,UAAA,CAAW,SAAhD,EAA2D,UAAA,CAAW,cAAtE,CAAR;AAA8E;;AAGhF,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,KAArB,EAA4B,OAA5B,CAAb;AAAyC;;AA5EI;;AAgFjD,OAAA,CAAQ,mBAAR,GAA8B,mBAA9B","sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\nclass MySQLQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.query(\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, columnName),\n      { raw: true, ...options }\n    );\n\n    //Exclude primary key constraint\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        { raw: true, ...options }\n      )));\n    }\n\n    return await this.sequelize.query(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options }\n    );\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Object.values(options.model.primaryKeys).map(item => item.field);\n\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, constraintName);\n\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName\n        });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;\n"]},"metadata":{},"sourceType":"script"}