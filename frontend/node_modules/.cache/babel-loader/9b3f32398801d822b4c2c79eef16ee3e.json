{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst AbstractDialect = require(\"../abstract\");\n\nconst ConnectionManager = require(\"./connection-manager\");\n\nconst Query = require(\"./query\");\n\nconst QueryGenerator = require(\"./query-generator\");\n\nconst DataTypes = require(\"../../data-types\").postgres;\n\nconst {\n  PostgresQueryInterface\n} = require(\"./query-interface\");\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nPostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"DEFAULT VALUES\": true,\n  EXCEPTION: true,\n  \"ON DUPLICATE KEY\": false,\n  \"ORDER NULLS\": true,\n  returnValues: {\n    returning: true\n  },\n  bulkDefault: true,\n  schemas: true,\n  lock: true,\n  lockOf: true,\n  lockKey: true,\n  lockOuterJoinFailure: true,\n  skipLocked: true,\n  forShare: \"FOR SHARE\",\n  index: {\n    concurrently: true,\n    using: 2,\n    where: true,\n    functionBased: true,\n    operator: true\n  },\n  inserts: {\n    onConflictDoNothing: \" ON CONFLICT DO NOTHING\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n    conflictFields: true\n  },\n  NUMERIC: true,\n  ARRAY: true,\n  RANGE: true,\n  GEOMETRY: true,\n  REGEXP: true,\n  GEOGRAPHY: true,\n  JSON: true,\n  JSONB: true,\n  HSTORE: true,\n  TSVECTOR: true,\n  deferrableConstraints: true,\n  searchPath: true\n});\nPostgresDialect.prototype.defaultVersion = \"9.5.0\";\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = \"postgres\";\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\postgres\\index.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').postgres;\nconst { PostgresQueryInterface } = require('./query-interface');\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nPostgresDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'DEFAULT VALUES': true,\n    EXCEPTION: true,\n    'ON DUPLICATE KEY': false,\n    'ORDER NULLS': true,\n    returnValues: {\n      returning: true\n    },\n    bulkDefault: true,\n    schemas: true,\n    lock: true,\n    lockOf: true,\n    lockKey: true,\n    lockOuterJoinFailure: true,\n    skipLocked: true,\n    forShare: 'FOR SHARE',\n    index: {\n      concurrently: true,\n      using: 2,\n      where: true,\n      functionBased: true,\n      operator: true\n    },\n    inserts: {\n      onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true\n    },\n    NUMERIC: true,\n    ARRAY: true,\n    RANGE: true,\n    GEOMETRY: true,\n    REGEXP: true,\n    GEOGRAPHY: true,\n    JSON: true,\n    JSONB: true,\n    HSTORE: true,\n    TSVECTOR: true,\n    deferrableConstraints: true,\n    searchPath: true\n  }\n);\n\nPostgresDialect.prototype.defaultVersion = '9.5.0'; // minimum supported version\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\n\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;\n"]},"metadata":{},"sourceType":"script"}