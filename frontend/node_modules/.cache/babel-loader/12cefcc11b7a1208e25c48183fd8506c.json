{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst _ = require(\"lodash\");\n\nconst Utils = require(\"./utils\");\n\nconst sequelizeError = require(\"./errors\");\n\nconst DataTypes = require(\"./data-types\");\n\nconst BelongsTo = require(\"./associations/belongs-to\");\n\nconst validator = require(\"./utils/validator-extras\").validator;\n\nconst {\n  promisify\n} = require(\"util\");\n\nclass InstanceValidator {\n  constructor(modelInstance, options) {\n    options = __spreadValues({\n      hooks: true\n    }, options);\n\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    } else {\n      options.skip = options.skip || [];\n    }\n\n    this.options = options;\n    this.modelInstance = modelInstance;\n    this.validator = validator;\n    this.errors = [];\n    this.inProgress = false;\n  }\n\n  async _validate() {\n    if (this.inProgress) throw new Error(\"Validations already in progress.\");\n    this.inProgress = true;\n    await Promise.all([this._perAttributeValidators(), this._customValidators()]);\n\n    if (this.errors.length) {\n      throw new sequelizeError.ValidationError(null, this.errors);\n    }\n  }\n\n  async validate() {\n    return await (this.options.hooks ? this._validateAndRunHooks() : this._validate());\n  }\n\n  async _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    await runHooks(\"beforeValidate\", this.modelInstance, this.options);\n\n    try {\n      await this._validate();\n    } catch (error) {\n      const newError = await runHooks(\"validationFailed\", this.modelInstance, this.options, error);\n      throw newError || error;\n    }\n\n    await runHooks(\"afterValidate\", this.modelInstance, this.options);\n    return this.modelInstance;\n  }\n\n  async _perAttributeValidators() {\n    const validators = [];\n\n    _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.includes(field)) {\n        return;\n      }\n\n      const value = this.modelInstance.dataValues[field];\n\n      if (value instanceof Utils.SequelizeMethod) {\n        return;\n      }\n\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        this._validateSchema(rawAttribute, field, value);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {\n        validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull));\n      }\n    });\n\n    return await Promise.all(validators);\n  }\n\n  async _customValidators() {\n    const validators = [];\n\n    _.each(this.modelInstance.constructor.options.validate, (validator2, validatorType) => {\n      if (this.options.skip.includes(validatorType)) {\n        return;\n      }\n\n      const valprom = this._invokeCustomValidator(validator2, validatorType).catch(() => {});\n\n      validators.push(valprom);\n    });\n\n    return await Promise.all(validators);\n  }\n\n  async _singleAttrValidate(value, field, allowNull) {\n    if ((value === null || value === void 0) && !allowNull) {\n      return;\n    }\n\n    const validators = [];\n\n    _.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n      if ([\"isUrl\", \"isURL\", \"isEmail\"].includes(validatorType)) {\n        if (typeof test === \"object\" && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      }\n\n      if (typeof test === \"function\") {\n        validators.push(this._invokeCustomValidator(test, validatorType, true, value, field));\n        return;\n      }\n\n      if (value === null || value === void 0) {\n        return;\n      }\n\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field);\n\n      validatorPromise.catch(() => {});\n      validators.push(validatorPromise);\n    });\n\n    return Promise.all(validators.map(validator2 => validator2.catch(rejection => {\n      const isBuiltIn = !!rejection.validatorName;\n\n      this._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);\n    })));\n  }\n\n  async _invokeCustomValidator(validator2, validatorType, optAttrDefined, optValue, optField) {\n    let isAsync = false;\n    const validatorArity = validator2.length;\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n\n    if (isAsync) {\n      try {\n        if (optAttrDefined) {\n          return await promisify(validator2.bind(this.modelInstance, invokeArgs))();\n        }\n\n        return await promisify(validator2.bind(this.modelInstance))();\n      } catch (e) {\n        return this._pushError(false, errorKey, e, optValue, validatorType);\n      }\n    }\n\n    try {\n      return await validator2.call(this.modelInstance, invokeArgs);\n    } catch (e) {\n      return this._pushError(false, errorKey, e, optValue, validatorType);\n    }\n  }\n\n  async _invokeBuiltinValidator(value, test, validatorType, field) {\n    const valueString = String(value);\n\n    if (typeof validator[validatorType] !== \"function\") {\n      throw new Error(`Invalid validator function: ${validatorType}`);\n    }\n\n    const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n\n    if (!validator[validatorType](valueString, ...validatorArgs)) {\n      throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), {\n        validatorName: validatorType,\n        validatorArgs\n      });\n    }\n  }\n\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== \"string\" && [\"isAlpha\", \"isAlphanumeric\", \"isMobilePhone\"].includes(validatorType);\n\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === \"isImmutable\") {\n        validatorArgs = [validatorArgs, field, this.modelInstance];\n      } else if (isLocalizedValidator || validatorType === \"isIP\") {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = validatorArgs.slice(0);\n    }\n\n    return validatorArgs;\n  }\n\n  _validateSchema(rawAttribute, field, value) {\n    if (rawAttribute.allowNull === false && (value === null || value === void 0)) {\n      const association = Object.values(this.modelInstance.constructor.associations).find(association2 => association2 instanceof BelongsTo && association2.foreignKey === rawAttribute.fieldName);\n\n      if (!association || !this.modelInstance.get(association.associationAccessor)) {\n        const validators = this.modelInstance.validators[field];\n\n        const errMsg = _.get(validators, \"notNull.msg\", `${this.modelInstance.constructor.name}.${field} cannot be null`);\n\n        this.errors.push(new sequelizeError.ValidationErrorItem(errMsg, \"notNull Violation\", field, value, this.modelInstance, \"is_null\"));\n      }\n    }\n\n    if (rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) {\n      if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n        this.errors.push(new sequelizeError.ValidationErrorItem(`${field} cannot be an array or an object`, \"string violation\", field, value, this.modelInstance, \"not_a_string\"));\n      }\n    }\n  }\n\n  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n    const message = rawError.message || rawError || \"Validation error\";\n    const error = new sequelizeError.ValidationErrorItem(message, \"Validation error\", errorKey, value, this.modelInstance, fnName, isBuiltin ? fnName : void 0, isBuiltin ? fnArgs : void 0);\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n    this.errors.push(error);\n  }\n\n}\n\nInstanceValidator.RAW_KEY_NAME = \"original\";\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\instance-validator.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('./utils');\nconst sequelizeError = require('./errors');\nconst DataTypes = require('./data-types');\nconst BelongsTo = require('./associations/belongs-to');\nconst validator = require('./utils/validator-extras').validator;\nconst { promisify } = require('util');\n\n/**\n * Instance Validator.\n *\n * @param {Instance} modelInstance The model instance.\n * @param {object} options A dictionary with options.\n *\n * @private\n */\nclass InstanceValidator {\n  constructor(modelInstance, options) {\n    options = {\n      // assign defined and default options\n      hooks: true,\n      ...options\n    };\n\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    } else {\n      options.skip = options.skip || [];\n    }\n\n    this.options = options;\n\n    this.modelInstance = modelInstance;\n\n    /**\n     * Exposes a reference to validator.js. This allows you to add custom validations using `validator.extend`\n     *\n     * @name validator\n     * @private\n     */\n    this.validator = validator;\n\n    /**\n     *  All errors will be stored here from the validations.\n     *\n     * @type {Array} Will contain keys that correspond to attributes which will\n     *   be Arrays of Errors.\n     * @private\n     */\n    this.errors = [];\n\n    /**\n     * @type {boolean} Indicates if validations are in progress\n     * @private\n     */\n    this.inProgress = false;\n  }\n\n  /**\n   * The main entry point for the Validation module, invoke to start the dance.\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async _validate() {\n    if (this.inProgress) throw new Error('Validations already in progress.');\n\n    this.inProgress = true;\n\n    await Promise.all([\n      this._perAttributeValidators(),\n      this._customValidators()\n    ]);\n\n    if (this.errors.length) {\n      throw new sequelizeError.ValidationError(null, this.errors);\n    }\n  }\n\n  /**\n   * Invoke the Validation sequence and run validation hooks if defined\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async validate() {\n    return await (this.options.hooks ? this._validateAndRunHooks() : this._validate());\n  }\n\n  /**\n   * Invoke the Validation sequence and run hooks\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    await runHooks('beforeValidate', this.modelInstance, this.options);\n\n    try {\n      await this._validate();\n    } catch (error) {\n      const newError = await runHooks('validationFailed', this.modelInstance, this.options, error);\n      throw newError || error;\n    }\n\n    await runHooks('afterValidate', this.modelInstance, this.options);\n    return this.modelInstance;\n  }\n\n  /**\n   * Will run all the validators defined per attribute (built-in validators and custom validators)\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async _perAttributeValidators() {\n    // promisify all attribute invocations\n    const validators = [];\n\n    _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.includes(field)) {\n        return;\n      }\n\n      const value = this.modelInstance.dataValues[field];\n\n      if (value instanceof Utils.SequelizeMethod) {\n        return;\n      }\n\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        // perform validations based on schema\n        this._validateSchema(rawAttribute, field, value);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {\n        validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull));\n      }\n    });\n\n    return await Promise.all(validators);\n  }\n\n  /**\n   * Will run all the custom validators defined in the model's options.\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async _customValidators() {\n    const validators = [];\n    _.each(this.modelInstance.constructor.options.validate, (validator, validatorType) => {\n      if (this.options.skip.includes(validatorType)) {\n        return;\n      }\n\n      const valprom = this._invokeCustomValidator(validator, validatorType)\n        // errors are handled in settling, stub this\n        .catch(() => {});\n\n      validators.push(valprom);\n    });\n\n    return await Promise.all(validators);\n  }\n\n  /**\n   * Validate a single attribute with all the defined built-in validators and custom validators.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {string} field The field name.\n   * @param {boolean} allowNull Whether or not the schema allows null values\n   *\n   * @returns {Promise} A promise, will always resolve, auto populates error on this.error local object.\n   */\n  async _singleAttrValidate(value, field, allowNull) {\n    // If value is null and allowNull is false, no validators should run (see #9143)\n    if ((value === null || value === undefined) && !allowNull) {\n      // The schema validator (_validateSchema) has already generated the validation error. Nothing to do here.\n      return;\n    }\n\n    // Promisify each validator\n    const validators = [];\n    _.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n\n      if (['isUrl', 'isURL', 'isEmail'].includes(validatorType)) {\n        // Preserve backwards compat. Validator.js now expects the second param to isURL and isEmail to be an object\n        if (typeof test === 'object' && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      }\n\n      // Custom validators should always run, except if value is null and allowNull is false (see #9143)\n      if (typeof test === 'function') {\n        validators.push(this._invokeCustomValidator(test, validatorType, true, value, field));\n        return;\n      }\n\n      // If value is null, built-in validators should not run (only custom validators have to run) (see #9134).\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field);\n      // errors are handled in settling, stub this\n      validatorPromise.catch(() => {});\n      validators.push(validatorPromise);\n    });\n\n    return Promise\n      .all(validators.map(validator => validator.catch(rejection => {\n        const isBuiltIn = !!rejection.validatorName;\n        this._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);\n      })));\n  }\n\n  /**\n   * Prepare and invoke a custom validator.\n   *\n   * @private\n   *\n   * @param {Function} validator The custom validator.\n   * @param {string} validatorType the custom validator type (name).\n   * @param {boolean} optAttrDefined Set to true if custom validator was defined from the attribute\n   * @param {*} optValue value for attribute\n   * @param {string} optField field for attribute\n   *\n   * @returns {Promise} A promise.\n   */\n  async _invokeCustomValidator(validator, validatorType, optAttrDefined, optValue, optField) {\n    let isAsync = false;\n\n    const validatorArity = validator.length;\n    // check if validator is async and requires a callback\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n\n    if (isAsync) {\n      try {\n        if (optAttrDefined) {\n          return await promisify(validator.bind(this.modelInstance, invokeArgs))();\n        }\n        return await promisify(validator.bind(this.modelInstance))();\n      } catch (e) {\n        return this._pushError(false, errorKey, e, optValue, validatorType);\n      }\n    }\n\n    try {\n      return await validator.call(this.modelInstance, invokeArgs);\n    } catch (e) {\n      return this._pushError(false, errorKey, e, optValue, validatorType);\n    }\n  }\n\n  /**\n   * Prepare and invoke a build-in validator.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated\n   *\n   * @returns {object} An object with specific keys to invoke the validator.\n   */\n  async _invokeBuiltinValidator(value, test, validatorType, field) {\n    // Cast value as string to pass new Validator.js string requirement\n    const valueString = String(value);\n    // check if Validator knows that kind of validation test\n    if (typeof validator[validatorType] !== 'function') {\n      throw new Error(`Invalid validator function: ${validatorType}`);\n    }\n\n    const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n\n    if (!validator[validatorType](valueString, ...validatorArgs)) {\n      throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), { validatorName: validatorType, validatorArgs });\n    }\n  }\n\n  /**\n   * Will extract arguments for the validator.\n   *\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated.\n   *\n   * @private\n   */\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== 'string' && ['isAlpha', 'isAlphanumeric', 'isMobilePhone'].includes(validatorType);\n\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === 'isImmutable') {\n        validatorArgs = [validatorArgs, field, this.modelInstance];\n      } else if (isLocalizedValidator || validatorType === 'isIP') {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = validatorArgs.slice(0);\n    }\n    return validatorArgs;\n  }\n\n  /**\n   * Will validate a single field against its schema definition (isnull).\n   *\n   * @param {object} rawAttribute As defined in the Schema.\n   * @param {string} field The field name.\n   * @param {*} value anything.\n   *\n   * @private\n   */\n  _validateSchema(rawAttribute, field, value) {\n    if (rawAttribute.allowNull === false && (value === null || value === undefined)) {\n      const association = Object.values(this.modelInstance.constructor.associations).find(association => association instanceof BelongsTo && association.foreignKey === rawAttribute.fieldName);\n      if (!association || !this.modelInstance.get(association.associationAccessor)) {\n        const validators = this.modelInstance.validators[field];\n        const errMsg = _.get(validators, 'notNull.msg', `${this.modelInstance.constructor.name}.${field} cannot be null`);\n\n        this.errors.push(new sequelizeError.ValidationErrorItem(\n          errMsg,\n          'notNull Violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n          field,\n          value,\n          this.modelInstance,\n          'is_null'\n        ));\n      }\n    }\n\n    if (rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) {\n      if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n        this.errors.push(new sequelizeError.ValidationErrorItem(\n          `${field} cannot be an array or an object`,\n          'string violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n          field,\n          value,\n          this.modelInstance,\n          'not_a_string'\n        ));\n      }\n    }\n  }\n\n  /**\n   * Signs all errors retaining the original.\n   *\n   * @param {boolean}       isBuiltin   - Determines if error is from builtin validator.\n   * @param {string}        errorKey    - name of invalid attribute.\n   * @param {Error|string}  rawError    - The original error.\n   * @param {string|number} value       - The data that triggered the error.\n   * @param {string}        fnName      - Name of the validator, if any\n   * @param {Array}         fnArgs      - Arguments for the validator [function], if any\n   *\n   * @private\n   */\n  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n    const message = rawError.message || rawError || 'Validation error';\n    const error = new sequelizeError.ValidationErrorItem(\n      message,\n      'Validation error', // sequelizeError.ValidationErrorItem.Origins.FUNCTION,\n      errorKey,\n      value,\n      this.modelInstance,\n      fnName,\n      isBuiltin ? fnName : undefined,\n      isBuiltin ? fnArgs : undefined\n    );\n\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n\n    this.errors.push(error);\n  }\n}\n/**\n * The error key for arguments as passed by custom validators\n *\n * @type {string}\n * @private\n */\nInstanceValidator.RAW_KEY_NAME = 'original';\n\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;\n"]},"metadata":{},"sourceType":"script"}