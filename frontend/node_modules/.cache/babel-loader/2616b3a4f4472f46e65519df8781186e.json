{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\n\nconst {\n  cloneDeep\n} = require(\"../../utils\");\n\nconst _ = require(\"lodash\");\n\nclass SQLiteQueryInterface extends QueryInterface {\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(\";\").filter(q => q !== \"\");\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, __spreadValues({\n      raw: true\n    }, options));\n  }\n\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(\";\").filter(q => q !== \"\");\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, __spreadValues({\n      raw: true\n    }, options));\n  }\n\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n    fields[attrNameAfter] = __spreadValues({}, fields[attrNameBefore]);\n    delete fields[attrNameBefore];\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(\";\").filter(q => q !== \"\");\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, __spreadValues({\n      raw: true\n    }, options));\n  }\n\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n    const constraints = await this.showConstraint(tableName, constraintName);\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === \"FOREIGN KEY\") {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(\", \");\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, \"\");\n    createTableSql += \";\";\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n\n    const subQueries = sql.split(\";\").filter(q => q !== \"\");\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, __spreadValues({\n      raw: true\n    }, options));\n  }\n\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error(\"Fields must be specified through options.fields\");\n    }\n\n    if (!options.type) {\n      throw new Error(\"Constraint type must be specified through options.type\");\n    }\n\n    options = cloneDeep(options);\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n    const constraints = await this.sequelize.query(describeCreateTableSql, __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.SELECT,\n      raw: true\n    }));\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(\";\").filter(q => q !== \"\");\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, __spreadValues({\n      raw: true\n    }, options));\n  }\n\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query(\"PRAGMA foreign_keys = OFF\", options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query(\"PRAGMA foreign_keys = ON\", options);\n  }\n\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === \"string\") {\n      schema = options;\n    } else if (typeof options === \"object\" && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === \"object\" && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.DESCRIBE\n    });\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== void 0) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === \"ER_NO_SUCH_TABLE\") {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n\n}\n\nexports.SQLiteQueryInterface = SQLiteQueryInterface;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\sqlite\\query-interface.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst { cloneDeep } = require('../../utils');\nconst _ = require('lodash');\n\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\nclass SQLiteQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\n    delete fields[attrNameBefore];\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n\n    const constraints = await this.showConstraint(tableName, constraintName);\n    // sqlite can't show only one constraint, so we find here the one to remove\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, '');\n    createTableSql += ';';\n\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = cloneDeep(options);\n\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n\n    const constraints = await this.sequelize.query(describeCreateTableSql, { ...options, type: QueryTypes.SELECT, raw: true });\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    //http://stackoverflow.com/questions/1431094\n    const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n\n  /**\n   * @override\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query('PRAGMA foreign_keys = OFF', options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n\n  /**\n   * @override\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n}\n\nexports.SQLiteQueryInterface = SQLiteQueryInterface;\n"]},"metadata":{},"sourceType":"script"}