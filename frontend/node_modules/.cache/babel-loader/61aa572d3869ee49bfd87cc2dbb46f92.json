{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\n\nconst SequelizeErrors = require(\"../../errors\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst DataTypes = require(\"../../data-types\").mysql;\n\nconst momentTz = require(\"moment-timezone\");\n\nconst debug = logger.debugContext(\"connection:mysql\");\n\nconst parserStore = require(\"../parserStore\")(\"mysql\");\n\nconst {\n  promisify\n} = require(\"util\");\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"mysql2\");\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n\n    return next();\n  }\n\n  async connect(config) {\n    const connectionConfig = __spreadValues({\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: \"-FOUND_ROWS\",\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true\n    }, config.dialectOptions);\n\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection2 = this.lib.createConnection(connectionConfig);\n\n        const errorHandler = e => {\n          connection2.removeListener(\"connect\", connectHandler);\n          connection2.removeListener(\"error\", connectHandler);\n          reject(e);\n        };\n\n        const connectHandler = () => {\n          connection2.removeListener(\"error\", errorHandler);\n          resolve(connection2);\n        };\n\n        connection2.on(\"error\", errorHandler);\n        connection2.once(\"connect\", connectHandler);\n      });\n      debug(\"connection acquired\");\n      connection.on(\"error\", error => {\n        switch (error.code) {\n          case \"ESOCKET\":\n          case \"ECONNRESET\":\n          case \"EPIPE\":\n          case \"PROTOCOL_CONNECTION_LOST\":\n            this.pool.destroy(connection);\n        }\n      });\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format(\"Z\") : tzOffset;\n        await promisify(cb => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case \"ECONNREFUSED\":\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n\n        case \"ER_ACCESS_DENIED_ERROR\":\n          throw new SequelizeErrors.AccessDeniedError(err);\n\n        case \"ENOTFOUND\":\n          throw new SequelizeErrors.HostNotFoundError(err);\n\n        case \"EHOSTUNREACH\":\n          throw new SequelizeErrors.HostNotReachableError(err);\n\n        case \"EINVAL\":\n          throw new SequelizeErrors.InvalidConnectionError(err);\n\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    if (connection._closing) {\n      debug(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return connection && !connection._fatalError && !connection._protocolError && !connection._closing && !connection.stream.destroyed;\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\mysql\\connection-manager.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,yBAAA,GAA4B,OAAA,CAAQ,gCAAR,CAAlC;;AACA,MAAM,eAAA,GAAkB,OAAA,CAAQ,cAAR,CAAxB;;AACA,MAAM;AAAE,EAAA;AAAF,IAAa,OAAA,CAAQ,oBAAR,CAAnB;;AACA,MAAM,SAAA,GAAY,OAAA,CAAQ,kBAAR,CAAA,CAA4B,KAA9C;;AACA,MAAM,QAAA,GAAW,OAAA,CAAQ,iBAAR,CAAjB;;AACA,MAAM,KAAA,GAAQ,MAAA,CAAO,YAAP,CAAoB,kBAApB,CAAd;;AACA,MAAM,WAAA,GAAc,OAAA,CAAQ,gBAAR,CAAA,CAA0B,OAA1B,CAApB;;AACA,MAAM;AAAE,EAAA;AAAF,IAAgB,OAAA,CAAQ,MAAR,CAAtB;;AAWA,MAAA,iBAAA,SAAgC,yBAAhC,CAA0D;AACxD,EAAA,WAAA,CAAY,OAAZ,EAAqB,SAArB,EAAgC;AAC9B,IAAA,SAAA,CAAU,MAAV,CAAiB,IAAjB,GAAwB,SAAA,CAAU,MAAV,CAAiB,IAAjB,IAAyB,IAAjD;AACA,UAAM,OAAN,EAAe,SAAf;AACA,SAAK,GAAL,GAAW,KAAK,kBAAL,CAAwB,QAAxB,CAAX;AACA,SAAK,iBAAL,CAAuB,SAAvB;AAAuB;;AAGzB,EAAA,kBAAA,CAAmB,QAAnB,EAA6B;AAC3B,IAAA,WAAA,CAAY,OAAZ,CAAoB,QAApB;AAAoB;;AAGtB,EAAA,gBAAA,GAAmB;AACjB,IAAA,WAAA,CAAY,KAAZ;AAAY;;AAGP,SAAA,SAAA,CAAU,KAAV,EAAiB,IAAjB,EAAuB;AAC5B,QAAI,WAAA,CAAY,GAAZ,CAAgB,KAAA,CAAM,IAAtB,CAAJ,EAAiC;AAC/B,aAAO,WAAA,CAAY,GAAZ,CAAgB,KAAA,CAAM,IAAtB,EAA4B,KAA5B,EAAmC,KAAK,SAAL,CAAe,OAAlD,EAA2D,IAA3D,CAAP;AAAkE;;AAEpE,WAAO,IAAA,EAAP;AAAO;;AAYH,QAAA,OAAA,CAAQ,MAAR,EAAgB;AACpB,UAAM,gBAAA,GAAmB,cAAA,CAAA;AACvB,MAAA,IAAA,EAAM,MAAA,CAAO,IADU;AAEvB,MAAA,IAAA,EAAM,MAAA,CAAO,IAFU;AAGvB,MAAA,IAAA,EAAM,MAAA,CAAO,QAHU;AAIvB,MAAA,KAAA,EAAO,aAJgB;AAKvB,MAAA,QAAA,EAAU,MAAA,CAAO,QALM;AAMvB,MAAA,QAAA,EAAU,MAAA,CAAO,QANM;AAOvB,MAAA,QAAA,EAAU,KAAK,SAAL,CAAe,OAAf,CAAuB,QAPV;AAQvB,MAAA,QAAA,EAAU,iBAAA,CAAkB,SAAlB,CAA4B,IAA5B,CAAiC,IAAjC,CARa;AASvB,MAAA,gBAAA,EAAkB,KATK;AAUvB,MAAA,iBAAA,EAAmB;AAVI,KAAA,EAWpB,MAAA,CAAO,cAXa,CAAzB;;AAcA,QAAI;AACF,YAAM,UAAA,GAAa,MAAM,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACxD,cAAM,WAAA,GAAa,KAAK,GAAL,CAAS,gBAAT,CAA0B,gBAA1B,CAAnB;;AAEA,cAAM,YAAA,GAAe,CAAA,IAAK;AAExB,UAAA,WAAA,CAAW,cAAX,CAA0B,SAA1B,EAAqC,cAArC;AACA,UAAA,WAAA,CAAW,cAAX,CAA0B,OAA1B,EAAmC,cAAnC;AACA,UAAA,MAAA,CAAO,CAAP,CAAA;AAAO,SAJT;;AAOA,cAAM,cAAA,GAAiB,MAAM;AAE3B,UAAA,WAAA,CAAW,cAAX,CAA0B,OAA1B,EAAmC,YAAnC;AACA,UAAA,OAAA,CAAQ,WAAR,CAAA;AAAQ,SAHV;;AAUA,QAAA,WAAA,CAAW,EAAX,CAAc,OAAd,EAAuB,YAAvB;AACA,QAAA,WAAA,CAAW,IAAX,CAAgB,SAAhB,EAA2B,cAA3B;AAA2B,OArBJ,CAAzB;AAwBA,MAAA,KAAA,CAAM,qBAAN,CAAA;AACA,MAAA,UAAA,CAAW,EAAX,CAAc,OAAd,EAAuB,KAAA,IAAS;AAC9B,gBAAQ,KAAA,CAAM,IAAd;AAAc,eACP,SADO;AACP,eACA,YADA;AACA,eACA,OADA;AACA,eACA,0BADA;AAEH,iBAAK,IAAL,CAAU,OAAV,CAAkB,UAAlB;AALJ;AAKsB,OANxB;;AAUA,UAAI,CAAC,KAAK,SAAL,CAAe,MAAf,CAAsB,mBAA3B,EAAgD;AAG9C,YAAI,QAAA,GAAW,KAAK,SAAL,CAAe,OAAf,CAAuB,QAAtC;AACA,QAAA,QAAA,GAAW,KAAK,IAAL,CAAU,QAAV,IAAsB,QAAA,CAAS,EAAT,CAAY,QAAZ,EAAsB,MAAtB,CAA6B,GAA7B,CAAtB,GAA0D,QAArE;AACA,cAAM,SAAA,CAAU,EAAA,IAAM,UAAA,CAAW,KAAX,CAAiB,oBAAoB,QAAA,GAArC,EAAkD,EAAlD,CAAhB,CAAA,EAAN;AAAwE;;AAG1E,aAAO,UAAP;AAAO,KA5CT,CA4CS,OACA,GADA,EACP;AACA,cAAQ,GAAA,CAAI,IAAZ;AAAY,aACL,cADK;AAER,gBAAM,IAAI,eAAA,CAAgB,sBAApB,CAA2C,GAA3C,CAAN;;AAAiD,aAC9C,wBAD8C;AAEjD,gBAAM,IAAI,eAAA,CAAgB,iBAApB,CAAsC,GAAtC,CAAN;;AAA4C,aACzC,WADyC;AAE5C,gBAAM,IAAI,eAAA,CAAgB,iBAApB,CAAsC,GAAtC,CAAN;;AAA4C,aACzC,cADyC;AAE5C,gBAAM,IAAI,eAAA,CAAgB,qBAApB,CAA0C,GAA1C,CAAN;;AAAgD,aAC7C,QAD6C;AAEhD,gBAAM,IAAI,eAAA,CAAgB,sBAApB,CAA2C,GAA3C,CAAN;;AAAiD;AAEjD,gBAAM,IAAI,eAAA,CAAgB,eAApB,CAAoC,GAApC,CAAN;AAZJ;AAY8C;AAAA;;AAK5C,QAAA,UAAA,CAAW,UAAX,EAAuB;AAE3B,QAAI,UAAA,CAAW,QAAf,EAAyB;AACvB,MAAA,KAAA,CAAM,gEAAN,CAAA;AACA;AAAA;;AAGF,WAAO,MAAM,SAAA,CAAU,QAAA,IAAY,UAAA,CAAW,GAAX,CAAe,QAAf,CAAtB,CAAA,EAAb;AAAkD;;AAGpD,EAAA,QAAA,CAAS,UAAT,EAAqB;AACnB,WAAO,UAAA,IACF,CAAC,UAAA,CAAW,WADV,IAEF,CAAC,UAAA,CAAW,cAFV,IAGF,CAAC,UAAA,CAAW,QAHV,IAIF,CAAC,UAAA,CAAW,MAAX,CAAkB,SAJxB;AAIwB;;AA7H8B;;AAiI1D,MAAA,CAAO,OAAP,GAAiB,iBAAjB;AACA,MAAA,CAAO,OAAP,CAAe,iBAAf,GAAmC,iBAAnC;AACA,MAAA,CAAO,OAAP,CAAe,OAAf,GAAyB,iBAAzB","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mysql;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mysql');\nconst parserStore = require('../parserStore')('mysql');\nconst { promisify } = require('util');\n\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mysql2');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with MySQL database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: '-FOUND_ROWS',\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      ...config.dialectOptions\n    };\n\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection = this.lib.createConnection(connectionConfig);\n\n        const errorHandler = e => {\n          // clean up connect & error event if there is error\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', connectHandler);\n          reject(e);\n        };\n\n        const connectHandler = () => {\n          // clean up error event if connected\n          connection.removeListener('error', errorHandler);\n          resolve(connection);\n        };\n\n        // don't use connection.once for error event handling here\n        // mysql2 emit error two times in case handshake was failed\n        // first error is protocol_lost and second is timeout\n        // if we will use `once.error` node process will crash on 2nd error emit\n        connection.on('error', errorHandler);\n        connection.once('connect', connectHandler);\n      });\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // set timezone for this connection\n        // but named timezone are not directly supported in mysql, so get its offset first\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n        await promisify(cb => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (connection._closing) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return connection\n      && !connection._fatalError\n      && !connection._protocolError\n      && !connection._closing\n      && !connection.stream.destroyed;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}