{"ast":null,"code":"\"use strict\";\n\nconst {\n  Pool,\n  TimeoutError\n} = require(\"sequelize-pool\");\n\nconst _ = require(\"lodash\");\n\nconst semver = require(\"semver\");\n\nconst errors = require(\"../../errors\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst deprecations = require(\"../../utils/deprecations\");\n\nconst debug = logger.debugContext(\"pool\");\n\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n\n    if (config.pool === false) {\n      throw new Error(\"Support for pool:false was removed in v4.0\");\n    }\n\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 1e4,\n      acquire: 6e4,\n      evict: 1e3,\n      validate: this._validate.bind(this)\n    });\n    this.initPools();\n  }\n\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (Object.prototype.hasOwnProperty.call(dataType, \"parse\")) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n\n      return require(moduleName);\n    } catch (err) {\n      if (err.code === \"MODULE_NOT_FOUND\") {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n\n      throw err;\n    }\n  }\n\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n\n    await this.pool.drain();\n    debug(\"connection drain due to process exit\");\n    return await this.pool.destroyAllNow();\n  }\n\n  async close() {\n    this.getConnection = async function getConnection() {\n      throw new Error(\"ConnectionManager.getConnection was called after the connection manager was closed!\");\n    };\n\n    return await this._onProcessExit();\n  }\n\n  initPools() {\n    const config = this.config;\n\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: \"sequelize\",\n        create: () => this._connect(config),\n        destroy: async connection => {\n          const result = await this._disconnect(connection);\n          debug(\"connection destroy\");\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      });\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n      return;\n    }\n\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, \"replication\"));\n    config.replication.read = config.replication.read.map(readConfig => _.defaults(readConfig, _.omit(this.config, \"replication\")));\n    let reads = 0;\n    this.pool = {\n      release: client => {\n        if (client.queryType === \"read\") {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType, useMaster) => {\n        useMaster = useMaster === void 0 ? false : useMaster;\n\n        if (queryType === \"SELECT\" && !useMaster) {\n          return this.pool.read.acquire();\n        }\n\n        return this.pool.write.acquire();\n      },\n      destroy: connection => {\n        this.pool[connection.queryType].destroy(connection);\n        debug(\"connection destroy\");\n      },\n      destroyAllNow: async () => {\n        await Promise.all([this.pool.read.destroyAllNow(), this.pool.write.destroyAllNow()]);\n        debug(\"all connections destroyed\");\n      },\n      drain: async () => Promise.all([this.pool.write.drain(), this.pool.read.drain()]),\n      read: new Pool({\n        name: \"sequelize:read\",\n        create: async () => {\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = \"read\";\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      }),\n      write: new Pool({\n        name: \"sequelize:write\",\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = \"write\";\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      })\n    };\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n\n  async getConnection(options) {\n    options = options || {};\n\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n            _options.transaction = {\n              connection\n            };\n\n            _options.logging = () => {};\n\n            _options.logging.__testLoggingFn = true;\n\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), \"version\") || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion) ? parsedVersion : this.dialect.defaultVersion;\n            }\n\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n\n            this.versionPromise = null;\n            return await this._disconnect(connection);\n          } catch (err) {\n            this.versionPromise = null;\n            throw err;\n          }\n        })();\n      }\n\n      await this.versionPromise;\n    }\n\n    let result;\n\n    try {\n      result = await this.pool.acquire(options.type, options.useMaster);\n    } catch (error) {\n      if (error instanceof TimeoutError) throw new errors.ConnectionAcquireTimeoutError(error);\n      throw error;\n    }\n\n    debug(\"connection acquired\");\n    return result;\n  }\n\n  async releaseConnection(connection) {\n    this.pool.release(connection);\n    debug(\"connection released\");\n  }\n\n  async _connect(config) {\n    await this.sequelize.runHooks(\"beforeConnect\", config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks(\"afterConnect\", connection, config);\n    return connection;\n  }\n\n  async _disconnect(connection) {\n    await this.sequelize.runHooks(\"beforeDisconnect\", connection);\n    await this.dialect.connectionManager.disconnect(connection);\n    return this.sequelize.runHooks(\"afterDisconnect\", connection);\n  }\n\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n\n    return this.dialect.connectionManager.validate(connection);\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\abstract\\connection-manager.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst { Pool, TimeoutError } = require('sequelize-pool');\nconst _ = require('lodash');\nconst semver = require('semver');\nconst errors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst deprecations = require('../../utils/deprecations');\nconst debug = logger.debugContext('pool');\n\n/**\n * Abstract Connection Manager\n *\n * Connection manager which handles pooling & replication.\n * Uses sequelize-pool for pooling\n *\n * @private\n */\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n\n    if (config.pool === false) {\n      throw new Error('Support for pool:false was removed in v4.0');\n    }\n\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 10000,\n      acquire: 60000,\n      evict: 1000,\n      validate: this._validate.bind(this)\n    });\n\n    this.initPools();\n  }\n\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (Object.prototype.hasOwnProperty.call(dataType, 'parse')) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n\n  /**\n   * Try to load dialect module from various configured options.\n   * Priority goes like dialectModulePath > dialectModule > require(default)\n   *\n   * @param {string} moduleName Name of dialect module to lookup\n   *\n   * @private\n   * @returns {object}\n   */\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n      return require(moduleName);\n\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Handler which executes on process exit or connection manager shutdown\n   *\n   * @private\n   * @returns {Promise}\n   */\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n\n    await this.pool.drain();\n    debug('connection drain due to process exit');\n\n    return await this.pool.destroyAllNow();\n  }\n\n  /**\n   * Drain the pool and close it permanently\n   *\n   * @returns {Promise}\n   */\n  async close() {\n    // Mark close of pool\n    this.getConnection = async function getConnection() {\n      throw new Error('ConnectionManager.getConnection was called after the connection manager was closed!');\n    };\n\n    return await this._onProcessExit();\n  }\n\n  /**\n   * Initialize connection pool. By default pool autostart is set to false, so no connection will be\n   * be created unless `pool.acquire` is called.\n   */\n  initPools() {\n    const config = this.config;\n\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: 'sequelize',\n        create: () => this._connect(config),\n        destroy: async connection => {\n          const result = await this._disconnect(connection);\n          debug('connection destroy');\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      });\n\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n\n      return;\n    }\n\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n\n    // Map main connection config\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, 'replication'));\n\n    // Apply defaults to each read config\n    config.replication.read = config.replication.read.map(readConfig =>\n      _.defaults(readConfig, _.omit(this.config, 'replication'))\n    );\n\n    // custom pooling for replication (original author @janmeier)\n    let reads = 0;\n    this.pool = {\n      release: client => {\n        if (client.queryType === 'read') {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType, useMaster) => {\n        useMaster = useMaster === undefined ? false : useMaster;\n        if (queryType === 'SELECT' && !useMaster) {\n          return this.pool.read.acquire();\n        }\n        return this.pool.write.acquire();\n      },\n      destroy: connection => {\n        this.pool[connection.queryType].destroy(connection);\n        debug('connection destroy');\n      },\n      destroyAllNow: async () => {\n        await Promise.all([\n          this.pool.read.destroyAllNow(),\n          this.pool.write.destroyAllNow()\n        ]);\n\n        debug('all connections destroyed');\n      },\n      drain: async () => Promise.all([\n        this.pool.write.drain(),\n        this.pool.read.drain()\n      ]),\n      read: new Pool({\n        name: 'sequelize:read',\n        create: async () => {\n          // round robin config\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = 'read';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      }),\n      write: new Pool({\n        name: 'sequelize:write',\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = 'write';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      })\n    };\n\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n\n  /**\n   * Get connection from pool. It sets database version if it's not already set.\n   * Call pool.acquire to get a connection\n   *\n   * @param {object}   [options]                 Pool options\n   * @param {string}   [options.type]            Set which replica to use. Available options are `read` and `write`\n   * @param {boolean}  [options.useMaster=false] Force master or write replica to get connection from\n   *\n   * @returns {Promise<Connection>}\n   */\n  async getConnection(options) {\n    options = options || {};\n\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n\n            _options.transaction = { connection }; // Cheat .query to use our private connection\n            _options.logging = () => {};\n            _options.logging.__testLoggingFn = true;\n\n            //connection might have set databaseVersion value at initialization,\n            //avoiding a useless round trip\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), 'version') || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion)\n                ? parsedVersion\n                : this.dialect.defaultVersion;\n            }\n\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n\n            this.versionPromise = null;\n            return await this._disconnect(connection);\n          } catch (err) {\n            this.versionPromise = null;\n            throw err;\n          }\n        })();\n      }\n      await this.versionPromise;\n    }\n\n    let result;\n\n    try {\n      result = await this.pool.acquire(options.type, options.useMaster);\n    } catch (error) {\n      if (error instanceof TimeoutError) throw new errors.ConnectionAcquireTimeoutError(error);\n      throw error;\n    }\n\n    debug('connection acquired');\n\n    return result;\n  }\n\n  /**\n   * Release a pooled connection so it can be utilized by other connection requests\n   *\n   * @param {Connection} connection\n   *\n   * @returns {Promise}\n   */\n  async releaseConnection(connection) {\n    this.pool.release(connection);\n    debug('connection released');\n  }\n\n  /**\n   * Call dialect library to get connection\n   *\n   * @param {*} config Connection config\n   * @private\n   * @returns {Promise<Connection>}\n   */\n  async _connect(config) {\n    await this.sequelize.runHooks('beforeConnect', config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks('afterConnect', connection, config);\n    return connection;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param {Connection} connection\n   * @private\n   * @returns {Promise}\n   */\n  async _disconnect(connection) {\n    await this.sequelize.runHooks('beforeDisconnect', connection);\n    await this.dialect.connectionManager.disconnect(connection);\n    return this.sequelize.runHooks('afterDisconnect', connection);\n  }\n\n  /**\n   * Determine if a connection is still valid or not\n   *\n   * @param {Connection} connection\n   *\n   * @returns {boolean}\n   */\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n\n    return this.dialect.connectionManager.validate(connection);\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}