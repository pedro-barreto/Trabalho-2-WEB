{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst Utils = require(\"./../utils\");\n\nconst Helpers = require(\"./helpers\");\n\nconst _ = require(\"lodash\");\n\nconst Association = require(\"./base\");\n\nconst Op = require(\"../operators\");\n\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = \"HasMany\";\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.options.through) {\n      throw new Error(\"N:M associations are not supported with hasMany. Use belongsToMany instead\");\n    }\n\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([this.source.options.name.singular, this.source.primaryKeyAttribute].join(\"_\"));\n    }\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n\n    if (this.source.rawAttributes[this.sourceKey]) {\n      this.sourceKeyAttribute = this.sourceKey;\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n      this.sourceKeyField = this.source.primaryKeyField;\n    }\n\n    const plural = _.upperFirst(this.options.name.plural);\n\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.associationAccessor = this.as;\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: __spreadValues({\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n        allowNull: true\n      }, this.foreignKeyAttribute)\n    };\n\n    const constraintOptions = __spreadValues({}, this.options);\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? \"SET NULL\" : \"CASCADE\");\n      constraintOptions.onUpdate = constraintOptions.onUpdate || \"CASCADE\";\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = [\"get\", \"count\", \"hasSingle\", \"hasAll\", \"set\", \"add\", \"addMultiple\", \"remove\", \"removeMultiple\", \"create\"];\n    const aliases = {\n      hasSingle: \"has\",\n      hasAll: \"has\",\n      addMultiple: \"add\",\n      removeMultiple: \"remove\"\n    };\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  async get(instances) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const where = {};\n    let Model = this.target;\n    let instance;\n    let values;\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = void 0;\n    }\n\n    options = __spreadValues({}, options);\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    if (instances) {\n      values = instances.map(_instance => _instance.get(this.sourceKey, {\n        raw: true\n      }));\n\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: this,\n          values\n        };\n        delete options.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey, {\n        raw: true\n      });\n    }\n\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    const results = await Model.findAll(options);\n    if (instance) return results;\n    const result = {};\n\n    for (const _instance of instances) {\n      result[_instance.get(this.sourceKey, {\n        raw: true\n      })] = [];\n    }\n\n    for (const _instance of results) {\n      result[_instance.get(this.foreignKey, {\n        raw: true\n      })].push(_instance);\n    }\n\n    return result;\n  }\n\n  async count(instance, options) {\n    options = Utils.cloneDeep(options);\n    options.attributes = [[this.sequelize.fn(\"COUNT\", this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)), \"count\"]];\n    options.raw = true;\n    options.plain = true;\n    const result = await this.get(instance, options);\n    return parseInt(result.count, 10);\n  }\n\n  async has(sourceInstance, targetInstances, options) {\n    const where = {};\n\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      scope: false,\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true\n    });\n    where[Op.or] = targetInstances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n\n      return {\n        [this.target.primaryKeyAttribute]: instance\n      };\n    });\n    options.where = {\n      [Op.and]: [where, options.where]\n    };\n    const associatedObjects = await this.get(sourceInstance, options);\n    return associatedObjects.length === targetInstances.length;\n  }\n\n  async set(sourceInstance, targetInstances, options) {\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = this.toInstanceArray(targetInstances);\n    }\n\n    const oldAssociations = await this.get(sourceInstance, __spreadProps(__spreadValues({}, options), {\n      scope: false,\n      raw: true\n    }));\n    const promises = [];\n    const obsoleteAssociations = oldAssociations.filter(old => !targetInstances.find(obj => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));\n    const unassociatedObjects = targetInstances.filter(obj => !oldAssociations.find(old => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));\n    let updateWhere;\n    let update;\n\n    if (obsoleteAssociations.length > 0) {\n      update = {};\n      update[this.foreignKey] = null;\n      updateWhere = {\n        [this.target.primaryKeyAttribute]: obsoleteAssociations.map(associatedObject => associatedObject[this.target.primaryKeyAttribute])\n      };\n      promises.push(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {\n        where: updateWhere\n      })));\n    }\n\n    if (unassociatedObjects.length > 0) {\n      updateWhere = {};\n      update = {};\n      update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n      Object.assign(update, this.scope);\n      updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map(unassociatedObject => unassociatedObject[this.target.primaryKeyAttribute]);\n      promises.push(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {\n        where: updateWhere\n      })));\n    }\n\n    await Promise.all(promises);\n    return sourceInstance;\n  }\n\n  async add(sourceInstance, targetInstances) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!targetInstances) return Promise.resolve();\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    const update = __spreadValues({\n      [this.foreignKey]: sourceInstance.get(this.sourceKey)\n    }, this.scope);\n\n    const where = {\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject => unassociatedObject.get(this.target.primaryKeyAttribute))\n    };\n    await this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {\n      where\n    }));\n    return sourceInstance;\n  }\n\n  async remove(sourceInstance, targetInstances) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const update = {\n      [this.foreignKey]: null\n    };\n    targetInstances = this.toInstanceArray(targetInstances);\n    const where = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      [this.target.primaryKeyAttribute]: targetInstances.map(targetInstance => targetInstance.get(this.target.primaryKeyAttribute))\n    };\n    await this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {\n      where\n    }));\n    return this;\n  }\n\n  async create(sourceInstance, values) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (values === void 0) {\n      values = {};\n    }\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) options.fields.push(attribute);\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    if (options.fields) options.fields.push(this.foreignKey);\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n\n}\n\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\associations\\has-many.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-many association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.\n * If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\n *\n * @see {@link Model.hasMany}\n */\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.options.through) {\n      throw new Error('N:M associations are not supported with hasMany. Use belongsToMany instead');\n    }\n\n    /*\n    * If self association, this is the target association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    /*\n     * Foreign key setup\n     */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.source.options.name.singular,\n          this.source.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    /*\n     * Source key setup\n     */\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n\n    if (this.source.rawAttributes[this.sourceKey]) {\n      this.sourceKeyAttribute = this.sourceKey;\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n      this.sourceKeyField = this.source.primaryKeyField;\n    }\n\n    // Get singular and plural names\n    // try to uppercase the first letter, unless the model forbids it\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.associationAccessor = this.as;\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    // Create a new options object for use with addForeignKeyConstraints, to avoid polluting this.options in case it is later used for a n:m\n    const constraintOptions = { ...this.options };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      constraintOptions.onUpdate = constraintOptions.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findAll}  for a full explanation of options\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  async get(instances, options = {}) {\n    const where = {};\n\n    let Model = this.target;\n    let instance;\n    let values;\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    options = { ...options };\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    if (instances) {\n      values = instances.map(_instance => _instance.get(this.sourceKey, { raw: true }));\n\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: this, // association\n          values\n        };\n\n        delete options.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey, { raw: true });\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    const results = await Model.findAll(options);\n    if (instance) return results;\n\n    const result = {};\n    for (const _instance of instances) {\n      result[_instance.get(this.sourceKey, { raw: true })] = [];\n    }\n\n    for (const _instance of results) {\n      result[_instance.get(this.foreignKey, { raw: true })].push(_instance);\n    }\n\n    return result;\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model}        instance the source instance\n   * @param {object}         [options] find & count options\n   * @param {object}         [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n  async count(instance, options) {\n    options = Utils.cloneDeep(options);\n\n    options.attributes = [\n      [\n        this.sequelize.fn(\n          'COUNT',\n          this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)\n        ),\n        'count'\n      ]\n    ];\n    options.raw = true;\n    options.plain = true;\n\n    const result = await this.get(instance, options);\n\n    return parseInt(result.count, 10);\n  }\n\n  /**\n   * Check if one or more rows are associated with `this`.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise}\n   */\n  async has(sourceInstance, targetInstances, options) {\n    const where = {};\n\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n\n    options = {\n      ...options,\n      scope: false,\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true\n    };\n\n    where[Op.or] = targetInstances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.target.primaryKeyAttribute]: instance\n      };\n    });\n\n    options.where = {\n      [Op.and]: [\n        where,\n        options.where\n      ]\n    };\n\n    const associatedObjects = await this.get(sourceInstance, options);\n\n    return associatedObjects.length === targetInstances.length;\n  }\n\n  /**\n   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.\n   * @param {object} [options] Options passed to `target.findAll` and `update`.\n   * @param {object} [options.validate] Run validation for the join model\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, targetInstances, options) {\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = this.toInstanceArray(targetInstances);\n    }\n\n    const oldAssociations = await this.get(sourceInstance, { ...options, scope: false, raw: true });\n    const promises = [];\n    const obsoleteAssociations = oldAssociations.filter(old =>\n      !targetInstances.find(obj =>\n        obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]\n      )\n    );\n    const unassociatedObjects = targetInstances.filter(obj =>\n      !oldAssociations.find(old =>\n        obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]\n      )\n    );\n    let updateWhere;\n    let update;\n\n    if (obsoleteAssociations.length > 0) {\n      update = {};\n      update[this.foreignKey] = null;\n\n      updateWhere = {\n        [this.target.primaryKeyAttribute]: obsoleteAssociations.map(associatedObject =>\n          associatedObject[this.target.primaryKeyAttribute]\n        )\n      };\n\n\n      promises.push(this.target.unscoped().update(\n        update,\n        {\n          ...options,\n          where: updateWhere\n        }\n      ));\n    }\n\n    if (unassociatedObjects.length > 0) {\n      updateWhere = {};\n\n      update = {};\n      update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n\n      Object.assign(update, this.scope);\n      updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map(unassociatedObject =>\n        unassociatedObject[this.target.primaryKeyAttribute]\n      );\n\n      promises.push(this.target.unscoped().update(\n        update,\n        {\n          ...options,\n          where: updateWhere\n        }\n      ));\n    }\n\n    await Promise.all(promises);\n\n    return sourceInstance;\n  }\n\n  /**\n   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,\n   * or a mixed array of Model / string / numbers to associate multiple rows.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `target.update`.\n   *\n   * @returns {Promise}\n   */\n  async add(sourceInstance, targetInstances, options = {}) {\n    if (!targetInstances) return Promise.resolve();\n\n\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    const update = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      ...this.scope\n    };\n\n    const where = {\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject =>\n        unassociatedObject.get(this.target.primaryKeyAttribute)\n      )\n    };\n\n    await this.target.unscoped().update(update, { ...options, where });\n\n    return sourceInstance;\n  }\n\n  /**\n   * Un-associate one or several target rows.\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [targetInstances] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `target.update`\n   *\n   * @returns {Promise}\n   */\n  async remove(sourceInstance, targetInstances, options = {}) {\n    const update = {\n      [this.foreignKey]: null\n    };\n\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    const where = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      [this.target.primaryKeyAttribute]: targetInstances.map(targetInstance =>\n        targetInstance.get(this.target.primaryKeyAttribute)\n      )\n    };\n\n    await this.target.unscoped().update(update, { ...options, where });\n\n    return this;\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model instance\n   * @param {object} [options] Options passed to `target.create`\n   *\n   * @returns {Promise}\n   */\n  async create(sourceInstance, values, options = {}) {\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (values === undefined) {\n      values = {};\n    }\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) options.fields.push(attribute);\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    if (options.fields) options.fields.push(this.foreignKey);\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;\n"]},"metadata":{},"sourceType":"script"}