{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst Utils = require(\"../../utils\");\n\nconst util = require(\"util\");\n\nconst DataTypes = require(\"../../data-types\");\n\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\n\nconst semver = require(\"semver\");\n\nconst _ = require(\"lodash\");\n\nconst POSTGRES_RESERVED_WORDS = \"all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with\".split(\",\");\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      encoding: null,\n      collate: null\n    }, options);\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : \"\",\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : \"\",\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : \"\",\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : \"\"\n    };\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, \"9.2.0\")) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return \"SHOW SERVER_VERSION\";\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = __spreadValues({}, options);\n\n    const databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n\n    const attrStr = [];\n    let comments = \"\";\n    let columnComments = \"\";\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === \"string\") {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf(\"COMMENT \");\n\n      if (i !== -1) {\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n    let attributesClause = attrStr.join(\", \");\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes(\"PRIMARY KEY\")) {\n        acc.push(this.quoteIdentifier(key));\n      }\n\n      return acc;\n    }, []).join(\",\");\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, \"9.1.0\") ? \"IF NOT EXISTS \" : \"\"}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? \" CASCADE\" : \"\"};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  }\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) schema = \"public\";\n    return `SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  }\n\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n        return conditions.join(\" AND \");\n      }\n\n      if (smth.path) {\n        let str;\n\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          const paths = _.toPath(smth.path);\n\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(\" = %s\", this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, {\n      context: \"addColumn\",\n      table,\n      key\n    });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n\n    const sql = [];\n\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = \"\";\n\n      if (definition.includes(\"NOT NULL\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n        definition = definition.replace(\"NOT NULL\", \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes(\"DEFAULT\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n        definition = definition.replace(/(DEFAULT[^;]+)/, \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith(\"ENUM(\")) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, {\n          schema: false\n        }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, \"\");\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace(\"ALTER COLUMN\", \"\");\n      }\n\n      if (definition.includes(\"REFERENCES\")) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace(\"ALTER COLUMN\", \"\");\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join(\"\");\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(\", \")};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || \"testfunc\";\n    language = language || \"plpgsql\";\n    returns = returns ? `RETURNS ${returns}` : \"\";\n    parameters = parameters || \"\";\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return [`TRUNCATE ${this.quoteTable(tableName)}`, options.restartIdentity ? \" RESTART IDENTITY\" : \"\", options.cascade ? \" CASCADE\" : \"\"].join(\"\");\n  }\n\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : \"\";\n    let primaryKeys = \"\";\n    let primaryKeysSelection = \"\";\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error(\"Cannot LIMIT delete without a model.\");\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(\",\");\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = \"\";\n    let schemaWhere = \"\";\n\n    if (typeof tableName !== \"string\") {\n      schemaJoin = \", pg_namespace s\";\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    return `SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return ['SELECT constraint_catalog AS \"constraintCatalog\",', 'constraint_schema AS \"constraintSchema\",', 'constraint_name AS \"constraintName\",', 'table_catalog AS \"tableCatalog\",', 'table_schema AS \"tableSchema\",', 'table_name AS \"tableName\",', 'constraint_type AS \"constraintType\",', 'is_deferrable AS \"isDeferrable\",', 'initially_deferred AS \"initiallyDeferred\"', \"from INFORMATION_SCHEMA.table_constraints\", `WHERE table_name='${tableName}';`].join(\" \");\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n\n    return [\"DROP INDEX\", options && options.concurrently && \"CONCURRENTLY\", `IF EXISTS ${this.quoteIdentifiers(indexName)}`].filter(Boolean).join(\" \");\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = \"\";\n\n    if (options.limit != null) {\n      fragment += \" LIMIT \" + this.escape(options.limit);\n    }\n\n    if (options.offset != null) {\n      fragment += \" OFFSET \" + this.escape(options.offset);\n    }\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n\n    if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(\", \")})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += \"[]\";\n        }\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, \"allowNull\") && !attribute.allowNull) {\n      sql += \" NOT NULL\";\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += \" GENERATED BY DEFAULT AS IDENTITY\";\n      } else {\n        sql += \" SERIAL\";\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += \" UNIQUE\";\n    }\n\n    if (attribute.primaryKey) {\n      sql += \" PRIMARY KEY\";\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if ((!attribute.references.model || typeof attribute.references.model == \"string\") && options.table && options.table.schema) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier(\"id\");\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ` ${attribute.references.deferrable.toString(this)}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === \"string\") {\n      if (options && [\"addColumn\", \"changeColumn\"].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = \"ALL\";\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(\", \");\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, \"DEFERRED\");\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, \"IMMEDIATE\");\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, __spreadValues({\n        key\n      }, options));\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : \"\"} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error(\"createFunction missing some parameters. Did you pass functionName, returnType, language and body?\");\n\n    const paramList = this._expandFunctionParamList(params);\n\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : \"\";\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n    const statement = options && options.force ? \"CREATE OR REPLACE FUNCTION\" : \"CREATE FUNCTION\";\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error(\"requires functionName\");\n\n    const paramList = this._expandFunctionParamList(params);\n\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === void 0 || !Array.isArray(params)) {\n      throw new Error(\"_expandFunctionParamList: function parameters array required, including an empty one for no arguments\");\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n\n      if (curParam.type) {\n        if (curParam.direction) {\n          paramDef.push(curParam.direction);\n        }\n\n        if (curParam.name) {\n          paramDef.push(curParam.name);\n        }\n\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error(\"function or trigger used with a parameter without any type\");\n      }\n\n      const joined = paramDef.join(\" \");\n      if (joined) paramList.push(joined);\n    });\n    return paramList.join(\", \");\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error(\"_expandFunctionVariableList: function variables must be an array\");\n    }\n\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error(\"function variable must have a name and type\");\n      }\n\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n\n      variableDefinition += \";\";\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(\" \");\n  }\n\n  expandOptions(options) {\n    return options === void 0 || _.isEmpty(options) ? \"\" : options.join(\" \");\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      \"after\": \"AFTER\",\n      \"before\": \"BEFORE\",\n      \"instead_of\": \"INSTEAD OF\",\n      \"after_constraint\": \"AFTER\"\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === \"after_constraint\" ? \"CONSTRAINT \" : \"\";\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error(\"no table change events specified to trigger on\");\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        \"insert\": \"INSERT\",\n        \"update\": \"UPDATE\",\n        \"delete\": \"DELETE\",\n        \"truncate\": \"TRUNCATE\"\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n\n      if (eventSpec === \"UPDATE\") {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(\", \")}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(\" OR \");\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = \"\";\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, {\n        schema: false\n      }).replace(/\"/g, \"'\")}`;\n    }\n\n    return `SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(\", \")})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\n\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, \"9.3.0\")) {\n      sql += \"IF NOT EXISTS \";\n    }\n\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, \"\").replace(/}$/, \"\");\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, \"\").replace(/,$/, \"\").replace(/(^\"|\"$)/g, \"\"));\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes(\"PRIMARY KEY\")) {\n      dataType = dataType.replace(\"PRIMARY KEY\", \"\");\n    }\n\n    if (dataType.includes(\"SERIAL\")) {\n      if (dataType.includes(\"BIGINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"BIGSERIAL\");\n        dataType = dataType.replace(\"BIGINT\", \"\");\n      } else if (dataType.includes(\"SMALLINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"SMALLSERIAL\");\n        dataType = dataType.replace(\"SMALLINT\", \"\");\n      } else {\n        dataType = dataType.replace(\"INTEGER\", \"\");\n      }\n\n      dataType = dataType.replace(\"NOT NULL\", \"\");\n    }\n\n    if (dataType.startsWith(\"ENUM(\")) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n\n  getForeignKeysQuery(tableName) {\n    return `SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n\n  _getForeignKeyReferencesQueryPrefix() {\n    return \"SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name \";\n  }\n\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${catalogName ? ` AND tc.table_catalog = '${catalogName}'` : \"\"}${schemaName ? ` AND tc.table_schema = '${schemaName}'` : \"\"}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${schema ? ` AND tc.table_schema = '${schema}'` : \"\"}`;\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (optForceQuote === true || optQuoteIdentifiers !== false || identifier.includes(\".\") || identifier.includes(\"->\") || POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())) {\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n\n    return rawIdentifier;\n  }\n\n}\n\nmodule.exports = PostgresQueryGenerator;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\postgres\\query-generator.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\n/**\n * list of reserved words in PostgreSQL 10\n * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html\n *\n * @private\n */\nconst POSTGRES_RESERVED_WORDS = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      encoding: null,\n      collate: null,\n      ...options\n    };\n\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : '',\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : '',\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : '',\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : ''\n    };\n\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = { ...options };\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n    let columnComments = '';\n\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === 'string') {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf('COMMENT ');\n      if (i !== -1) {\n        // Move comment to a separate query\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n\n    let attributesClause = attrStr.join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes('PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  }\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) schema = 'public';\n\n    return 'SELECT ' +\n      'pk.constraint_type as \"Constraint\",' +\n      'c.column_name as \"Field\", ' +\n      'c.column_default as \"Default\",' +\n      'c.is_nullable as \"Null\", ' +\n      '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' +\n      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' +\n      'FROM information_schema.columns c ' +\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n      'cu.column_name, tc.constraint_type ' +\n      'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n      'and tc.constraint_name=cu.constraint_name ' +\n      'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n      'ON pk.table_schema=c.table_schema ' +\n      'AND pk.table_name=c.table_name ' +\n      'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, { context: 'addColumn', table, key });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.includes('NOT NULL')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith('ENUM(')) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `TRUNCATE ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? ' RESTART IDENTITY' : '',\n      options.cascade ? ' CASCADE' : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : '';\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (typeof tableName !== 'string') {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  }\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return [\n      'DROP INDEX',\n      options && options.concurrently && 'CONCURRENTLY',\n      `IF EXISTS ${this.quoteIdentifiers(indexName)}`\n    ].filter(Boolean).join(' ');\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(', ')})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\n      } else {\n        sql += ' SERIAL';\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if (\n        (!attribute.references.model || typeof attribute.references.model == 'string')\n        && options.table\n        && options.table.schema\n      ) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ` ${attribute.references.deferrable.toString(this)}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      if (options && ['addColumn', 'changeColumn'].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        // for createTable event which does it's own parsing\n        // TODO: centralize creation of comment statements here\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, { key, ...options });\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${\n      eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ''} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) { paramDef.push(curParam.direction); }\n        if (curParam.name) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error('_expandFunctionVariableList: function variables must be an array');\n    }\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error('function variable must have a name and type');\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += ';';\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(' ');\n  }\n\n  expandOptions(options) {\n    return options === undefined || _.isEmpty(options) ?\n      '' : options.join(' ');\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(', ')}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\")}`;\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(', ')})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, ''));\n\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    if (dataType.startsWith('ENUM(')) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   *\n   * @returns {string}\n   */\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' +\n      'DISTINCT tc.constraint_name as constraint_name, ' +\n      'tc.constraint_schema as constraint_schema, ' +\n      'tc.constraint_catalog as constraint_catalog, ' +\n      'tc.table_name as table_name,' +\n      'tc.table_schema as table_schema,' +\n      'tc.table_catalog as table_catalog,' +\n      'kcu.column_name as column_name,' +\n      'ccu.table_schema  AS referenced_table_schema,' +\n      'ccu.table_catalog  AS referenced_table_catalog,' +\n      'ccu.table_name  AS referenced_table_name,' +\n      'ccu.column_name AS referenced_column_name ' +\n      'FROM information_schema.table_constraints AS tc ' +\n      'JOIN information_schema.key_column_usage AS kcu ' +\n      'ON tc.constraint_name = kcu.constraint_name ' +\n      'JOIN information_schema.constraint_column_usage AS ccu ' +\n      'ON ccu.constraint_name = tc.constraint_name ';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   *\n   * @param {string} tableName\n   * @param {string} catalogName\n   * @param {string} schemaName\n   */\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${\n      catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ''\n    }${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ''}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${\n      schema ? ` AND tc.table_schema = '${schema}'` : ''}`;\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (\n      optForceQuote === true ||\n      optQuoteIdentifiers !== false ||\n      identifier.includes('.') ||\n      identifier.includes('->') ||\n      POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())\n    ) {\n      // In Postgres if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\n\nmodule.exports = PostgresQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}