{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst _ = require(\"lodash\");\n\nconst Op = require(\"../../../operators\");\n\nconst Utils = require(\"../../../utils\");\n\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: \"=\",\n    [Op.ne]: \"!=\",\n    [Op.gte]: \">=\",\n    [Op.gt]: \">\",\n    [Op.lte]: \"<=\",\n    [Op.lt]: \"<\",\n    [Op.not]: \"IS NOT\",\n    [Op.is]: \"IS\",\n    [Op.in]: \"IN\",\n    [Op.notIn]: \"NOT IN\",\n    [Op.like]: \"LIKE\",\n    [Op.notLike]: \"NOT LIKE\",\n    [Op.iLike]: \"ILIKE\",\n    [Op.notILike]: \"NOT ILIKE\",\n    [Op.startsWith]: \"LIKE\",\n    [Op.endsWith]: \"LIKE\",\n    [Op.substring]: \"LIKE\",\n    [Op.regexp]: \"~\",\n    [Op.notRegexp]: \"!~\",\n    [Op.iRegexp]: \"~*\",\n    [Op.notIRegexp]: \"!~*\",\n    [Op.between]: \"BETWEEN\",\n    [Op.notBetween]: \"NOT BETWEEN\",\n    [Op.overlap]: \"&&\",\n    [Op.contains]: \"@>\",\n    [Op.contained]: \"<@\",\n    [Op.adjacent]: \"-|-\",\n    [Op.strictLeft]: \"<<\",\n    [Op.strictRight]: \">>\",\n    [Op.noExtendRight]: \"&<\",\n    [Op.noExtendLeft]: \"&>\",\n    [Op.any]: \"ANY\",\n    [Op.all]: \"ALL\",\n    [Op.and]: \" AND \",\n    [Op.or]: \" OR \",\n    [Op.col]: \"COL\",\n    [Op.placeholder]: \"$$PLACEHOLDER$$\",\n    [Op.match]: \"@@\"\n  },\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = __spreadValues({}, aliases);\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n\n      obj[prop] = item;\n    });\n\n    return obj;\n  }\n\n};\nmodule.exports = OperatorHelpers;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator\\operators.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Op = require('../../../operators');\nconst Utils = require('../../../utils');\n\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: '=',\n    [Op.ne]: '!=',\n    [Op.gte]: '>=',\n    [Op.gt]: '>',\n    [Op.lte]: '<=',\n    [Op.lt]: '<',\n    [Op.not]: 'IS NOT',\n    [Op.is]: 'IS',\n    [Op.in]: 'IN',\n    [Op.notIn]: 'NOT IN',\n    [Op.like]: 'LIKE',\n    [Op.notLike]: 'NOT LIKE',\n    [Op.iLike]: 'ILIKE',\n    [Op.notILike]: 'NOT ILIKE',\n    [Op.startsWith]: 'LIKE',\n    [Op.endsWith]: 'LIKE',\n    [Op.substring]: 'LIKE',\n    [Op.regexp]: '~',\n    [Op.notRegexp]: '!~',\n    [Op.iRegexp]: '~*',\n    [Op.notIRegexp]: '!~*',\n    [Op.between]: 'BETWEEN',\n    [Op.notBetween]: 'NOT BETWEEN',\n    [Op.overlap]: '&&',\n    [Op.contains]: '@>',\n    [Op.contained]: '<@',\n    [Op.adjacent]: '-|-',\n    [Op.strictLeft]: '<<',\n    [Op.strictRight]: '>>',\n    [Op.noExtendRight]: '&<',\n    [Op.noExtendLeft]: '&>',\n    [Op.any]: 'ANY',\n    [Op.all]: 'ALL',\n    [Op.and]: ' AND ',\n    [Op.or]: ' OR ',\n    [Op.col]: 'COL',\n    [Op.placeholder]: '$$PLACEHOLDER$$',\n    [Op.match]: '@@'\n  },\n\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = { ...aliases };\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n      obj[prop] = item;\n    });\n    return obj;\n  }\n};\n\nmodule.exports = OperatorHelpers;\n"]},"metadata":{},"sourceType":"script"}