{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  Logger: () => Logger,\n  logger: () => logger\n});\n\nvar import_debug = __toModule(require(\"debug\"));\n\nvar import_util = __toModule(require(\"util\"));\n\nclass Logger {\n  constructor() {\n    let _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    __publicField(this, \"config\");\n\n    var _b = _a,\n        {\n      context = \"sequelize\"\n    } = _b,\n        rest = __objRest(_b, [\"context\"]);\n\n    this.config = __spreadValues({\n      context\n    }, rest);\n  }\n\n  warn(message) {\n    console.warn(`(${this.config.context}) Warning: ${message}`);\n  }\n\n  inspect(value) {\n    return import_util.default.inspect(value, {\n      showHidden: false,\n      depth: 1\n    });\n  }\n\n  debugContext(name) {\n    return (0, import_debug.default)(`${this.config.context}:${name}`);\n  }\n\n}\n\nconst logger = new Logger();","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\utils\\logger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,QAAA,CAAA,OAAA,EAAA;AAAA,EAAA,MAAA,EAAA,MAAA,MAAA;AAAA,EAAA,MAAA,EAAA,MAAA;AAAA,CAAA,CAAA;;AAOA,IAAA,YAAA,GAAsB,UAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAtB;;AACA,IAAA,WAAA,GAAiB,UAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAjB;;AAgBO,MAAA,MAAA,CAAa;AAGlB,EAAA,WAAA,GAA4E;AAAA,QAAhE,EAAgE,uEAAJ,EAAI;;AAFlE,IAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AAEE,QAAA,EAAA,GAAA,EAAA;AAAA,QAAE;AAAA,MAAA,OAAA,GAAU;AAAV,QAAF,EAAA;AAAA,QAA4B,IAAA,GAAA,SAAA,CAA5B,EAA4B,EAAA,CAA1B,SAA0B,CAAA,CAA5B;;AACV,SAAK,MAAL,GAAc,cAAA,CAAA;AACZ,MAAA;AADY,KAAA,EAET,IAFS,CAAd;AAEK;;AASP,EAAA,IAAA,CAAK,OAAL,EAA4B;AAC1B,IAAA,OAAA,CAAQ,IAAR,CAAa,IAAI,KAAK,MAAL,CAAY,OAAA,cAAqB,OAAA,EAAlD;AAAkD;;AASpD,EAAA,OAAA,CAAQ,KAAR,EAAgC;AAC9B,WAAO,WAAA,CAAA,OAAA,CAAK,OAAL,CAAa,KAAb,EAAoB;AACzB,MAAA,UAAA,EAAY,KADa;AAEzB,MAAA,KAAA,EAAO;AAFkB,KAApB,CAAP;AAES;;AAUX,EAAA,YAAA,CAAa,IAAb,EAA+C;AAC7C,WAAO,CAAA,GAAA,YAAA,CAAA,OAAA,EAAU,GAAG,KAAK,MAAL,CAAY,OAAA,IAAW,IAAA,EAApC,CAAP;AAA2C;;AAvC3B;;AA2Cb,MAAM,MAAA,GAAS,IAAI,MAAJ,EAAf","sourcesContent":["/**\n * @file Sequelize module for debug and deprecation messages.\n * It require a `context` for which messages will be printed.\n *\n * @module logging\n * @access package\n */\nimport nodeDebug from 'debug';\nimport util from 'util';\n\n/**\n * The configuration for sequelize's logging interface.\n *\n * @access package\n */\nexport interface LoggerConfig {\n  /**\n   * The context which the logger should log in.\n   *\n   * @default 'sequelize'\n   */\n  context?: string;\n}\n\nexport class Logger {\n  protected config: LoggerConfig;\n\n  constructor({ context = 'sequelize', ...rest }: Partial<LoggerConfig> = {}) {\n    this.config = {\n      context,\n      ...rest\n    };\n  }\n\n  /**\n   * Logs a warning in the logger's context.\n   *\n   * @param message The message of the warning.\n   */\n  warn(message: string): void {\n    console.warn(`(${this.config.context}) Warning: ${message}`);\n  }\n\n  /**\n   * Uses node's util.inspect to stringify a value.\n   *\n   * @param value The value which should be inspected.\n   * @returns The string of the inspected value.\n   */\n  inspect(value: unknown): string {\n    return util.inspect(value, {\n      showHidden: false,\n      depth: 1\n    });\n  }\n\n  /**\n   * Gets a debugger for a context.\n   *\n   * @param name The name of the context.\n   * @returns A debugger interace which can be used to debug.\n   */\n  debugContext(name: string): nodeDebug.Debugger {\n    return nodeDebug(`${this.config.context}:${name}`);\n  }\n}\n\nexport const logger = new Logger();\n"]},"metadata":{},"sourceType":"script"}