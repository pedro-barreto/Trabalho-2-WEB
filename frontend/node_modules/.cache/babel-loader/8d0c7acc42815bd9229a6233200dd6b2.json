{"ast":null,"code":"\"use strict\";\n\nconst {\n  classToInvokable\n} = require(\"./utils\");\n\nclass ABSTRACT {\n  static toString() {\n    return new this().toString(...arguments);\n  }\n\n  toString() {\n    return this.toSql(...arguments);\n  }\n\n  toSql() {\n    throw new Error(\"toSql implementation missing\");\n  }\n\n}\n\nclass INITIALLY_DEFERRED extends ABSTRACT {\n  toSql() {\n    return \"DEFERRABLE INITIALLY DEFERRED\";\n  }\n\n}\n\nclass INITIALLY_IMMEDIATE extends ABSTRACT {\n  toSql() {\n    return \"DEFERRABLE INITIALLY IMMEDIATE\";\n  }\n\n}\n\nclass NOT extends ABSTRACT {\n  toSql() {\n    return \"NOT DEFERRABLE\";\n  }\n\n}\n\nclass SET_DEFERRED extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setDeferredQuery(this.constraints);\n  }\n\n}\n\nclass SET_IMMEDIATE extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setImmediateQuery(this.constraints);\n  }\n\n}\n\nconst Deferrable = {\n  INITIALLY_DEFERRED: classToInvokable(INITIALLY_DEFERRED),\n  INITIALLY_IMMEDIATE: classToInvokable(INITIALLY_IMMEDIATE),\n  NOT: classToInvokable(NOT),\n  SET_DEFERRED: classToInvokable(SET_DEFERRED),\n  SET_IMMEDIATE: classToInvokable(SET_IMMEDIATE)\n};\nmodule.exports = Deferrable;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\deferrable.js"],"names":[],"mappings":";;AAEA,MAAM;AAAE,EAAA;AAAF,IAAuB,OAAA,CAAQ,SAAR,CAA7B;;AAEA,MAAA,QAAA,CAAe;AACN,SAAA,QAAA,GAAkB;AACvB,WAAO,IAAI,IAAJ,GAAW,QAAX,CAAoB,YAApB,CAAP;AAA8B;;AAGhC,EAAA,QAAA,GAAkB;AAChB,WAAO,KAAK,KAAL,CAAW,YAAX,CAAP;AAAqB;;AAGvB,EAAA,KAAA,GAAQ;AACN,UAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AAAgB;;AAVL;;AAcf,MAAA,kBAAA,SAAiC,QAAjC,CAA0C;AACxC,EAAA,KAAA,GAAQ;AACN,WAAO,+BAAP;AAAO;;AAF+B;;AAM1C,MAAA,mBAAA,SAAkC,QAAlC,CAA2C;AACzC,EAAA,KAAA,GAAQ;AACN,WAAO,gCAAP;AAAO;;AAFgC;;AAM3C,MAAA,GAAA,SAAkB,QAAlB,CAA2B;AACzB,EAAA,KAAA,GAAQ;AACN,WAAO,gBAAP;AAAO;;AAFgB;;AAM3B,MAAA,YAAA,SAA2B,QAA3B,CAAoC;AAClC,EAAA,WAAA,CAAY,WAAZ,EAAyB;AACvB;AACA,SAAK,WAAL,GAAmB,WAAnB;AAAmB;;AAGrB,EAAA,KAAA,CAAM,cAAN,EAAsB;AACpB,WAAO,cAAA,CAAe,gBAAf,CAAgC,KAAK,WAArC,CAAP;AAA4C;;AAPZ;;AAWpC,MAAA,aAAA,SAA4B,QAA5B,CAAqC;AACnC,EAAA,WAAA,CAAY,WAAZ,EAAyB;AACvB;AACA,SAAK,WAAL,GAAmB,WAAnB;AAAmB;;AAGrB,EAAA,KAAA,CAAM,cAAN,EAAsB;AACpB,WAAO,cAAA,CAAe,iBAAf,CAAiC,KAAK,WAAtC,CAAP;AAA6C;;AAPZ;;AAiDrC,MAAM,UAAA,GAAa;AACjB,EAAA,kBAAA,EAAoB,gBAAA,CAAiB,kBAAjB,CADH;AAEjB,EAAA,mBAAA,EAAqB,gBAAA,CAAiB,mBAAjB,CAFJ;AAGjB,EAAA,GAAA,EAAK,gBAAA,CAAiB,GAAjB,CAHY;AAIjB,EAAA,YAAA,EAAc,gBAAA,CAAiB,YAAjB,CAJG;AAKjB,EAAA,aAAA,EAAe,gBAAA,CAAiB,aAAjB;AALE,CAAnB;AAQA,MAAA,CAAO,OAAP,GAAiB,UAAjB","sourcesContent":["'use strict';\n\nconst { classToInvokable } = require('./utils');\n\nclass ABSTRACT {\n  static toString(...args) {\n    return new this().toString(...args);\n  }\n\n  toString(...args) {\n    return this.toSql(...args);\n  }\n\n  toSql() {\n    throw new Error('toSql implementation missing');\n  }\n}\n\nclass INITIALLY_DEFERRED extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY DEFERRED';\n  }\n}\n\nclass INITIALLY_IMMEDIATE extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY IMMEDIATE';\n  }\n}\n\nclass NOT extends ABSTRACT {\n  toSql() {\n    return 'NOT DEFERRABLE';\n  }\n}\n\nclass SET_DEFERRED extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setDeferredQuery(this.constraints);\n  }\n}\n\nclass SET_IMMEDIATE extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setImmediateQuery(this.constraints);\n  }\n}\n\n/**\n * A collection of properties related to deferrable constraints. It can be used to\n * make foreign key constraints deferrable and to set the constraints within a\n * transaction. This is only supported in PostgreSQL.\n *\n * The foreign keys can be configured like this. It will create a foreign key\n * that will check the constraints immediately when the data was inserted.\n *\n * ```js\n * sequelize.define('Model', {\n *   foreign_id: {\n *     type: Sequelize.INTEGER,\n *     references: {\n *       model: OtherModel,\n *       key: 'id',\n *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n *     }\n *   }\n * });\n * ```\n *\n * The constraints can be configured in a transaction like this. It will\n * trigger a query once the transaction has been started and set the constraints\n * to be checked at the very end of the transaction.\n *\n * ```js\n * sequelize.transaction({\n *   deferrable: Sequelize.Deferrable.SET_DEFERRED\n * });\n * ```\n *\n * @property INITIALLY_DEFERRED    Use when declaring a constraint. Allow and enable by default this constraint's checks to be deferred at the end of transactions.\n * @property INITIALLY_IMMEDIATE   Use when declaring a constraint. Allow the constraint's checks to be deferred at the end of transactions.\n * @property NOT                   Use when declaring a constraint. Set the constraint to not deferred. This is the default in PostgreSQL and makes it impossible to dynamically defer the constraints within a transaction.\n * @property SET_DEFERRED          Use when declaring a transaction. Defer the deferrable checks involved in this transaction at commit.\n * @property SET_IMMEDIATE         Use when declaring a transaction. Execute the deferrable checks involved in this transaction immediately.\n */\n\nconst Deferrable = {\n  INITIALLY_DEFERRED: classToInvokable(INITIALLY_DEFERRED),\n  INITIALLY_IMMEDIATE: classToInvokable(INITIALLY_IMMEDIATE),\n  NOT: classToInvokable(NOT),\n  SET_DEFERRED: classToInvokable(SET_DEFERRED),\n  SET_IMMEDIATE: classToInvokable(SET_IMMEDIATE)\n};\n\nmodule.exports = Deferrable;\n"]},"metadata":{},"sourceType":"script"}