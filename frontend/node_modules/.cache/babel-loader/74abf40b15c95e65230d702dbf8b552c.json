{"ast":null,"code":"\"use strict\";\n\nconst util = require(\"util\");\n\nconst _ = require(\"lodash\");\n\nconst wkx = require(\"wkx\");\n\nconst sequelizeErrors = require(\"./errors\");\n\nconst Validator = require(\"./utils/validator-extras\").validator;\n\nconst momentTz = require(\"moment-timezone\");\n\nconst moment = require(\"moment\");\n\nconst {\n  logger\n} = require(\"./utils/logger\");\n\nconst warnings = {};\n\nconst {\n  classToInvokable\n} = require(\"./utils/class-to-invokable\");\n\nconst {\n  joinSQLFragments\n} = require(\"./utils/join-sql-fragments\");\n\nclass ABSTRACT {\n  toString(options) {\n    return this.toSql(options);\n  }\n\n  toSql() {\n    return this.key;\n  }\n\n  stringify(value, options) {\n    if (this._stringify) {\n      return this._stringify(value, options);\n    }\n\n    return value;\n  }\n\n  bindParam(value, options) {\n    if (this._bindParam) {\n      return this._bindParam(value, options);\n    }\n\n    return options.bindParam(this.stringify(value, options));\n  }\n\n  static toString() {\n    return this.name;\n  }\n\n  static warn(link, text) {\n    if (!warnings[text]) {\n      warnings[text] = true;\n      logger.warn(`${text} \n>> Check: ${link}`);\n    }\n  }\n\n  static extend(oldType) {\n    return new this(oldType.options);\n  }\n\n}\n\nABSTRACT.prototype.dialectTypes = \"\";\n\nclass STRING extends ABSTRACT {\n  constructor(length, binary) {\n    super();\n    const options = typeof length === \"object\" && length || {\n      length,\n      binary\n    };\n    this.options = options;\n    this._binary = options.binary;\n    this._length = options.length || 255;\n  }\n\n  toSql() {\n    return joinSQLFragments([`VARCHAR(${this._length})`, this._binary && \"BINARY\"]);\n  }\n\n  validate(value) {\n    if (Object.prototype.toString.call(value) !== \"[object String]\") {\n      if (this.options.binary && Buffer.isBuffer(value) || typeof value === \"number\") {\n        return true;\n      }\n\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n\n    return true;\n  }\n\n  get BINARY() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n\n  static get BINARY() {\n    return new this().BINARY;\n  }\n\n}\n\nclass CHAR extends STRING {\n  constructor(length, binary) {\n    super(typeof length === \"object\" && length || {\n      length,\n      binary\n    });\n  }\n\n  toSql() {\n    return joinSQLFragments([`CHAR(${this._length})`, this._binary && \"BINARY\"]);\n  }\n\n}\n\nclass TEXT extends ABSTRACT {\n  constructor(length) {\n    super();\n    const options = typeof length === \"object\" && length || {\n      length\n    };\n    this.options = options;\n    this._length = options.length || \"\";\n  }\n\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case \"tiny\":\n        return \"TINYTEXT\";\n\n      case \"medium\":\n        return \"MEDIUMTEXT\";\n\n      case \"long\":\n        return \"LONGTEXT\";\n\n      default:\n        return this.key;\n    }\n  }\n\n  validate(value) {\n    if (typeof value !== \"string\") {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n\n    return true;\n  }\n\n}\n\nclass CITEXT extends ABSTRACT {\n  toSql() {\n    return \"CITEXT\";\n  }\n\n  validate(value) {\n    if (typeof value !== \"string\") {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n\n    return true;\n  }\n\n}\n\nclass NUMBER extends ABSTRACT {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    if (typeof options === \"number\") {\n      options = {\n        length: options\n      };\n    }\n\n    this.options = options;\n    this._length = options.length;\n    this._zerofill = options.zerofill;\n    this._decimals = options.decimals;\n    this._precision = options.precision;\n    this._scale = options.scale;\n    this._unsigned = options.unsigned;\n  }\n\n  toSql() {\n    let result = this.key;\n\n    if (this._length) {\n      result += `(${this._length}`;\n\n      if (typeof this._decimals === \"number\") {\n        result += `,${this._decimals}`;\n      }\n\n      result += \")\";\n    }\n\n    if (this._unsigned) {\n      result += \" UNSIGNED\";\n    }\n\n    if (this._zerofill) {\n      result += \" ZEROFILL\";\n    }\n\n    return result;\n  }\n\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n\n    return true;\n  }\n\n  _stringify(number) {\n    if (typeof number === \"number\" || typeof number === \"boolean\" || number === null || number === void 0) {\n      return number;\n    }\n\n    if (typeof number.toString === \"function\") {\n      return number.toString();\n    }\n\n    return number;\n  }\n\n  get UNSIGNED() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n\n  get ZEROFILL() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n\n  static get UNSIGNED() {\n    return new this().UNSIGNED;\n  }\n\n  static get ZEROFILL() {\n    return new this().ZEROFILL;\n  }\n\n}\n\nclass INTEGER extends NUMBER {\n  validate(value) {\n    if (!Validator.isInt(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n\n    return true;\n  }\n\n}\n\nclass TINYINT extends INTEGER {}\n\nclass SMALLINT extends INTEGER {}\n\nclass MEDIUMINT extends INTEGER {}\n\nclass BIGINT extends INTEGER {}\n\nclass FLOAT extends NUMBER {\n  constructor(length, decimals) {\n    super(typeof length === \"object\" && length || {\n      length,\n      decimals\n    });\n  }\n\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid float\", value));\n    }\n\n    return true;\n  }\n\n}\n\nclass REAL extends NUMBER {\n  constructor(length, decimals) {\n    super(typeof length === \"object\" && length || {\n      length,\n      decimals\n    });\n  }\n\n}\n\nclass DOUBLE extends NUMBER {\n  constructor(length, decimals) {\n    super(typeof length === \"object\" && length || {\n      length,\n      decimals\n    });\n  }\n\n}\n\nclass DECIMAL extends NUMBER {\n  constructor(precision, scale) {\n    super(typeof precision === \"object\" && precision || {\n      precision,\n      scale\n    });\n  }\n\n  toSql() {\n    if (this._precision || this._scale) {\n      return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(\",\")})`;\n    }\n\n    return \"DECIMAL\";\n  }\n\n  validate(value) {\n    if (!Validator.isDecimal(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid decimal\", value));\n    }\n\n    return true;\n  }\n\n}\n\nconst protoExtensions = {\n  escape: false,\n\n  _value(value) {\n    if (isNaN(value)) {\n      return \"NaN\";\n    }\n\n    if (!isFinite(value)) {\n      const sign = value < 0 ? \"-\" : \"\";\n      return `${sign}Infinity`;\n    }\n\n    return value;\n  },\n\n  _stringify(value) {\n    return `'${this._value(value)}'`;\n  },\n\n  _bindParam(value, options) {\n    return options.bindParam(this._value(value));\n  }\n\n};\n\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  Object.assign(floating.prototype, protoExtensions);\n}\n\nclass BOOLEAN extends ABSTRACT {\n  toSql() {\n    return \"TINYINT(1)\";\n  }\n\n  validate(value) {\n    if (!Validator.isBoolean(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid boolean\", value));\n    }\n\n    return true;\n  }\n\n  _sanitize(value) {\n    if (value !== null && value !== void 0) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        value = value[0];\n      }\n\n      const type = typeof value;\n\n      if (type === \"string\") {\n        return value === \"true\" ? true : value === \"false\" ? false : value;\n      }\n\n      if (type === \"number\") {\n        return value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n\n    return value;\n  }\n\n}\n\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\nclass TIME extends ABSTRACT {\n  toSql() {\n    return \"TIME\";\n  }\n\n}\n\nclass DATE extends ABSTRACT {\n  constructor(length) {\n    super();\n    const options = typeof length === \"object\" && length || {\n      length\n    };\n    this.options = options;\n    this._length = options.length || \"\";\n  }\n\n  toSql() {\n    return \"DATETIME\";\n  }\n\n  validate(value) {\n    if (!Validator.isDate(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid date\", value));\n    }\n\n    return true;\n  }\n\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n      return new Date(value);\n    }\n\n    return value;\n  }\n\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && (value === originalValue || value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n      return false;\n    }\n\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n\n    return true;\n  }\n\n  _applyTimezone(date, options) {\n    if (options.timezone) {\n      if (momentTz.tz.zone(options.timezone)) {\n        return momentTz(date).tz(options.timezone);\n      }\n\n      return date = moment(date).utcOffset(options.timezone);\n    }\n\n    return momentTz(date);\n  }\n\n  _stringify(date, options) {\n    if (!moment.isMoment(date)) {\n      date = this._applyTimezone(date, options);\n    }\n\n    return date.format(\"YYYY-MM-DD HH:mm:ss.SSS Z\");\n  }\n\n}\n\nclass DATEONLY extends ABSTRACT {\n  toSql() {\n    return \"DATE\";\n  }\n\n  _stringify(date) {\n    return moment(date).format(\"YYYY-MM-DD\");\n  }\n\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !!value) {\n      return moment(value).format(\"YYYY-MM-DD\");\n    }\n\n    return value;\n  }\n\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && originalValue === value) {\n      return false;\n    }\n\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\n\nclass HSTORE extends ABSTRACT {\n  validate(value) {\n    if (!_.isPlainObject(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid hstore\", value));\n    }\n\n    return true;\n  }\n\n}\n\nclass JSONTYPE extends ABSTRACT {\n  validate() {\n    return true;\n  }\n\n  _stringify(value) {\n    return JSON.stringify(value);\n  }\n\n}\n\nclass JSONB extends JSONTYPE {}\n\nclass NOW extends ABSTRACT {}\n\nclass BLOB extends ABSTRACT {\n  constructor(length) {\n    super();\n    const options = typeof length === \"object\" && length || {\n      length\n    };\n    this.options = options;\n    this._length = options.length || \"\";\n  }\n\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case \"tiny\":\n        return \"TINYBLOB\";\n\n      case \"medium\":\n        return \"MEDIUMBLOB\";\n\n      case \"long\":\n        return \"LONGBLOB\";\n\n      default:\n        return this.key;\n    }\n  }\n\n  validate(value) {\n    if (typeof value !== \"string\" && !Buffer.isBuffer(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid blob\", value));\n    }\n\n    return true;\n  }\n\n  _stringify(value) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n    }\n\n    const hex = value.toString(\"hex\");\n    return this._hexify(hex);\n  }\n\n  _hexify(hex) {\n    return `X'${hex}'`;\n  }\n\n  _bindParam(value, options) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n    }\n\n    return options.bindParam(value);\n  }\n\n}\n\nBLOB.prototype.escape = false;\n\nclass RANGE extends ABSTRACT {\n  constructor(subtype) {\n    super();\n    const options = _.isPlainObject(subtype) ? subtype : {\n      subtype\n    };\n    if (!options.subtype) options.subtype = new INTEGER();\n\n    if (typeof options.subtype === \"function\") {\n      options.subtype = new options.subtype();\n    }\n\n    this._subtype = options.subtype.key;\n    this.options = options;\n  }\n\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid range\", value));\n    }\n\n    if (value.length !== 2) {\n      throw new sequelizeErrors.ValidationError(\"A range must be an array with two elements\");\n    }\n\n    return true;\n  }\n\n}\n\nclass UUID extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== \"string\" || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuid\", value));\n    }\n\n    return true;\n  }\n\n}\n\nclass UUIDV1 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== \"string\" || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuid\", value));\n    }\n\n    return true;\n  }\n\n}\n\nclass UUIDV4 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== \"string\" || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuidv4\", value));\n    }\n\n    return true;\n  }\n\n}\n\nclass VIRTUAL extends ABSTRACT {\n  constructor(ReturnType, fields) {\n    super();\n    if (typeof ReturnType === \"function\") ReturnType = new ReturnType();\n    this.returnType = ReturnType;\n    this.fields = fields;\n  }\n\n}\n\nclass ENUM extends ABSTRACT {\n  constructor() {\n    super();\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const value = args[0];\n    const options = typeof value === \"object\" && !Array.isArray(value) && value || {\n      values: args.reduce((result, element) => {\n        return result.concat(Array.isArray(element) ? element : [element]);\n      }, [])\n    };\n    this.values = options.values;\n    this.options = options;\n  }\n\n  validate(value) {\n    if (!this.values.includes(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid choice in %j\", value, this.values));\n    }\n\n    return true;\n  }\n\n}\n\nclass ARRAY extends ABSTRACT {\n  constructor(type) {\n    super();\n    const options = _.isPlainObject(type) ? type : {\n      type\n    };\n    this.options = options;\n    this.type = typeof options.type === \"function\" ? new options.type() : options.type;\n  }\n\n  toSql() {\n    return `${this.type.toSql()}[]`;\n  }\n\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid array\", value));\n    }\n\n    return true;\n  }\n\n  static is(obj, type) {\n    return obj instanceof ARRAY && obj.type instanceof type;\n  }\n\n}\n\nclass GEOMETRY extends ABSTRACT {\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : {\n      type,\n      srid\n    };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n\n}\n\nGEOMETRY.prototype.escape = false;\n\nclass GEOGRAPHY extends ABSTRACT {\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : {\n      type,\n      srid\n    };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n\n}\n\nGEOGRAPHY.prototype.escape = false;\n\nclass CIDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\" || !Validator.isIPRange(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid CIDR\", value));\n    }\n\n    return true;\n  }\n\n}\n\nclass INET extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\" || !Validator.isIP(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid INET\", value));\n    }\n\n    return true;\n  }\n\n}\n\nclass MACADDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\" || !Validator.isMACAddress(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid MACADDR\", value));\n    }\n\n    return true;\n  }\n\n}\n\nclass TSVECTOR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\") {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n\n    return true;\n  }\n\n}\n\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  ENUM,\n  RANGE,\n  REAL,\n  \"DOUBLE PRECISION\": DOUBLE,\n  DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR,\n  CITEXT,\n  TSVECTOR\n};\n\n_.each(DataTypes, (dataType, name) => {\n  if (!Object.prototype.hasOwnProperty.call(dataType, \"key\")) {\n    dataType.types = {};\n    dataType.key = dataType.prototype.key = name;\n  }\n});\n\nconst dialectMap = {};\ndialectMap.postgres = require(\"./dialects/postgres/data-types\")(DataTypes);\ndialectMap.mysql = require(\"./dialects/mysql/data-types\")(DataTypes);\ndialectMap.mariadb = require(\"./dialects/mariadb/data-types\")(DataTypes);\ndialectMap.sqlite = require(\"./dialects/sqlite/data-types\")(DataTypes);\ndialectMap.mssql = require(\"./dialects/mssql/data-types\")(DataTypes);\ndialectMap.db2 = require(\"./dialects/db2/data-types\")(DataTypes);\ndialectMap.snowflake = require(\"./dialects/snowflake/data-types\")(DataTypes);\nconst dialectList = Object.values(dialectMap);\n\nfor (const dataTypes of dialectList) {\n  _.each(dataTypes, (DataType, key) => {\n    if (!DataType.key) {\n      DataType.key = DataType.prototype.key = key;\n    }\n  });\n}\n\nfor (const dataTypes of [DataTypes, ...dialectList]) {\n  _.each(dataTypes, (DataType, key) => {\n    dataTypes[key] = classToInvokable(DataType);\n  });\n}\n\nObject.assign(DataTypes, dialectMap);","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\data-types.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst util = require('util');\nconst _ = require('lodash');\nconst wkx = require('wkx');\nconst sequelizeErrors = require('./errors');\nconst Validator = require('./utils/validator-extras').validator;\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\nconst { logger } = require('./utils/logger');\nconst warnings = {};\nconst { classToInvokable } = require('./utils/class-to-invokable');\nconst { joinSQLFragments } = require('./utils/join-sql-fragments');\n\nclass ABSTRACT {\n  toString(options) {\n    return this.toSql(options);\n  }\n  toSql() {\n    return this.key;\n  }\n  stringify(value, options) {\n    if (this._stringify) {\n      return this._stringify(value, options);\n    }\n    return value;\n  }\n  bindParam(value, options) {\n    if (this._bindParam) {\n      return this._bindParam(value, options);\n    }\n    return options.bindParam(this.stringify(value, options));\n  }\n  static toString() {\n    return this.name;\n  }\n  static warn(link, text) {\n    if (!warnings[text]) {\n      warnings[text] = true;\n      logger.warn(`${text} \\n>> Check: ${link}`);\n    }\n  }\n  static extend(oldType) {\n    return new this(oldType.options);\n  }\n}\n\nABSTRACT.prototype.dialectTypes = '';\n\n/**\n * STRING A variable length string\n */\nclass STRING extends ABSTRACT {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super();\n    const options = typeof length === 'object' && length || { length, binary };\n    this.options = options;\n    this._binary = options.binary;\n    this._length = options.length || 255;\n  }\n  toSql() {\n    return joinSQLFragments([\n      `VARCHAR(${this._length})`,\n      this._binary && 'BINARY'\n    ]);\n  }\n  validate(value) {\n    if (Object.prototype.toString.call(value) !== '[object String]') {\n      if (this.options.binary && Buffer.isBuffer(value) || typeof value === 'number') {\n        return true;\n      }\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n\n  get BINARY() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n\n  static get BINARY() {\n    return new this().BINARY;\n  }\n}\n\n/**\n * CHAR A fixed length string\n */\nclass CHAR extends STRING {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super(typeof length === 'object' && length || { length, binary });\n  }\n  toSql() {\n    return joinSQLFragments([\n      `CHAR(${this._length})`,\n      this._binary && 'BINARY'\n    ]);\n  }\n}\n\n/**\n * Unlimited length TEXT column\n */\nclass TEXT extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYTEXT';\n      case 'medium':\n        return 'MEDIUMTEXT';\n      case 'long':\n        return 'LONGTEXT';\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * An unlimited length case-insensitive text column.\n * Original case is preserved but acts case-insensitive when comparing values (such as when finding or unique constraints).\n * Only available in Postgres and SQLite.\n *\n */\nclass CITEXT extends ABSTRACT {\n  toSql() {\n    return 'CITEXT';\n  }\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * Base number type which is used to build other types\n */\nclass NUMBER extends ABSTRACT {\n  /**\n   * @param {object} options type options\n   * @param {string|number} [options.length] length of type, like `INT(4)`\n   * @param {boolean} [options.zerofill] Is zero filled?\n   * @param {boolean} [options.unsigned] Is unsigned?\n   * @param {string|number} [options.decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   * @param {string|number} [options.precision] defines precision for decimal type\n   * @param {string|number} [options.scale] defines scale for decimal type\n   */\n  constructor(options = {}) {\n    super();\n    if (typeof options === 'number') {\n      options = {\n        length: options\n      };\n    }\n    this.options = options;\n    this._length = options.length;\n    this._zerofill = options.zerofill;\n    this._decimals = options.decimals;\n    this._precision = options.precision;\n    this._scale = options.scale;\n    this._unsigned = options.unsigned;\n  }\n  toSql() {\n    let result = this.key;\n    if (this._length) {\n      result += `(${this._length}`;\n      if (typeof this._decimals === 'number') {\n        result += `,${this._decimals}`;\n      }\n      result += ')';\n    }\n    if (this._unsigned) {\n      result += ' UNSIGNED';\n    }\n    if (this._zerofill) {\n      result += ' ZEROFILL';\n    }\n    return result;\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n  _stringify(number) {\n    if (typeof number === 'number' || typeof number === 'boolean' || number === null || number === undefined) {\n      return number;\n    }\n    if (typeof number.toString === 'function') {\n      return number.toString();\n    }\n    return number;\n  }\n\n  get UNSIGNED() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n\n  get ZEROFILL() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n\n  static get UNSIGNED() {\n    return new this().UNSIGNED;\n  }\n\n  static get ZEROFILL() {\n    return new this().ZEROFILL;\n  }\n}\n\n/**\n * A 32 bit integer\n */\nclass INTEGER extends NUMBER {\n  validate(value) {\n    if (!Validator.isInt(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n}\n\n/**\n * A 8 bit integer\n */\nclass TINYINT extends INTEGER {\n}\n\n/**\n * A 16 bit integer\n */\nclass SMALLINT extends INTEGER {\n}\n\n/**\n * A 24 bit integer\n */\nclass MEDIUMINT extends INTEGER {\n}\n\n/**\n * A 64 bit integer\n */\nclass BIGINT extends INTEGER {\n}\n\n/**\n * Floating point number (4-byte precision).\n */\nclass FLOAT extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `FLOAT(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid float', value));\n    }\n    return true;\n  }\n}\n\n/**\n * Floating point number (4-byte precision).\n */\nclass REAL extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `REAL(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `REAL(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n}\n\n/**\n * Floating point number (8-byte precision).\n */\nclass DOUBLE extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `DOUBLE PRECISION(25)`\n   * @param {string|number} [decimals] number of decimal points, used with length `DOUBLE PRECISION(25, 10)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n}\n\n/**\n * Decimal type, variable precision, take length as specified by user\n */\nclass DECIMAL extends NUMBER {\n  /**\n   * @param {string|number} [precision] defines precision\n   * @param {string|number} [scale] defines scale\n   */\n  constructor(precision, scale) {\n    super(typeof precision === 'object' && precision || { precision, scale });\n  }\n  toSql() {\n    if (this._precision || this._scale) {\n      return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(',')})`;\n    }\n    return 'DECIMAL';\n  }\n  validate(value) {\n    if (!Validator.isDecimal(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid decimal', value));\n    }\n    return true;\n  }\n}\n\n// TODO: Create intermediate class\nconst protoExtensions = {\n  escape: false,\n  _value(value) {\n    if (isNaN(value)) {\n      return 'NaN';\n    }\n    if (!isFinite(value)) {\n      const sign = value < 0 ? '-' : '';\n      return `${sign}Infinity`;\n    }\n\n    return value;\n  },\n  _stringify(value) {\n    return `'${this._value(value)}'`;\n  },\n  _bindParam(value, options) {\n    return options.bindParam(this._value(value));\n  }\n};\n\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  Object.assign(floating.prototype, protoExtensions);\n}\n\n/**\n * A boolean / tinyint column, depending on dialect\n */\nclass BOOLEAN extends ABSTRACT {\n  toSql() {\n    return 'TINYINT(1)';\n  }\n  validate(value) {\n    if (!Validator.isBoolean(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid boolean', value));\n    }\n    return true;\n  }\n  _sanitize(value) {\n    if (value !== null && value !== undefined) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        // Bit fields are returned as buffers\n        value = value[0];\n      }\n      const type = typeof value;\n      if (type === 'string') {\n        // Only take action on valid boolean strings.\n        return value === 'true' ? true : value === 'false' ? false : value;\n      }\n      if (type === 'number') {\n        // Only take action on valid boolean integers.\n        return value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n    return value;\n  }\n}\n\n\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n/**\n * A time column\n *\n */\nclass TIME extends ABSTRACT {\n  toSql() {\n    return 'TIME';\n  }\n}\n\n/**\n * Date column with timezone, default is UTC\n */\nclass DATE extends ABSTRACT {\n  /**\n   * @param {string|number} [length] precision to allow storing milliseconds\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    return 'DATETIME';\n  }\n  validate(value) {\n    if (!Validator.isDate(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid date', value));\n    }\n    return true;\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n      return new Date(value);\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value &&\n      (value === originalValue ||\n        value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n      return false;\n    }\n    // not changed when set to same empty value\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n  _applyTimezone(date, options) {\n    if (options.timezone) {\n      if (momentTz.tz.zone(options.timezone)) {\n        return momentTz(date).tz(options.timezone);\n      }\n      return date = moment(date).utcOffset(options.timezone);\n    }\n    return momentTz(date);\n  }\n  _stringify(date, options) {\n    if (!moment.isMoment(date)) {\n      date = this._applyTimezone(date, options);\n    }\n    // Z here means current timezone, _not_ UTC\n    return date.format('YYYY-MM-DD HH:mm:ss.SSS Z');\n  }\n}\n\n/**\n * A date only column (no timestamp)\n */\nclass DATEONLY extends ABSTRACT {\n  toSql() {\n    return 'DATE';\n  }\n  _stringify(date) {\n    return moment(date).format('YYYY-MM-DD');\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !!value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && originalValue === value) {\n      return false;\n    }\n    // not changed when set to same empty value\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n}\n\n/**\n * A key / value store column. Only available in Postgres.\n */\nclass HSTORE extends ABSTRACT {\n  validate(value) {\n    if (!_.isPlainObject(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid hstore', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A JSON string column. Available in MySQL, Postgres and SQLite\n */\nclass JSONTYPE extends ABSTRACT {\n  validate() {\n    return true;\n  }\n  _stringify(value) {\n    return JSON.stringify(value);\n  }\n}\n\n/**\n * A binary storage JSON column. Only available in Postgres.\n */\nclass JSONB extends JSONTYPE {\n}\n\n/**\n * A default value of the current timestamp\n */\nclass NOW extends ABSTRACT {\n}\n\n/**\n * Binary storage\n */\nclass BLOB extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYBLOB';\n      case 'medium':\n        return 'MEDIUMBLOB';\n      case 'long':\n        return 'LONGBLOB';\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid blob', value));\n    }\n    return true;\n  }\n  _stringify(value) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      }\n      else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    const hex = value.toString('hex');\n    return this._hexify(hex);\n  }\n  _hexify(hex) {\n    return `X'${hex}'`;\n  }\n  _bindParam(value, options) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      }\n      else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    return options.bindParam(value);\n  }\n}\n\n\nBLOB.prototype.escape = false;\n\n/**\n * Range types are data types representing a range of values of some element type (called the range's subtype).\n * Only available in Postgres. See [the Postgres documentation](http://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details\n */\nclass RANGE extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} subtype A subtype for range, like RANGE(DATE)\n   */\n  constructor(subtype) {\n    super();\n    const options = _.isPlainObject(subtype) ? subtype : { subtype };\n    if (!options.subtype)\n      options.subtype = new INTEGER();\n    if (typeof options.subtype === 'function') {\n      options.subtype = new options.subtype();\n    }\n    this._subtype = options.subtype.key;\n    this.options = options;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid range', value));\n    }\n    if (value.length !== 2) {\n      throw new sequelizeErrors.ValidationError('A range must be an array with two elements');\n    }\n    return true;\n  }\n}\n\n/**\n * A column storing a unique universal identifier.\n * Use with `UUIDV1` or `UUIDV4` for default values.\n */\nclass UUID extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A default unique universal identifier generated following the UUID v1 standard\n */\nclass UUIDV1 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A default unique universal identifier generated following the UUID v4 standard\n */\nclass UUIDV4 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuidv4', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\n *\n * You could also use it to validate a value before permuting and storing it. VIRTUAL also takes a return type and dependency fields as arguments\n * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.\n * Return type is mostly useful for setups that rely on types like GraphQL.\n *\n * @example <caption>Checking password length before hashing it</caption>\n * sequelize.define('user', {\n *   password_hash: DataTypes.STRING,\n *   password: {\n *     type: DataTypes.VIRTUAL,\n *     set: function (val) {\n *        // Remember to set the data value, otherwise it won't be validated\n *        this.setDataValue('password', val);\n *        this.setDataValue('password_hash', this.salt + val);\n *      },\n *      validate: {\n *         isLongEnough: function (val) {\n *           if (val.length < 7) {\n *             throw new Error(\"Please choose a longer password\")\n *          }\n *       }\n *     }\n *   }\n * })\n *\n * # In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\n *\n * @example <caption>Virtual with dependency fields</caption>\n * {\n *   active: {\n *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n *     get: function() {\n *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\n *     }\n *   }\n * }\n *\n */\nclass VIRTUAL extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} [ReturnType] return type for virtual type\n   * @param {Array} [fields] array of fields this virtual type is dependent on\n   */\n  constructor(ReturnType, fields) {\n    super();\n    if (typeof ReturnType === 'function')\n      ReturnType = new ReturnType();\n    this.returnType = ReturnType;\n    this.fields = fields;\n  }\n}\n\n/**\n * An enumeration, Postgres Only\n *\n * @example\n * DataTypes.ENUM('value', 'another value')\n * DataTypes.ENUM(['value', 'another value'])\n * DataTypes.ENUM({\n *   values: ['value', 'another value']\n * })\n */\nclass ENUM extends ABSTRACT {\n  /**\n   * @param {...any|{ values: any[] }|any[]} args either array of values or options object with values array. It also supports variadic values\n   */\n  constructor(...args) {\n    super();\n    const value = args[0];\n    const options = typeof value === 'object' && !Array.isArray(value) && value || {\n      values: args.reduce((result, element) => {\n        return result.concat(Array.isArray(element) ? element : [element]);\n      }, [])\n    };\n    this.values = options.values;\n    this.options = options;\n  }\n  validate(value) {\n    if (!this.values.includes(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid choice in %j', value, this.values));\n    }\n    return true;\n  }\n}\n\n/**\n * An array of `type`. Only available in Postgres.\n *\n * @example\n * DataTypes.ARRAY(DataTypes.DECIMAL)\n */\nclass ARRAY extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} type type of array values\n   */\n  constructor(type) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type };\n    this.options = options;\n    this.type = typeof options.type === 'function' ? new options.type() : options.type;\n  }\n  toSql() {\n    return `${this.type.toSql()}[]`;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid array', value));\n    }\n    return true;\n  }\n  static is(obj, type) {\n    return obj instanceof ARRAY && obj.type instanceof type;\n  }\n}\n\n/**\n * A column storing Geometry information.\n * It is only available in PostgreSQL (with PostGIS), MariaDB or MySQL.\n *\n * GeoJSON is accepted as input and returned as output.\n *\n * In PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`.\n * In MySQL it is parsed using the function `ST_GeomFromText`.\n *\n * Therefore, one can just follow the [GeoJSON spec](https://tools.ietf.org/html/rfc7946) for handling geometry objects.  See the following examples:\n *\n * @example <caption>Defining a Geometry type attribute</caption>\n * DataTypes.GEOMETRY\n * DataTypes.GEOMETRY('POINT')\n * DataTypes.GEOMETRY('POINT', 4326)\n *\n * @example <caption>Create a new point</caption>\n * const point = { type: 'Point', coordinates: [-76.984722, 39.807222]}; // GeoJson format: [lng, lat]\n *\n * User.create({username: 'username', geometry: point });\n *\n * @example <caption>Create a new linestring</caption>\n * const line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n *\n * User.create({username: 'username', geometry: line });\n *\n * @example <caption>Create a new polygon</caption>\n * const polygon = { type: 'Polygon', coordinates: [\n *                 [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n *                   [100.0, 1.0], [100.0, 0.0] ]\n *                 ]};\n *\n * User.create({username: 'username', geometry: polygon });\n *\n * @example <caption>Create a new point with a custom SRID</caption>\n * const point = {\n *   type: 'Point',\n *   coordinates: [-76.984722, 39.807222], // GeoJson format: [lng, lat]\n *   crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n * };\n *\n * User.create({username: 'username', geometry: point })\n *\n *\n * @see {@link DataTypes.GEOGRAPHY}\n */\nclass GEOMETRY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geometry data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\n\nGEOMETRY.prototype.escape = false;\n\n/**\n * A geography datatype represents two dimensional spacial objects in an elliptic coord system.\n *\n * __The difference from geometry and geography type:__\n *\n * PostGIS 1.5 introduced a new spatial type called geography, which uses geodetic measurement instead of Cartesian measurement.\n * Coordinate points in the geography type are always represented in WGS 84 lon lat degrees (SRID 4326),\n * but measurement functions and relationships ST_Distance, ST_DWithin, ST_Length, and ST_Area always return answers in meters or assume inputs in meters.\n *\n * __What is best to use? It depends:__\n *\n * When choosing between the geometry and geography type for data storage, you should consider what you’ll be using it for.\n * If all you do are simple measurements and relationship checks on your data, and your data covers a fairly large area, then most likely you’ll be better off storing your data using the new geography type.\n * Although the new geography data type can cover the globe, the geometry type is far from obsolete.\n * The geometry type has a much richer set of functions than geography, relationship checks are generally faster, and it has wider support currently across desktop and web-mapping tools\n *\n * @example <caption>Defining a Geography type attribute</caption>\n * DataTypes.GEOGRAPHY\n * DataTypes.GEOGRAPHY('POINT')\n * DataTypes.GEOGRAPHY('POINT', 4326)\n */\nclass GEOGRAPHY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geography data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\n\n\nGEOGRAPHY.prototype.escape = false;\n\n/**\n * The cidr type holds an IPv4 or IPv6 network specification. Takes 7 or 19 bytes.\n *\n * Only available for Postgres\n */\nclass CIDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIPRange(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid CIDR', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The INET type holds an IPv4 or IPv6 host address, and optionally its subnet. Takes 7 or 19 bytes\n *\n * Only available for Postgres\n */\nclass INET extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIP(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid INET', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The MACADDR type stores MAC addresses. Takes 6 bytes\n *\n * Only available for Postgres\n *\n */\nclass MACADDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isMACAddress(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid MACADDR', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The TSVECTOR type stores text search vectors.\n *\n * Only available for Postgres\n *\n */\nclass TSVECTOR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A convenience class holding commonly used data types. The data types are used when defining a new model using `Sequelize.define`, like this:\n * ```js\n * sequelize.define('model', {\n *   column: DataTypes.INTEGER\n * })\n * ```\n * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean\n * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.\n *\n * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`\n *\n * Some data types have special properties that can be accessed in order to change the data type.\n * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.\n * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well.\n *\n * * All number types (`INTEGER`, `BIGINT`, `FLOAT`, `DOUBLE`, `REAL`, `DECIMAL`) expose the properties `UNSIGNED` and `ZEROFILL`\n * * The `CHAR` and `STRING` types expose the `BINARY` property\n *\n * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for\n * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: DataTypes.UUIDV1,\n *     primaryKey: true\n *   }\n * })\n * ```\n * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplished\n * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\n * from a function.\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: function() {\n *       return generateMyId()\n *     },\n *     primaryKey: true\n *   }\n * })\n * ```\n */\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  ENUM,\n  RANGE,\n  REAL,\n  'DOUBLE PRECISION': DOUBLE,\n  DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR,\n  CITEXT,\n  TSVECTOR\n};\n\n_.each(DataTypes, (dataType, name) => {\n  // guard for aliases\n  if (!Object.prototype.hasOwnProperty.call(dataType, 'key')) {\n    dataType.types = {};\n    dataType.key = dataType.prototype.key = name;\n  }\n});\n\nconst dialectMap = {};\ndialectMap.postgres = require('./dialects/postgres/data-types')(DataTypes);\ndialectMap.mysql = require('./dialects/mysql/data-types')(DataTypes);\ndialectMap.mariadb = require('./dialects/mariadb/data-types')(DataTypes);\ndialectMap.sqlite = require('./dialects/sqlite/data-types')(DataTypes);\ndialectMap.mssql = require('./dialects/mssql/data-types')(DataTypes);\ndialectMap.db2 = require('./dialects/db2/data-types')(DataTypes);\ndialectMap.snowflake = require('./dialects/snowflake/data-types')(DataTypes);\n\nconst dialectList = Object.values(dialectMap);\n\nfor (const dataTypes of dialectList) {\n  _.each(dataTypes, (DataType, key) => {\n    if (!DataType.key) {\n      DataType.key = DataType.prototype.key = key;\n    }\n  });\n}\n\n// Wrap all data types to not require `new`\nfor (const dataTypes of [DataTypes, ...dialectList]) {\n  _.each(dataTypes, (DataType, key) => {\n    dataTypes[key] = classToInvokable(DataType);\n  });\n}\n\nObject.assign(DataTypes, dialectMap);\n"]},"metadata":{},"sourceType":"script"}