{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst AbstractDialect = require(\"../abstract\");\n\nconst ConnectionManager = require(\"./connection-manager\");\n\nconst Query = require(\"./query\");\n\nconst QueryGenerator = require(\"./query-generator\");\n\nconst DataTypes = require(\"../../data-types\").mssql;\n\nconst {\n  MSSqlQueryInterface\n} = require(\"./query-interface\");\n\nclass MssqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MSSqlQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nMssqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  DEFAULT: true,\n  \"DEFAULT VALUES\": true,\n  \"LIMIT ON UPDATE\": true,\n  \"ORDER NULLS\": false,\n  lock: false,\n  transactions: true,\n  migrations: false,\n  returnValues: {\n    output: true\n  },\n  schemas: true,\n  autoIncrement: {\n    identityInsert: true,\n    defaultValue: false,\n    update: false\n  },\n  constraints: {\n    restrict: false,\n    default: true\n  },\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: true,\n    using: false,\n    where: true\n  },\n  NUMERIC: true,\n  tmpTableTrigger: true\n});\nMssqlDialect.prototype.defaultVersion = \"12.0.2000\";\nMssqlDialect.prototype.Query = Query;\nMssqlDialect.prototype.name = \"mssql\";\nMssqlDialect.prototype.TICK_CHAR = '\"';\nMssqlDialect.prototype.TICK_CHAR_LEFT = \"[\";\nMssqlDialect.prototype.TICK_CHAR_RIGHT = \"]\";\nMssqlDialect.prototype.DataTypes = DataTypes;\nmodule.exports = MssqlDialect;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\mssql\\index.js"],"names":[],"mappings":";;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;;AACA,MAAM,eAAA,GAAkB,OAAA,CAAQ,aAAR,CAAxB;;AACA,MAAM,iBAAA,GAAoB,OAAA,CAAQ,sBAAR,CAA1B;;AACA,MAAM,KAAA,GAAQ,OAAA,CAAQ,SAAR,CAAd;;AACA,MAAM,cAAA,GAAiB,OAAA,CAAQ,mBAAR,CAAvB;;AACA,MAAM,SAAA,GAAY,OAAA,CAAQ,kBAAR,CAAA,CAA4B,KAA9C;;AACA,MAAM;AAAE,EAAA;AAAF,IAA0B,OAAA,CAAQ,mBAAR,CAAhC;;AAEA,MAAA,YAAA,SAA2B,eAA3B,CAA2C;AACzC,EAAA,WAAA,CAAY,SAAZ,EAAuB;AACrB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,iBAAL,GAAyB,IAAI,iBAAJ,CAAsB,IAAtB,EAA4B,SAA5B,CAAzB;AACA,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB;AACvC,MAAA,QAAA,EAAU,IAD6B;AAEvC,MAAA;AAFuC,KAAnB,CAAtB;AAIA,SAAK,cAAL,GAAsB,IAAI,mBAAJ,CACpB,SADoB,EAEpB,KAAK,cAFe,CAAtB;AAEO;;AAXgC;;AAgB3C,YAAA,CAAa,SAAb,CAAuB,QAAvB,GAAkC,CAAA,CAAE,KAAF,CAChC,CAAA,CAAE,SAAF,CAAY,eAAA,CAAgB,SAAhB,CAA0B,QAAtC,CADgC,EAEhC;AACE,EAAA,OAAA,EAAS,IADX;AAEE,oBAAkB,IAFpB;AAGE,qBAAmB,IAHrB;AAIE,iBAAe,KAJjB;AAKE,EAAA,IAAA,EAAM,KALR;AAME,EAAA,YAAA,EAAc,IANhB;AAOE,EAAA,UAAA,EAAY,KAPd;AAQE,EAAA,YAAA,EAAc;AACZ,IAAA,MAAA,EAAQ;AADI,GARhB;AAWE,EAAA,OAAA,EAAS,IAXX;AAYE,EAAA,aAAA,EAAe;AACb,IAAA,cAAA,EAAgB,IADH;AAEb,IAAA,YAAA,EAAc,KAFD;AAGb,IAAA,MAAA,EAAQ;AAHK,GAZjB;AAiBE,EAAA,WAAA,EAAa;AACX,IAAA,QAAA,EAAU,KADC;AAEX,IAAA,OAAA,EAAS;AAFE,GAjBf;AAqBE,EAAA,KAAA,EAAO;AACL,IAAA,OAAA,EAAS,KADJ;AAEL,IAAA,MAAA,EAAQ,KAFH;AAGL,IAAA,MAAA,EAAQ,KAHH;AAIL,IAAA,IAAA,EAAM,IAJD;AAKL,IAAA,KAAA,EAAO,KALF;AAML,IAAA,KAAA,EAAO;AANF,GArBT;AA6BE,EAAA,OAAA,EAAS,IA7BX;AA8BE,EAAA,eAAA,EAAiB;AA9BnB,CAFgC,CAAlC;AAoCA,YAAA,CAAa,SAAb,CAAuB,cAAvB,GAAwC,WAAxC;AACA,YAAA,CAAa,SAAb,CAAuB,KAAvB,GAA+B,KAA/B;AACA,YAAA,CAAa,SAAb,CAAuB,IAAvB,GAA8B,OAA9B;AACA,YAAA,CAAa,SAAb,CAAuB,SAAvB,GAAmC,GAAnC;AACA,YAAA,CAAa,SAAb,CAAuB,cAAvB,GAAwC,GAAxC;AACA,YAAA,CAAa,SAAb,CAAuB,eAAvB,GAAyC,GAAzC;AACA,YAAA,CAAa,SAAb,CAAuB,SAAvB,GAAmC,SAAnC;AAEA,MAAA,CAAO,OAAP,GAAiB,YAAjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').mssql;\nconst { MSSqlQueryInterface } = require('./query-interface');\n\nclass MssqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MSSqlQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nMssqlDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    DEFAULT: true,\n    'DEFAULT VALUES': true,\n    'LIMIT ON UPDATE': true,\n    'ORDER NULLS': false,\n    lock: false,\n    transactions: true,\n    migrations: false,\n    returnValues: {\n      output: true\n    },\n    schemas: true,\n    autoIncrement: {\n      identityInsert: true,\n      defaultValue: false,\n      update: false\n    },\n    constraints: {\n      restrict: false,\n      default: true\n    },\n    index: {\n      collate: false,\n      length: false,\n      parser: false,\n      type: true,\n      using: false,\n      where: true\n    },\n    NUMERIC: true,\n    tmpTableTrigger: true\n  }\n);\n\nMssqlDialect.prototype.defaultVersion = '12.0.2000'; // SQL Server 2014 Express, minimum supported version\nMssqlDialect.prototype.Query = Query;\nMssqlDialect.prototype.name = 'mssql';\nMssqlDialect.prototype.TICK_CHAR = '\"';\nMssqlDialect.prototype.TICK_CHAR_LEFT = '[';\nMssqlDialect.prototype.TICK_CHAR_RIGHT = ']';\nMssqlDialect.prototype.DataTypes = DataTypes;\n\nmodule.exports = MssqlDialect;\n"]},"metadata":{},"sourceType":"script"}