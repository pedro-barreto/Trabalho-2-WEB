{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst _ = require(\"lodash\");\n\nconst Utils = require(\"../../utils\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nconst Op = require(\"../../operators\");\n\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\n\nclass MSSqlQueryInterface extends QueryInterface {\n  async removeColumn(tableName, attributeName, options) {\n    options = __spreadValues({\n      raw: true\n    }, options || {});\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n\n    if (results0.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n\n    if (results.length) {\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n    options = __spreadValues({}, options);\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n    const attributes = Object.keys(insertValues);\n\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n\n        wheres.push(where);\n      }\n    }\n\n    where = {\n      [Op.or]: wheres\n    };\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n}\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\mssql\\query-interface.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst QueryTypes = require('../../query-types');\nconst Op = require('../../operators');\nconst { QueryInterface } = require('../abstract/query-interface');\n\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\nclass MSSqlQueryInterface extends QueryInterface {\n  /**\n  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n  *\n  * @override\n  */\n  async removeColumn(tableName, attributeName, options) {\n    options = { raw: true, ...options || {} };\n\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n    if (results0.length) {\n      // No default constraint found -- we can cleanly remove the column\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n    if (results.length) {\n      // No foreign key constraints found, so we can remove the column\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n    //Check if the current column is a primaryKey\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n\n    options = { ...options };\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n\n    const attributes = Object.keys(insertValues);\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;\n"]},"metadata":{},"sourceType":"script"}