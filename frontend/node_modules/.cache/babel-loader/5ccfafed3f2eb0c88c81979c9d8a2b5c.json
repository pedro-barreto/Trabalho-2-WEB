{"ast":null,"code":"\"use strict\";\n\nconst momentTz = require(\"moment-timezone\");\n\nconst moment = require(\"moment\");\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = \"https://dev.snowflake.com/doc/refman/5.7/en/data-types.html\";\n  BaseTypes.DATE.types.snowflake = [\"DATETIME\"];\n  BaseTypes.STRING.types.snowflake = [\"VAR_STRING\"];\n  BaseTypes.CHAR.types.snowflake = [\"STRING\"];\n  BaseTypes.TEXT.types.snowflake = [\"BLOB\"];\n  BaseTypes.TINYINT.types.snowflake = [\"TINY\"];\n  BaseTypes.SMALLINT.types.snowflake = [\"SHORT\"];\n  BaseTypes.MEDIUMINT.types.snowflake = [\"INT24\"];\n  BaseTypes.INTEGER.types.snowflake = [\"LONG\"];\n  BaseTypes.BIGINT.types.snowflake = [\"LONGLONG\"];\n  BaseTypes.FLOAT.types.snowflake = [\"FLOAT\"];\n  BaseTypes.TIME.types.snowflake = [\"TIME\"];\n  BaseTypes.DATEONLY.types.snowflake = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.snowflake = [\"TINY\"];\n  BaseTypes.BLOB.types.snowflake = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.snowflake = [\"NEWDECIMAL\"];\n  BaseTypes.UUID.types.snowflake = false;\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.DOUBLE.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.snowflake = [\"GEOMETRY\"];\n  BaseTypes.JSON.types.snowflake = [\"JSON\"];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"TIMESTAMP\";\n    }\n\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n\n      if (this._length) {\n        return date.format(\"YYYY-MM-DD HH:mm:ss.SSS\");\n      }\n\n      return date.format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n\n    static parse(value, options) {\n      value = value.string();\n\n      if (value === null) {\n        return value;\n      }\n\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n\n      return value;\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"VARCHAR(36)\";\n    }\n\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return \"TEXT\";\n    }\n\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BOOLEAN\";\n    }\n\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === \"where\" && typeof value === \"string\" ? value : JSON.stringify(value);\n    }\n\n  }\n\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\snowflake\\data-types.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.snowflake.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.snowflake.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.snowflake = ['DATETIME'];\n  BaseTypes.STRING.types.snowflake = ['VAR_STRING'];\n  BaseTypes.CHAR.types.snowflake = ['STRING'];\n  BaseTypes.TEXT.types.snowflake = ['BLOB'];\n  BaseTypes.TINYINT.types.snowflake = ['TINY'];\n  BaseTypes.SMALLINT.types.snowflake = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.snowflake = ['INT24'];\n  BaseTypes.INTEGER.types.snowflake = ['LONG'];\n  BaseTypes.BIGINT.types.snowflake = ['LONGLONG'];\n  BaseTypes.FLOAT.types.snowflake = ['FLOAT'];\n  BaseTypes.TIME.types.snowflake = ['TIME'];\n  BaseTypes.DATEONLY.types.snowflake = ['DATE'];\n  BaseTypes.BOOLEAN.types.snowflake = ['TINY'];\n  BaseTypes.BLOB.types.snowflake = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.snowflake = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.snowflake = false;\n  // Enum is not supported\n  // https://docs.snowflake.com/en/sql-reference/data-types-unsupported.html\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.snowflake = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.snowflake = ['GEOMETRY'];\n  BaseTypes.JSON.types.snowflake = ['JSON'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP';\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      // https://community.snowflake.com/s/question/0D50Z00009LH2fl/what-is-the-best-way-to-store-uuids\n      return 'VARCHAR(36)';\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};\n"]},"metadata":{},"sourceType":"script"}