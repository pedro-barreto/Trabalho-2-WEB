{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst AbstractDialect = require(\"../abstract\");\n\nconst ConnectionManager = require(\"./connection-manager\");\n\nconst Query = require(\"./query\");\n\nconst QueryGenerator = require(\"./query-generator\");\n\nconst DataTypes = require(\"../../data-types\").sqlite;\n\nconst {\n  SQLiteQueryInterface\n} = require(\"./query-interface\");\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SQLiteQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  DEFAULT: false,\n  \"DEFAULT VALUES\": true,\n  \"UNION ALL\": false,\n  \"RIGHT JOIN\": false,\n  inserts: {\n    ignoreDuplicates: \" OR IGNORE\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n    conflictFields: true\n  },\n  index: {\n    using: false,\n    where: true,\n    functionBased: true\n  },\n  transactionOptions: {\n    type: true\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  groupedLimit: false,\n  JSON: true\n});\nSqliteDialect.prototype.defaultVersion = \"3.8.0\";\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = \"sqlite\";\nSqliteDialect.prototype.TICK_CHAR = \"`\";\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\sqlite\\index.js"],"names":[],"mappings":";;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;;AACA,MAAM,eAAA,GAAkB,OAAA,CAAQ,aAAR,CAAxB;;AACA,MAAM,iBAAA,GAAoB,OAAA,CAAQ,sBAAR,CAA1B;;AACA,MAAM,KAAA,GAAQ,OAAA,CAAQ,SAAR,CAAd;;AACA,MAAM,cAAA,GAAiB,OAAA,CAAQ,mBAAR,CAAvB;;AACA,MAAM,SAAA,GAAY,OAAA,CAAQ,kBAAR,CAAA,CAA4B,MAA9C;;AACA,MAAM;AAAE,EAAA;AAAF,IAA2B,OAAA,CAAQ,mBAAR,CAAjC;;AAEA,MAAA,aAAA,SAA4B,eAA5B,CAA4C;AAC1C,EAAA,WAAA,CAAY,SAAZ,EAAuB;AACrB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,iBAAL,GAAyB,IAAI,iBAAJ,CAAsB,IAAtB,EAA4B,SAA5B,CAAzB;AACA,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB;AACvC,MAAA,QAAA,EAAU,IAD6B;AAEvC,MAAA;AAFuC,KAAnB,CAAtB;AAKA,SAAK,cAAL,GAAsB,IAAI,oBAAJ,CACpB,SADoB,EAEpB,KAAK,cAFe,CAAtB;AAEO;;AAZiC;;AAiB5C,aAAA,CAAc,SAAd,CAAwB,QAAxB,GAAmC,CAAA,CAAE,KAAF,CACjC,CAAA,CAAE,SAAF,CAAY,eAAA,CAAgB,SAAhB,CAA0B,QAAtC,CADiC,EAEjC;AACE,EAAA,OAAA,EAAS,KADX;AAEE,oBAAkB,IAFpB;AAGE,eAAa,KAHf;AAIE,gBAAc,KAJhB;AAKE,EAAA,OAAA,EAAS;AACP,IAAA,gBAAA,EAAkB,YADX;AAEP,IAAA,iBAAA,EAAmB,4BAFZ;AAGP,IAAA,cAAA,EAAgB;AAHT,GALX;AAUE,EAAA,KAAA,EAAO;AACL,IAAA,KAAA,EAAO,KADF;AAEL,IAAA,KAAA,EAAO,IAFF;AAGL,IAAA,aAAA,EAAe;AAHV,GAVT;AAeE,EAAA,kBAAA,EAAoB;AAClB,IAAA,IAAA,EAAM;AADY,GAftB;AAkBE,EAAA,WAAA,EAAa;AACX,IAAA,aAAA,EAAe,KADJ;AAEX,IAAA,cAAA,EAAgB;AAFL,GAlBf;AAsBE,EAAA,YAAA,EAAc,KAtBhB;AAuBE,EAAA,IAAA,EAAM;AAvBR,CAFiC,CAAnC;AA6BA,aAAA,CAAc,SAAd,CAAwB,cAAxB,GAAyC,OAAzC;AACA,aAAA,CAAc,SAAd,CAAwB,KAAxB,GAAgC,KAAhC;AACA,aAAA,CAAc,SAAd,CAAwB,SAAxB,GAAoC,SAApC;AACA,aAAA,CAAc,SAAd,CAAwB,IAAxB,GAA+B,QAA/B;AACA,aAAA,CAAc,SAAd,CAAwB,SAAxB,GAAoC,GAApC;AACA,aAAA,CAAc,SAAd,CAAwB,cAAxB,GAAyC,aAAA,CAAc,SAAd,CAAwB,SAAjE;AACA,aAAA,CAAc,SAAd,CAAwB,eAAxB,GAA0C,aAAA,CAAc,SAAd,CAAwB,SAAlE;AAEA,MAAA,CAAO,OAAP,GAAiB,aAAjB;AACA,MAAA,CAAO,OAAP,CAAe,aAAf,GAA+B,aAA/B;AACA,MAAA,CAAO,OAAP,CAAe,OAAf,GAAyB,aAAzB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\nconst { SQLiteQueryInterface } = require('./query-interface');\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n\n    this.queryInterface = new SQLiteQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    DEFAULT: false,\n    'DEFAULT VALUES': true,\n    'UNION ALL': false,\n    'RIGHT JOIN': false,\n    inserts: {\n      ignoreDuplicates: ' OR IGNORE',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true\n    },\n    index: {\n      using: false,\n      where: true,\n      functionBased: true\n    },\n    transactionOptions: {\n      type: true\n    },\n    constraints: {\n      addConstraint: false,\n      dropConstraint: false\n    },\n    groupedLimit: false,\n    JSON: true\n  }\n);\n\nSqliteDialect.prototype.defaultVersion = '3.8.0'; // minimum supported version\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"]},"metadata":{},"sourceType":"script"}