{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  ValidationErrorItem: () => ValidationErrorItem,\n  ValidationErrorItemOrigin: () => ValidationErrorItemOrigin,\n  ValidationErrorItemType: () => ValidationErrorItemType,\n  default: () => validation_error_default\n});\n\nvar import_base_error = __toModule(require(\"./base-error\"));\n\nvar ValidationErrorItemType = /* @__PURE__ */(ValidationErrorItemType2 => {\n  ValidationErrorItemType2[\"notnull violation\"] = \"CORE\";\n  ValidationErrorItemType2[\"string violation\"] = \"CORE\";\n  ValidationErrorItemType2[\"unique violation\"] = \"DB\";\n  ValidationErrorItemType2[\"validation error\"] = \"FUNCTION\";\n  return ValidationErrorItemType2;\n})(ValidationErrorItemType || {});\n\nvar ValidationErrorItemOrigin = /* @__PURE__ */(ValidationErrorItemOrigin2 => {\n  ValidationErrorItemOrigin2[\"CORE\"] = \"CORE\";\n  ValidationErrorItemOrigin2[\"DB\"] = \"DB\";\n  ValidationErrorItemOrigin2[\"FUNCTION\"] = \"FUNCTION\";\n  return ValidationErrorItemOrigin2;\n})(ValidationErrorItemOrigin || {});\n\nclass ValidationErrorItem {\n  constructor(message, type, path, value, instance, validatorKey, fnName, fnArgs) {\n    __publicField(this, \"message\");\n\n    __publicField(this, \"type\");\n\n    __publicField(this, \"path\");\n\n    __publicField(this, \"value\");\n\n    __publicField(this, \"origin\");\n\n    __publicField(this, \"instance\");\n\n    __publicField(this, \"validatorKey\");\n\n    __publicField(this, \"validatorName\");\n\n    __publicField(this, \"validatorArgs\");\n\n    this.message = message || \"\";\n    this.type = null;\n    this.path = path || null;\n    this.value = value !== void 0 ? value : null;\n    this.origin = null;\n    this.instance = instance || null;\n    this.validatorKey = validatorKey || null;\n    this.validatorName = fnName || null;\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (this.isValidationErrorItemOrigin(type)) {\n        this.origin = type;\n      } else {\n        const lowercaseType = this.normalizeString(type);\n        const realType = ValidationErrorItemType[lowercaseType];\n\n        if (realType && ValidationErrorItemOrigin[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n  }\n\n  isValidationErrorItemOrigin(origin) {\n    return ValidationErrorItemOrigin[origin] !== void 0;\n  }\n\n  normalizeString(str) {\n    return str.toLowerCase().trim();\n  }\n\n  getValidatorKey(useTypeAsNS, NSSeparator) {\n    const useTANS = useTypeAsNS === void 0 || !!useTypeAsNS;\n    const NSSep = NSSeparator === void 0 ? \".\" : NSSeparator;\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItemOrigin[type];\n\n    if (useNS && (typeof NSSep !== \"string\" || !NSSep.length)) {\n      throw new Error(\"Invalid namespace separator given, must be a non-empty string\");\n    }\n\n    if (!(typeof key === \"string\" && key.length)) {\n      return \"\";\n    }\n\n    return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();\n  }\n\n}\n\n__publicField(ValidationErrorItem, \"TypeStringMap\", ValidationErrorItemType);\n\n__publicField(ValidationErrorItem, \"Origins\", ValidationErrorItemOrigin);\n\nclass ValidationError extends import_base_error.default {\n  constructor(message, errors) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(message);\n\n    __publicField(this, \"errors\");\n\n    this.name = \"SequelizeValidationError\";\n    this.message = \"Validation Error\";\n    this.errors = errors || [];\n\n    if (message) {\n      this.message = message;\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors.map(err => `${err.type || err.origin}: ${err.message}`).join(\",\\n\");\n    }\n\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n\n  get(path) {\n    return this.errors.reduce((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n\n      return reduced;\n    }, []);\n  }\n\n}\n\nvar validation_error_default = ValidationError;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\errors\\validation-error.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Model } from '../..';\nimport type { ErrorOptions } from './base-error';\nimport BaseError from './base-error';\n\n/**\n * An enum that is used internally by the `ValidationErrorItem` class\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\n * our new `origin` values.\n */\nexport enum ValidationErrorItemType {\n  'notnull violation' = 'CORE',\n  'string violation' = 'CORE',\n  'unique violation' = 'DB',\n  'validation error' = 'FUNCTION',\n}\n\n/**\n * An enum that defines valid ValidationErrorItem `origin` values\n */\nexport enum ValidationErrorItemOrigin {\n  /**\n   * specifies errors that originate from the sequelize \"core\"\n   */\n  CORE = 'CORE',\n\n  /**\n   * specifies validation errors that originate from the storage engine\n   */\n  DB = 'DB',\n\n  /**\n   * specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\n   */\n  FUNCTION = 'FUNCTION',\n}\n\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n */\nexport class ValidationErrorItem {\n  /**\n   * @deprecated Will be removed in v7\n   */\n  static TypeStringMap = ValidationErrorItemType;\n\n  /**\n   * @deprecated Will be removed in v7\n   */\n  static Origins = ValidationErrorItemOrigin;\n\n  /**\n   * An error message\n   */\n  readonly message: string;\n\n  /**\n   * The type/origin of the validation error\n   */\n  readonly type: keyof typeof ValidationErrorItemType | null;\n\n  /**\n   * The field that triggered the validation error\n   */\n  readonly path: string | null;\n\n  /**\n   * The value that generated the error\n   */\n  readonly value: string | null;\n\n  readonly origin: keyof typeof ValidationErrorItemOrigin | null;\n\n  /**\n   * The DAO instance that caused the validation error\n   */\n  readonly instance: Model | null;\n\n  /**\n   * A validation \"key\", used for identification\n   */\n  readonly validatorKey: string | null;\n\n  /**\n   * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   */\n  readonly validatorName: string | null;\n\n  /**\n   * Parameters used with the BUILT-IN validator function, if applicable\n   */\n  readonly validatorArgs: unknown[];\n\n  /**\n   * Creates a new ValidationError item. Instances of this class are included in the `ValidationError.errors` property.\n   *\n   * @param message An error message\n   * @param type The type/origin of the validation error\n   * @param path The field that triggered the validation error\n   * @param value The value that generated the error\n   * @param instance the DAO instance that caused the validation error\n   * @param validatorKey a validation \"key\", used for identification\n   * @param fnName property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   * @param fnArgs parameters used with the BUILT-IN validator function, if applicable\n   */\n  constructor(\n    message: string,\n    type:\n      | keyof typeof ValidationErrorItemType\n      | keyof typeof ValidationErrorItemOrigin,\n    path: string,\n    value: string,\n    instance: Model,\n    validatorKey: string,\n    fnName: string,\n    fnArgs: unknown[]\n  ) {\n    this.message = message || '';\n    this.type = null;\n    this.path = path || null;\n\n    this.value = value !== undefined ? value : null;\n\n    this.origin = null;\n\n    this.instance = instance || null;\n\n    this.validatorKey = validatorKey || null;\n\n    this.validatorName = fnName || null;\n\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (this.isValidationErrorItemOrigin(type)) {\n        this.origin = type;\n      } else {\n        const lowercaseType = this.normalizeString(type);\n        const realType = ValidationErrorItemType[lowercaseType];\n\n        if (realType && ValidationErrorItemOrigin[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n\n    // This doesn't need captureStackTrace because it's not a subclass of Error\n  }\n\n  private isValidationErrorItemOrigin(\n    origin:\n      | keyof typeof ValidationErrorItemOrigin\n      | keyof typeof ValidationErrorItemType\n  ): origin is keyof typeof ValidationErrorItemOrigin {\n    return (\n      ValidationErrorItemOrigin[\n        origin as keyof typeof ValidationErrorItemOrigin\n      ] !== undefined\n    );\n  }\n\n  private normalizeString<T extends string>(str: T): T {\n    return str.toLowerCase().trim() as T;\n  }\n\n  /**\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\n   *\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\n   *\n   * @param useTypeAsNS controls whether the returned value is \"namespace\",\n   *                    this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @param NSSeparator a separator string for concatenating the namespace, must be not be empty,\n   *                    defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\n   * @throws {Error}    thrown if NSSeparator is found to be invalid.\n   */\n  getValidatorKey(useTypeAsNS: boolean, NSSeparator: string): string {\n    const useTANS = useTypeAsNS === undefined || !!useTypeAsNS;\n    const NSSep = NSSeparator === undefined ? '.' : NSSeparator;\n\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItemOrigin[type];\n\n    if (useNS && (typeof NSSep !== 'string' || !NSSep.length)) {\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\n    }\n\n    if (!(typeof key === 'string' && key.length)) {\n      return '';\n    }\n\n    return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();\n  }\n}\n\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param message Error message\n * @param errors Array of ValidationErrorItem objects describing the validation errors\n */\nclass ValidationError extends BaseError {\n  /** Array of ValidationErrorItem objects describing the validation errors */\n  readonly errors: ValidationErrorItem[];\n\n  constructor(\n    message: string,\n    errors: ValidationErrorItem[],\n    options: ErrorOptions = {}\n  ) {\n    super(message);\n    this.name = 'SequelizeValidationError';\n    this.message = 'Validation Error';\n    this.errors = errors || [];\n\n    // Use provided error message if available...\n    if (message) {\n      this.message = message;\n\n      // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors\n        .map(\n          (err: ValidationErrorItem) =>\n            `${err.type || err.origin}: ${err.message}`\n        )\n        .join(',\\n');\n    }\n\n    // Allow overriding the stack if the original stacktrace is uninformative\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param {string} path The path to be checked for error items\n   *\n   * @returns {Array<ValidationErrorItem>} Validation error items for the specified path\n   */\n  get(path: string): ValidationErrorItem[] {\n    return this.errors.reduce<ValidationErrorItem[]>((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n      return reduced;\n    }, []);\n  }\n}\n\nexport default ValidationError;\n"]},"metadata":{},"sourceType":"script"}