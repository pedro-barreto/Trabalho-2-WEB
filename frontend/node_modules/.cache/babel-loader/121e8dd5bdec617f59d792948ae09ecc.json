{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst AbstractDialect = require(\"../abstract\");\n\nconst ConnectionManager = require(\"./connection-manager\");\n\nconst Query = require(\"./query\");\n\nconst QueryGenerator = require(\"./query-generator\");\n\nconst DataTypes = require(\"../../data-types\").mysql;\n\nconst {\n  MySQLQueryInterface\n} = require(\"./query-interface\");\n\nclass MysqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nMysqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"VALUES ()\": true,\n  \"LIMIT ON UPDATE\": true,\n  lock: true,\n  forShare: \"LOCK IN SHARE MODE\",\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: \" IGNORE\",\n    updateOnDuplicate: \" ON DUPLICATE KEY UPDATE\"\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  GEOMETRY: true,\n  JSON: true,\n  REGEXP: true\n});\nMysqlDialect.prototype.defaultVersion = \"5.7.0\";\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = \"mysql\";\nMysqlDialect.prototype.TICK_CHAR = \"`\";\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\nmodule.exports = MysqlDialect;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\mysql\\index.js"],"names":[],"mappings":";;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;;AACA,MAAM,eAAA,GAAkB,OAAA,CAAQ,aAAR,CAAxB;;AACA,MAAM,iBAAA,GAAoB,OAAA,CAAQ,sBAAR,CAA1B;;AACA,MAAM,KAAA,GAAQ,OAAA,CAAQ,SAAR,CAAd;;AACA,MAAM,cAAA,GAAiB,OAAA,CAAQ,mBAAR,CAAvB;;AACA,MAAM,SAAA,GAAY,OAAA,CAAQ,kBAAR,CAAA,CAA4B,KAA9C;;AACA,MAAM;AAAE,EAAA;AAAF,IAA0B,OAAA,CAAQ,mBAAR,CAAhC;;AAEA,MAAA,YAAA,SAA2B,eAA3B,CAA2C;AACzC,EAAA,WAAA,CAAY,SAAZ,EAAuB;AACrB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,iBAAL,GAAyB,IAAI,iBAAJ,CAAsB,IAAtB,EAA4B,SAA5B,CAAzB;AACA,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB;AACvC,MAAA,QAAA,EAAU,IAD6B;AAEvC,MAAA;AAFuC,KAAnB,CAAtB;AAIA,SAAK,cAAL,GAAsB,IAAI,mBAAJ,CACpB,SADoB,EAEpB,KAAK,cAFe,CAAtB;AAEO;;AAXgC;;AAgB3C,YAAA,CAAa,SAAb,CAAuB,QAAvB,GAAkC,CAAA,CAAE,KAAF,CAChC,CAAA,CAAE,SAAF,CAAY,eAAA,CAAgB,SAAhB,CAA0B,QAAtC,CADgC,EAEhC;AACE,eAAa,IADf;AAEE,qBAAmB,IAFrB;AAGE,EAAA,IAAA,EAAM,IAHR;AAIE,EAAA,QAAA,EAAU,oBAJZ;AAKE,EAAA,sCAAA,EAAwC,KAL1C;AAME,EAAA,OAAA,EAAS;AACP,IAAA,gBAAA,EAAkB,SADX;AAEP,IAAA,iBAAA,EAAmB;AAFZ,GANX;AAUE,EAAA,KAAA,EAAO;AACL,IAAA,OAAA,EAAS,KADJ;AAEL,IAAA,MAAA,EAAQ,IAFH;AAGL,IAAA,MAAA,EAAQ,IAHH;AAIL,IAAA,IAAA,EAAM,IAJD;AAKL,IAAA,KAAA,EAAO;AALF,GAVT;AAiBE,EAAA,WAAA,EAAa;AACX,IAAA,cAAA,EAAgB,KADL;AAEX,IAAA,KAAA,EAAO;AAFI,GAjBf;AAqBE,EAAA,aAAA,EAAe,IArBjB;AAsBE,EAAA,UAAA,EAAY,IAtBd;AAuBE,EAAA,OAAA,EAAS,IAvBX;AAwBE,EAAA,QAAA,EAAU,IAxBZ;AAyBE,EAAA,IAAA,EAAM,IAzBR;AA0BE,EAAA,MAAA,EAAQ;AA1BV,CAFgC,CAAlC;AAgCA,YAAA,CAAa,SAAb,CAAuB,cAAvB,GAAwC,OAAxC;AACA,YAAA,CAAa,SAAb,CAAuB,KAAvB,GAA+B,KAA/B;AACA,YAAA,CAAa,SAAb,CAAuB,cAAvB,GAAwC,cAAxC;AACA,YAAA,CAAa,SAAb,CAAuB,SAAvB,GAAmC,SAAnC;AACA,YAAA,CAAa,SAAb,CAAuB,IAAvB,GAA8B,OAA9B;AACA,YAAA,CAAa,SAAb,CAAuB,SAAvB,GAAmC,GAAnC;AACA,YAAA,CAAa,SAAb,CAAuB,cAAvB,GAAwC,YAAA,CAAa,SAAb,CAAuB,SAA/D;AACA,YAAA,CAAa,SAAb,CAAuB,eAAvB,GAAyC,YAAA,CAAa,SAAb,CAAuB,SAAhE;AAEA,MAAA,CAAO,OAAP,GAAiB,YAAjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').mysql;\nconst { MySQLQueryInterface } = require('./query-interface');\n\nclass MysqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nMysqlDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'VALUES ()': true,\n    'LIMIT ON UPDATE': true,\n    lock: true,\n    forShare: 'LOCK IN SHARE MODE',\n    settingIsolationLevelDuringTransaction: false,\n    inserts: {\n      ignoreDuplicates: ' IGNORE',\n      updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1\n    },\n    constraints: {\n      dropConstraint: false,\n      check: false\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    NUMERIC: true,\n    GEOMETRY: true,\n    JSON: true,\n    REGEXP: true\n  }\n);\n\nMysqlDialect.prototype.defaultVersion = '5.7.0'; // minimum supported version\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = 'mysql';\nMysqlDialect.prototype.TICK_CHAR = '`';\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\n\nmodule.exports = MysqlDialect;\n"]},"metadata":{},"sourceType":"script"}