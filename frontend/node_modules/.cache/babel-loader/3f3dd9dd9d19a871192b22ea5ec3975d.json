{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst AbstractDialect = require(\"../abstract\");\n\nconst ConnectionManager = require(\"./connection-manager\");\n\nconst Query = require(\"./query\");\n\nconst QueryGenerator = require(\"./query-generator\");\n\nconst DataTypes = require(\"../../data-types\").db2;\n\nconst {\n  Db2QueryInterface\n} = require(\"./query-interface\");\n\nclass Db2Dialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new Db2QueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nDb2Dialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"DEFAULT\": true,\n  \"DEFAULT VALUES\": false,\n  \"VALUES ()\": false,\n  \"LIMIT ON UPDATE\": false,\n  \"ORDER NULLS\": false,\n  lock: false,\n  transactions: true,\n  migrations: false,\n  returnValues: false,\n  schemas: true,\n  finalTable: true,\n  autoIncrement: {\n    identityInsert: false,\n    defaultValue: false,\n    update: true\n  },\n  constraints: {\n    restrict: true,\n    default: false\n  },\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false,\n    where: true\n  },\n  NUMERIC: true,\n  tmpTableTrigger: true\n});\nDb2Dialect.prototype.defaultVersion = \"1.0.0\";\nDb2Dialect.prototype.Query = Query;\nDb2Dialect.prototype.name = \"db2\";\nDb2Dialect.prototype.TICK_CHAR = '\"';\nDb2Dialect.prototype.TICK_CHAR_LEFT = '\"';\nDb2Dialect.prototype.TICK_CHAR_RIGHT = '\"';\nDb2Dialect.prototype.DataTypes = DataTypes;\nmodule.exports = Db2Dialect;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\db2\\index.js"],"names":[],"mappings":";;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;;AACA,MAAM,eAAA,GAAkB,OAAA,CAAQ,aAAR,CAAxB;;AACA,MAAM,iBAAA,GAAoB,OAAA,CAAQ,sBAAR,CAA1B;;AACA,MAAM,KAAA,GAAQ,OAAA,CAAQ,SAAR,CAAd;;AACA,MAAM,cAAA,GAAiB,OAAA,CAAQ,mBAAR,CAAvB;;AACA,MAAM,SAAA,GAAY,OAAA,CAAQ,kBAAR,CAAA,CAA4B,GAA9C;;AACA,MAAM;AAAE,EAAA;AAAF,IAAwB,OAAA,CAAQ,mBAAR,CAA9B;;AAEA,MAAA,UAAA,SAAyB,eAAzB,CAAyC;AACvC,EAAA,WAAA,CAAY,SAAZ,EAAuB;AACrB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,iBAAL,GAAyB,IAAI,iBAAJ,CAAsB,IAAtB,EAA4B,SAA5B,CAAzB;AACA,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB;AACvC,MAAA,QAAA,EAAU,IAD6B;AAEvC,MAAA;AAFuC,KAAnB,CAAtB;AAIA,SAAK,cAAL,GAAsB,IAAI,iBAAJ,CAAsB,SAAtB,EAAiC,KAAK,cAAtC,CAAtB;AAA4D;;AATvB;;AAazC,UAAA,CAAW,SAAX,CAAqB,QAArB,GAAgC,CAAA,CAAE,KAAF,CAAQ,CAAA,CAAE,SAAF,CAAY,eAAA,CAAgB,SAAhB,CAA0B,QAAtC,CAAR,EAAyD;AACvF,aAAW,IAD4E;AAEvF,oBAAkB,KAFqE;AAGvF,eAAa,KAH0E;AAIvF,qBAAmB,KAJoE;AAKvF,iBAAe,KALwE;AAMvF,EAAA,IAAA,EAAM,KANiF;AAOvF,EAAA,YAAA,EAAc,IAPyE;AAQvF,EAAA,UAAA,EAAY,KAR2E;AASvF,EAAA,YAAA,EAAc,KATyE;AAUvF,EAAA,OAAA,EAAS,IAV8E;AAWvF,EAAA,UAAA,EAAY,IAX2E;AAYvF,EAAA,aAAA,EAAe;AACb,IAAA,cAAA,EAAgB,KADH;AAEb,IAAA,YAAA,EAAc,KAFD;AAGb,IAAA,MAAA,EAAQ;AAHK,GAZwE;AAiBvF,EAAA,WAAA,EAAa;AACX,IAAA,QAAA,EAAU,IADC;AAEX,IAAA,OAAA,EAAS;AAFE,GAjB0E;AAqBvF,EAAA,KAAA,EAAO;AACL,IAAA,OAAA,EAAS,KADJ;AAEL,IAAA,MAAA,EAAQ,KAFH;AAGL,IAAA,MAAA,EAAQ,KAHH;AAIL,IAAA,IAAA,EAAM,KAJD;AAKL,IAAA,KAAA,EAAO,KALF;AAML,IAAA,KAAA,EAAO;AANF,GArBgF;AA6BvF,EAAA,OAAA,EAAS,IA7B8E;AA8BvF,EAAA,eAAA,EAAiB;AA9BsE,CAAzD,CAAhC;AAiCA,UAAA,CAAW,SAAX,CAAqB,cAArB,GAAsC,OAAtC;AACA,UAAA,CAAW,SAAX,CAAqB,KAArB,GAA6B,KAA7B;AACA,UAAA,CAAW,SAAX,CAAqB,IAArB,GAA4B,KAA5B;AACA,UAAA,CAAW,SAAX,CAAqB,SAArB,GAAiC,GAAjC;AACA,UAAA,CAAW,SAAX,CAAqB,cAArB,GAAsC,GAAtC;AACA,UAAA,CAAW,SAAX,CAAqB,eAArB,GAAuC,GAAvC;AACA,UAAA,CAAW,SAAX,CAAqB,SAArB,GAAiC,SAAjC;AAEA,MAAA,CAAO,OAAP,GAAiB,UAAjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').db2;\nconst { Db2QueryInterface } = require('./query-interface');\n\nclass Db2Dialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new Db2QueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nDb2Dialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': true,\n  'DEFAULT VALUES': false,\n  'VALUES ()': false,\n  'LIMIT ON UPDATE': false,\n  'ORDER NULLS': false,\n  lock: false,\n  transactions: true,\n  migrations: false,\n  returnValues: false,\n  schemas: true,\n  finalTable: true,\n  autoIncrement: {\n    identityInsert: false,\n    defaultValue: false,\n    update: true\n  },\n  constraints: {\n    restrict: true,\n    default: false\n  },\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false,\n    where: true\n  },\n  NUMERIC: true,\n  tmpTableTrigger: true\n});\n\nDb2Dialect.prototype.defaultVersion = '1.0.0'; // Db2 supported version comes here\nDb2Dialect.prototype.Query = Query;\nDb2Dialect.prototype.name = 'db2';\nDb2Dialect.prototype.TICK_CHAR = '\"';\nDb2Dialect.prototype.TICK_CHAR_LEFT = '\"';\nDb2Dialect.prototype.TICK_CHAR_RIGHT = '\"';\nDb2Dialect.prototype.DataTypes = DataTypes;\n\nmodule.exports = Db2Dialect;\n"]},"metadata":{},"sourceType":"script"}