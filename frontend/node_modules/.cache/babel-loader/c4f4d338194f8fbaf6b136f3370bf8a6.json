{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext(\"sql:mysql\");\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, __spreadValues({\n      showWarnings: false\n    }, options));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== void 0) {\n        bindParam.push(values_[key]);\n        return \"?\";\n      }\n\n      return void 0;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : void 0];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug(\"parameters(%j)\", parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection.execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection.query({\n            sql\n          }, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {}\n\n        options.transaction.finished = \"rollback\";\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n\n    return this.formatResults(results);\n  }\n\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (data.constructor.name === \"ResultSetHeader\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({\n              [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, \"ENUM\") : _result.Type.toUpperCase(),\n          allowNull: _result.Null === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run(\"SHOW WARNINGS\");\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || \"default\"}): `;\n    const messages = [];\n\n    for (const _warningRow of warningResults) {\n      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\") {\n        continue;\n      }\n\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n    return results;\n  }\n\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n          let fields = {};\n          let message = \"Validation error\";\n          const values = match ? match[1].split(\"-\") : void 0;\n          const fieldKey = match ? match[2].split(\".\").pop() : void 0;\n          const fieldVal = match ? match[1] : void 0;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n\n          const errors = [];\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : \"`\";\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? \"parent\" : \"child\",\n            table: match ? match[4] : void 0,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,\n            index: match ? match[2] : void 0,\n            parent: err,\n            stack: errStack\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || void 0,\n        order: item.Collation === \"A\" ? \"ASC\" : void 0\n      };\n      delete item.column_name;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.Key_name === \"PRIMARY\",\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,aAAA,GAAgB,OAAA,CAAQ,mBAAR,CAAtB;;AACA,MAAM,eAAA,GAAkB,OAAA,CAAQ,cAAR,CAAxB;;AACA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;;AACA,MAAM;AAAE,EAAA;AAAF,IAAa,OAAA,CAAQ,oBAAR,CAAnB;;AAEA,MAAM,YAAA,GAAe,IAArB;AACA,MAAM,WAAA,GAAc,IAApB;AACA,MAAM,oBAAA,GAAuB,IAA7B;AACA,MAAM,oBAAA,GAAuB,IAA7B;AAEA,MAAM,KAAA,GAAQ,MAAA,CAAO,YAAP,CAAoB,WAApB,CAAd;;AAEA,MAAA,KAAA,SAAoB,aAApB,CAAkC;AAChC,EAAA,WAAA,CAAY,UAAZ,EAAwB,SAAxB,EAAmC,OAAnC,EAA4C;AAC1C,UAAM,UAAN,EAAkB,SAAlB,EAA6B,cAAA,CAAA;AAAE,MAAA,YAAA,EAAc;AAAhB,KAAA,EAA0B,OAA1B,CAA7B;AAAuD;;AAGlD,SAAA,oBAAA,CAAqB,GAArB,EAA0B,MAA1B,EAAkC,OAAlC,EAA2C;AAChD,UAAM,SAAA,GAAY,EAAlB;;AACA,UAAM,eAAA,GAAkB,CAAC,KAAD,EAAQ,GAAR,EAAa,OAAb,KAAyB;AAC/C,UAAI,OAAA,CAAQ,GAAR,CAAA,KAAiB,KAAA,CAArB,EAAgC;AAC9B,QAAA,SAAA,CAAU,IAAV,CAAe,OAAA,CAAQ,GAAR,CAAf;AACA,eAAO,GAAP;AAAO;;AAET,aAAO,KAAA,CAAP;AAAO,KALT;;AAOA,IAAA,GAAA,GAAM,aAAA,CAAc,oBAAd,CAAmC,GAAnC,EAAwC,MAAxC,EAAgD,OAAhD,EAAyD,eAAzD,EAA0E,CAA1E,CAAN;AACA,WAAO,CAAC,GAAD,EAAM,SAAA,CAAU,MAAV,GAAmB,CAAnB,GAAuB,SAAvB,GAAmC,KAAA,CAAzC,CAAP;AAAgD;;AAG5C,QAAA,GAAA,CAAI,GAAJ,EAAS,UAAT,EAAqB;AACzB,SAAK,GAAL,GAAW,GAAX;AACA,UAAM;AAAE,MAAA,UAAF;AAAc,MAAA;AAAd,QAA0B,IAAhC;AAEA,UAAM,YAAA,GAAe,KAAK,SAAL,CAAe,OAAf,CAAuB,YAAvB,IAAuC,OAAA,CAAQ,YAApE;;AAEA,UAAM,QAAA,GAAW,KAAK,SAAL,CAAe,GAAf,EAAoB,KAApB,EAA2B,UAA3B,CAAjB;;AAEA,QAAI,UAAJ,EAAgB;AACd,MAAA,KAAA,CAAM,gBAAN,EAAwB,UAAxB,CAAA;AAAwB;;AAG1B,QAAI,OAAJ;AACA,UAAM,WAAA,GAAc,IAAI,KAAJ,EAApB;;AAEA,QAAI;AACF,UAAI,UAAA,IAAc,UAAA,CAAW,MAA7B,EAAqC;AACnC,QAAA,OAAA,GAAU,MAAM,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AAC/C,UAAA,UAAA,CACG,OADH,CACW,GADX,EACgB,UADhB,EAC4B,CAAC,KAAD,EAAQ,MAAR,KAAmB,KAAA,GAAQ,MAAA,CAAO,KAAP,CAAR,GAAwB,OAAA,CAAQ,MAAR,CADvE,EAEG,eAFH,CAEmB,GAFnB;AAEmB,SAHL,CAAhB;AAGqB,OAJvB,MAMO;AACL,QAAA,OAAA,GAAU,MAAM,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AAC/C,UAAA,UAAA,CACG,KADH,CACS;AAAE,YAAA;AAAF,WADT,EACkB,CAAC,KAAD,EAAQ,MAAR,KAAmB,KAAA,GAAQ,MAAA,CAAO,KAAP,CAAR,GAAwB,OAAA,CAAQ,MAAR,CAD7D,EAEG,eAFH,CAEmB,GAFnB;AAEmB,SAHL,CAAhB;AAGqB;AAAA,KAXzB,CAWyB,OAGhB,KAHgB,EAGvB;AACA,UAAI,OAAA,CAAQ,WAAR,IAAuB,KAAA,CAAM,KAAN,KAAgB,WAA3C,EAAwD;AAGtD,YAAI;AACF,gBAAM,OAAA,CAAQ,WAAR,CAAoB,QAApB,EAAN;AAA0B,SAD5B,CAC4B,OACnB,MADmB,EAC1B,CAAA;;AAKF,QAAA,OAAA,CAAQ,WAAR,CAAoB,QAApB,GAA+B,UAA/B;AAA+B;;AAGjC,MAAA,KAAA,CAAM,GAAN,GAAY,GAAZ;AACA,MAAA,KAAA,CAAM,UAAN,GAAmB,UAAnB;AACA,YAAM,KAAK,WAAL,CAAiB,KAAjB,EAAwB,WAAA,CAAY,KAApC,CAAN;AAA0C,KA9B5C,SA+BE;AACA,MAAA,QAAA;AAAA;;AAGF,QAAI,YAAA,IAAgB,OAAhB,IAA2B,OAAA,CAAQ,aAAR,GAAwB,CAAvD,EAA0D;AACxD,YAAM,KAAK,WAAL,CAAiB,OAAjB,CAAN;AAAuB;;AAEzB,WAAO,KAAK,aAAL,CAAmB,OAAnB,CAAP;AAA0B;;AAoB5B,EAAA,aAAA,CAAc,IAAd,EAAoB;AAClB,QAAI,MAAA,GAAS,KAAK,QAAlB;;AAEA,QAAI,KAAK,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B,WAAK,iBAAL,CAAuB,IAAvB;;AAEA,UAAI,CAAC,KAAK,QAAV,EAAoB;AAElB,YACE,IAAA,CAAK,WAAL,CAAiB,IAAjB,KAA0B,iBAA1B,IACG,KAAK,KADR,IAEG,KAAK,KAAL,CAAW,sBAFd,IAGG,KAAK,KAAL,CAAW,sBAAX,KAAsC,KAAK,KAAL,CAAW,mBAHpD,IAIG,KAAK,KAAL,CAAW,aAAX,CAAyB,KAAK,KAAL,CAAW,mBAApC,CALL,EAME;AACA,gBAAM,OAAA,GAAU,IAAA,CAAK,KAAK,gBAAL,EAAL,CAAhB;AACA,UAAA,MAAA,GAAS,EAAT;;AACA,eAAA,IAAS,CAAA,GAAI,OAAb,EAAsB,CAAA,GAAI,OAAA,GAAU,IAAA,CAAK,YAAzC,EAAuD,CAAA,EAAvD,EAA4D;AAC1D,YAAA,MAAA,CAAO,IAAP,CAAY;AAAA,eAAG,KAAK,KAAL,CAAW,aAAX,CAAyB,KAAK,KAAL,CAAW,mBAApC,EAAyD,KAA5D,GAAoE;AAApE,aAAZ;AAAgF;AAAA,SAVpF,MAYO;AACL,UAAA,MAAA,GAAS,IAAA,CAAK,KAAK,gBAAL,EAAL,CAAT;AAAmB;AAAA;AAAA;;AAKzB,QAAI,KAAK,aAAL,EAAJ,EAA0B;AACxB,aAAO,KAAK,iBAAL,CAAuB,IAAvB,CAAP;AAA8B;;AAEhC,QAAI,KAAK,iBAAL,EAAJ,EAA8B;AAC5B,aAAO,KAAK,qBAAL,CAA2B,IAA3B,CAAP;AAAkC;;AAEpC,QAAI,KAAK,eAAL,EAAJ,EAA4B;AAC1B,MAAA,MAAA,GAAS,EAAT;;AAEA,WAAA,MAAW,OAAX,IAAsB,IAAtB,EAA4B;AAC1B,cAAM,SAAA,GAAY,QAAlB;AACA,QAAA,MAAA,CAAO,OAAA,CAAQ,KAAf,CAAA,GAAwB;AACtB,UAAA,IAAA,EAAM,SAAA,CAAU,IAAV,CAAe,OAAA,CAAQ,IAAvB,IAA+B,OAAA,CAAQ,IAAR,CAAa,OAAb,CAAqB,SAArB,EAAgC,MAAhC,CAA/B,GAAyE,OAAA,CAAQ,IAAR,CAAa,WAAb,EADzD;AAEtB,UAAA,SAAA,EAAW,OAAA,CAAQ,IAAR,KAAiB,KAFN;AAGtB,UAAA,YAAA,EAAc,OAAA,CAAQ,OAHA;AAItB,UAAA,UAAA,EAAY,OAAA,CAAQ,GAAR,KAAgB,KAJN;AAKtB,UAAA,aAAA,EAAe,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,OAArC,EAA8C,OAA9C,KACV,OAAA,CAAQ,KAAR,CAAc,WAAd,OAAgC,gBANf;AAOtB,UAAA,OAAA,EAAS,OAAA,CAAQ,OAAR,GAAkB,OAAA,CAAQ,OAA1B,GAAoC;AAPvB,SAAxB;AAO+C;;AAGjD,aAAO,MAAP;AAAO;;AAET,QAAI,KAAK,kBAAL,EAAJ,EAA+B;AAC7B,aAAO,KAAK,sBAAL,CAA4B,IAA5B,CAAP;AAAmC;;AAErC,QAAI,KAAK,WAAL,EAAJ,EAAwB;AACtB,aAAO,IAAA,CAAK,CAAL,CAAP;AAAY;;AAEd,QAAI,KAAK,iBAAL,MAA4B,KAAK,iBAAL,EAAhC,EAA0D;AACxD,aAAO,IAAA,CAAK,YAAZ;AAAY;;AAEd,QAAI,KAAK,cAAL,EAAJ,EAA2B;AACzB,aAAO,IAAA,CAAK,CAAL,CAAA,CAAQ,OAAf;AAAe;;AAEjB,QAAI,KAAK,kBAAL,EAAJ,EAA+B;AAC7B,aAAO,IAAP;AAAO;;AAET,QAAI,KAAK,aAAL,EAAJ,EAA0B;AACxB,aAAO,CAAC,MAAD,EAAS,IAAA,CAAK,YAAL,KAAsB,CAA/B,CAAP;AAAsC;;AAExC,QAAI,KAAK,aAAL,MAAwB,KAAK,aAAL,EAA5B,EAAkD;AAChD,aAAO,CAAC,MAAD,EAAS,IAAA,CAAK,YAAd,CAAP;AAAqB;;AAEvB,QAAI,KAAK,sBAAL,EAAJ,EAAmC;AACjC,aAAO,IAAP;AAAO;;AAET,QAAI,KAAK,UAAL,EAAJ,EAAuB;AAErB,aAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AAAc;;AAGhB,WAAO,MAAP;AAAO;;AAGH,QAAA,WAAA,CAAY,OAAZ,EAAqB;AACzB,UAAM,cAAA,GAAiB,MAAM,KAAK,GAAL,CAAS,eAAT,CAA7B;AACA,UAAM,cAAA,GAAiB,mBAAmB,KAAK,UAAL,CAAgB,IAAhB,IAAwB,SAAA,KAAlE;AACA,UAAM,QAAA,GAAW,EAAjB;;AACA,SAAA,MAAW,WAAX,IAA0B,cAA1B,EAA0C;AACxC,UAAI,WAAA,KAAgB,KAAA,CAAhB,IAA6B,OAAO,WAAA,CAAY,MAAA,CAAO,QAAnB,CAAP,KAAwC,UAAzE,EAAqF;AACnF;AAAA;;AAEF,WAAA,MAAW,cAAX,IAA6B,WAA7B,EAA0C;AACxC,YAAI,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,cAArC,EAAqD,SAArD,CAAJ,EAAqE;AACnE,UAAA,QAAA,CAAS,IAAT,CAAc,cAAA,CAAe,OAA7B;AAA6B,SAD/B,MAEO;AACL,eAAA,MAAW,UAAX,IAAyB,cAAA,CAAe,IAAf,EAAzB,EAAgD;AAC9C,YAAA,QAAA,CAAS,IAAT,CAAc,CAAC,UAAD,EAAa,cAAA,CAAe,UAAf,CAAb,EAAyC,IAAzC,CAA8C,IAA9C,CAAd;AAA4D;AAAA;AAAA;AAAA;;AAMpE,SAAK,SAAL,CAAe,GAAf,CAAmB,cAAA,GAAiB,QAAA,CAAS,IAAT,CAAc,IAAd,CAApC,EAAyD,KAAK,OAA9D;AAEA,WAAO,OAAP;AAAO;;AAGT,EAAA,WAAA,CAAY,GAAZ,EAAiB,QAAjB,EAA2B;AACzB,UAAM,OAAA,GAAU,GAAA,CAAI,KAAJ,IAAa,GAAA,CAAI,IAAjC;;AAEA,YAAQ,OAAR;AAAQ,WACD,YADC;AACa;AACjB,gBAAM,KAAA,GAAQ,GAAA,CAAI,OAAJ,CAAY,KAAZ,CAAkB,qDAAlB,CAAd;AACA,cAAI,MAAA,GAAS,EAAb;AACA,cAAI,OAAA,GAAU,kBAAd;AACA,gBAAM,MAAA,GAAS,KAAA,GAAQ,KAAA,CAAM,CAAN,CAAA,CAAS,KAAT,CAAe,GAAf,CAAR,GAA8B,KAAA,CAA7C;AACA,gBAAM,QAAA,GAAW,KAAA,GAAQ,KAAA,CAAM,CAAN,CAAA,CAAS,KAAT,CAAe,GAAf,EAAoB,GAApB,EAAR,GAAoC,KAAA,CAArD;AACA,gBAAM,QAAA,GAAW,KAAA,GAAQ,KAAA,CAAM,CAAN,CAAR,GAAmB,KAAA,CAApC;AACA,gBAAM,SAAA,GAAY,KAAK,KAAL,IAAc,KAAK,KAAL,CAAW,UAAX,CAAsB,QAAtB,CAAhC;;AAEA,cAAI,SAAJ,EAAe;AACb,gBAAI,SAAA,CAAU,GAAd,EAAmB,OAAA,GAAU,SAAA,CAAU,GAApB;AACnB,YAAA,MAAA,GAAS,CAAA,CAAE,SAAF,CAAY,SAAA,CAAU,MAAtB,EAA8B,MAA9B,CAAT;AAAuC,WAFzC,MAGO;AACL,YAAA,MAAA,CAAO,QAAP,CAAA,GAAmB,QAAnB;AAAmB;;AAGrB,gBAAM,MAAA,GAAS,EAAf;;AACA,UAAA,CAAA,CAAE,MAAF,CAAS,MAAT,EAAiB,CAAC,KAAD,EAAQ,KAAR,KAAkB;AACjC,YAAA,MAAA,CAAO,IAAP,CAAY,IAAI,eAAA,CAAgB,mBAApB,CACV,KAAK,+BAAL,CAAqC,KAArC,CADU,EAEV,kBAFU,EAGV,KAHU,EAIV,KAJU,EAKV,KAAK,QALK,EAMV,YANU,CAAZ;AAME,WAPJ;;AAWA,iBAAO,IAAI,eAAA,CAAgB,qBAApB,CAA0C;AAAE,YAAA,OAAF;AAAW,YAAA,MAAX;AAAmB,YAAA,MAAA,EAAQ,GAA3B;AAAgC,YAAA,MAAhC;AAAwC,YAAA,KAAA,EAAO;AAA/C,WAA1C,CAAP;AAAgG;;AAAA,WAG7F,oBAH6F;AAG7F,WACA,oBADA;AACsB;AAEzB,gBAAM,KAAA,GAAQ,GAAA,CAAI,OAAJ,CAAY,KAAZ,CACZ,mFADY,CAAd;AAGA,gBAAM,SAAA,GAAY,KAAA,GAAQ,KAAA,CAAM,CAAN,CAAR,GAAmB,GAArC;AACA,gBAAM,MAAA,GAAS,KAAA,GAAQ,KAAA,CAAM,CAAN,CAAA,CAAS,KAAT,CAAe,IAAI,MAAJ,CAAW,GAAG,SAAA,MAAe,SAAA,EAA7B,CAAf,CAAR,GAAoE,KAAA,CAAnF;AAEA,iBAAO,IAAI,eAAA,CAAgB,yBAApB,CAA8C;AACnD,YAAA,OAAA,EAAS,MAAA,CAAO,OAAP,CAAA,KAAoB,MAAA,CAAO,oBAAP,CAApB,GAAmD,QAAnD,GAA8D,OADpB;AAEnD,YAAA,KAAA,EAAO,KAAA,GAAQ,KAAA,CAAM,CAAN,CAAR,GAAmB,KAAA,CAFyB;AAGnD,YAAA,MAHmD;AAInD,YAAA,KAAA,EAAO,MAAA,IAAU,MAAA,CAAO,MAAjB,IAA2B,KAAK,QAAhC,IAA4C,KAAK,QAAL,CAAc,MAAA,CAAO,CAAP,CAAd,CAA5C,IAAwE,KAAA,CAJ5B;AAKnD,YAAA,KAAA,EAAO,KAAA,GAAQ,KAAA,CAAM,CAAN,CAAR,GAAmB,KAAA,CALyB;AAMnD,YAAA,MAAA,EAAQ,GAN2C;AAOnD,YAAA,KAAA,EAAO;AAP4C,WAA9C,CAAP;AAOS;;AAAA;AAKT,eAAO,IAAI,eAAA,CAAgB,aAApB,CAAkC,GAAlC,EAAuC;AAAE,UAAA,KAAA,EAAO;AAAT,SAAvC,CAAP;AArDJ;AAqD2D;;AAI7D,EAAA,sBAAA,CAAuB,IAAvB,EAA6B;AAE3B,IAAA,IAAA,GAAO,IAAA,CAAK,MAAL,CAAY,CAAC,GAAD,EAAM,IAAN,KAAe;AAChC,UAAI,EAAE,IAAA,CAAK,QAAL,IAAiB,GAAnB,CAAJ,EAA6B;AAC3B,QAAA,GAAA,CAAI,IAAA,CAAK,QAAT,CAAA,GAAqB,IAArB;AACA,QAAA,IAAA,CAAK,MAAL,GAAc,EAAd;AAAc;;AAGhB,MAAA,GAAA,CAAI,IAAA,CAAK,QAAT,CAAA,CAAmB,MAAnB,CAA0B,IAAA,CAAK,YAAL,GAAoB,CAA9C,IAAmD;AACjD,QAAA,SAAA,EAAW,IAAA,CAAK,WADiC;AAEjD,QAAA,MAAA,EAAQ,IAAA,CAAK,QAAL,IAAiB,KAAA,CAFwB;AAGjD,QAAA,KAAA,EAAO,IAAA,CAAK,SAAL,KAAmB,GAAnB,GAAyB,KAAzB,GAAiC,KAAA;AAHS,OAAnD;AAKA,aAAO,IAAA,CAAK,WAAZ;AAEA,aAAO,GAAP;AAAO,KAbF,EAcJ,EAdI,CAAP;AAgBA,WAAO,CAAA,CAAE,GAAF,CAAM,IAAN,EAAY,IAAA,KAAS;AAC1B,MAAA,OAAA,EAAS,IAAA,CAAK,QAAL,KAAkB,SADD;AAE1B,MAAA,MAAA,EAAQ,IAAA,CAAK,MAFa;AAG1B,MAAA,IAAA,EAAM,IAAA,CAAK,QAHe;AAI1B,MAAA,SAAA,EAAW,IAAA,CAAK,KAJU;AAK1B,MAAA,MAAA,EAAQ,IAAA,CAAK,UAAL,KAAoB,CALF;AAM1B,MAAA,IAAA,EAAM,IAAA,CAAK;AANe,KAAT,CAAZ,CAAP;AAMa;;AAxRiB;;AA6RlC,MAAA,CAAO,OAAP,GAAiB,KAAjB;AACA,MAAA,CAAO,OAAP,CAAe,KAAf,GAAuB,KAAvB;AACA,MAAA,CAAO,OAAP,CAAe,OAAf,GAAyB,KAAzB","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mysql');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .query({ sql }, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MySQL automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2].split('.').pop() : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}