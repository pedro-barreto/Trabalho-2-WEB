{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst parserStore = require(\"../parserStore\")(\"mssql\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst debug = logger.debugContext(\"sql:mssql\");\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"id\";\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = {\n      type: TYPES.VarChar,\n      typeOptions: {}\n    };\n    paramType.type = TYPES.NVarChar;\n\n    if (typeof value === \"number\") {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        paramType.typeOptions = {\n          precision: 30,\n          scale: getScale(value)\n        };\n      }\n    } else if (typeof value === \"boolean\") {\n      paramType.type = TYPES.Bit;\n    }\n\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const {\n      options\n    } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      if (sql.startsWith(\"BEGIN TRANSACTION\")) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n\n      if (sql.startsWith(\"COMMIT TRANSACTION\")) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n\n      if (sql.startsWith(\"ROLLBACK TRANSACTION\")) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      if (sql.startsWith(\"SAVE TRANSACTION\")) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows2 = [];\n      const request = new connection.lib.Request(sql, (err, rowCount2) => err ? reject(err) : resolve([rows2, rowCount2]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on(\"row\", columns => {\n        rows2.push(columns);\n      });\n      connection.execSql(request);\n    });\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err, errStack);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n\n          row[column.metadata.colName] = value;\n        }\n\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() => this._run(this.connection, sql, parameters, errForStack.stack));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n\n    const replacementFunc = (match, key, values2) => {\n      if (values2[key] !== void 0) {\n        bindParam[key] = values2[key];\n        return `@${key}`;\n      }\n\n      return void 0;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam];\n  }\n\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      const result = {};\n\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === \"YES\" ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === \"PRIMARY KEY\",\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (result[_result.Name].type.includes(\"CHAR\") && _result.Length) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += \"(MAX)\";\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n\n      return result;\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isUpsertQuery()) {\n      if (data && data.length === 0) {\n        return [this.instance || data, false];\n      }\n\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === \"INSERT\"];\n    }\n\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    return data.slice(1).map(result => {\n      const constraint = {};\n\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n\n      return constraint;\n    });\n  }\n\n  formatError(err, errStack) {\n    let match;\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = \"Validation error\";\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      if (match[3]) {\n        const values = match[3].split(\",\").map(part => part.trim());\n\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : void 0;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : void 0;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, {\n      stack: errStack\n    });\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n  }\n\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(\",\").forEach(column => {\n        let columnName = column.trim();\n\n        if (columnName.includes(\"(-)\")) {\n          columnName = columnName.replace(\"(-)\", \"\");\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: void 0,\n          order: column.includes(\"(-)\") ? \"DESC\" : \"ASC\",\n          collate: void 0\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith(\"pk\"),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: void 0,\n      unique: item.index_description.toLowerCase().includes(\"unique\"),\n      type: void 0\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\mssql\\query.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.VarChar, typeOptions: {} };\n    paramType.type = TYPES.NVarChar;\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => err ? reject(err) : resolve([rows, rowCount]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n\n      connection.execSql(request);\n    });\n\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n\n      throw this.formatError(err, errStack);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() =>\n      this._run(this.connection, sql, parameters, errForStack.stack)\n    );\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      // if this was an upsert and no data came back, that means the record exists, but the update was a noop.\n      // return the current instance and mark it as an \"not an insert\".\n      if (data && data.length === 0) {\n        return [this.instance || data, false];\n      }\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === 'INSERT'];\n    }\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err, errStack) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}