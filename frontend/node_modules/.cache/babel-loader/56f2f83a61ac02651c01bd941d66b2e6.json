{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst debug = logger.debugContext(\"connection:pg\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst semver = require(\"semver\");\n\nconst dataTypes = require(\"../../data-types\");\n\nconst momentTz = require(\"moment-timezone\");\n\nconst {\n  promisify\n} = require(\"util\");\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule(\"pg\");\n\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n\n    this._clearTypeParser();\n\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser2 => {\n      return value => this.lib.types.arrayParser.create(value, parser2).parse();\n    };\n\n    const rangeParserBuilder = parser2 => {\n      return value => dataType.parse(value, {\n        parser: parser2\n      });\n    };\n\n    if (dataType.key.toLowerCase() === \"range\") {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (!entry.rangeOid) continue;\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (!entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n\n      return;\n    }\n\n    const parser = value => dataType.parse(value);\n\n    const arrayParser = arrayParserBuilder(parser);\n\n    if (dataType.key.toLowerCase() === \"enum\") {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n\n    dataType.types.postgres.forEach(name => {\n      if (!this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n      if (!this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = /* @__PURE__ */new Map();\n  }\n\n  getTypeParser(oid) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  async connect(config) {\n    config.user = config.username;\n\n    const connectionConfig = _.pick(config, [\"user\", \"password\", \"host\", \"database\", \"port\"]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig, _.pick(config.dialectOptions, [\"application_name\", \"ssl\", \"client_encoding\", \"binary\", \"keepAlive\", \"statement_timeout\", \"query_timeout\", \"idle_in_transaction_session_timeout\", \"options\"]));\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n      const connection2 = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case \"server_version\":\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version) ? version : this.dialect.defaultVersion;\n            }\n\n            break;\n\n          case \"standard_conforming_strings\":\n            connection2[\"standard_conforming_strings\"] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug(\"connection timeout\");\n\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error(\"Connection timed out\")));\n        }\n      };\n\n      connection2.once(\"end\", endHandler);\n\n      if (!this.sequelize.config.native) {\n        connection2.connection.on(\"parameterStatus\", parameterHandler);\n      }\n\n      connection2.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          connection2.connection.removeListener(\"parameterStatus\", parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case \"ECONNREFUSED\":\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n\n              case \"ENOTFOUND\":\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n\n              case \"EHOSTUNREACH\":\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n\n              case \"EINVAL\":\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug(\"connection acquired\");\n          connection2.removeListener(\"end\", endHandler);\n          resolve(connection2);\n        }\n      });\n    });\n    let query = \"\";\n\n    if (this.sequelize.options.standardConformingStrings !== false && connection[\"standard_conforming_strings\"] !== \"on\") {\n      query += \"SET standard_conforming_strings=on;\";\n    }\n\n    if (this.sequelize.options.clientMinMessages !== void 0) {\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\n    }\n\n    if (!(config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === \"ignore\" || this.sequelize.options.clientMinMessages === false)) {\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || \"warning\";\n      query += `SET client_min_messages TO ${clientMinMessages};`;\n    }\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\n\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n\n    if (Object.keys(this.nameOidMap).length === 0 && this.enumOids.oids.length === 0 && this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n\n    connection.on(\"error\", error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n    return connection;\n  }\n\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug(\"connection tried to disconnect but was already at ENDING state\");\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = \"8.3.0\";\n\n    if ((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n\n    const results = await (connection || this.sequelize).query(\"WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));\");\n    let result = Array.isArray(results) ? results.pop() : results;\n\n    if (Array.isArray(result)) {\n      if (result[0].command === \"SET\") {\n        result = result.pop();\n      }\n    }\n\n    const newNameOidMap = {};\n    const newEnumOids = {\n      oids: [],\n      arrayOids: []\n    };\n\n    for (const row of result.rows) {\n      if (row.typtype === \"e\") {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      }\n\n      newNameOidMap[row.typname] = {\n        oid: row.oid\n      };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    }\n\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = {\n      oids: [],\n      arrayOids: []\n    };\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\postgres\\connection-manager.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:pg');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst momentTz = require('moment-timezone');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, { parser });\n    };\n\n    // Set range parsers\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (! entry.rangeOid) continue;\n\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (! entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n\n    // Create parsers for normal or enum data types\n    const parser = value => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n\n    // Set enum parsers\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n\n    // Set parsers for normal data types\n    dataType.types.postgres.forEach(name => {\n      if (! this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n\n      if (! this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  async connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig,\n        _.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n          'application_name',\n          // choose the SSL mode with the PGSSLMODE environment variable\n          // object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n          'ssl',\n          // In addition to the values accepted by the corresponding server,\n          // you can use \"auto\" to determine the right encoding from the\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\n          'client_encoding',\n          // !! DO NOT SET THIS TO TRUE !!\n          // (unless you know what you're doing)\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n          'binary',\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n          'keepAlive',\n          // Times out queries after a set time in milliseconds in the database end. Added in pg v7.3\n          'statement_timeout',\n          // Times out queries after a set time in milliseconds in client end, query would be still running in database end.\n          'query_timeout',\n          // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n          'idle_in_transaction_session_timeout',\n          // Postgres allows additional session variables to be configured in the connection string in the `options` param.\n          // see [https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-OPTIONS]\n          'options'\n        ]));\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version)\n                ? version\n                : this.dialect.defaultVersion;\n            }\n            break;\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      };\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    });\n\n    let query = '';\n\n    if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n      // Disable escape characters in strings\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n      query += 'SET standard_conforming_strings=on;';\n    }\n\n    if (this.sequelize.options.clientMinMessages !== undefined) {\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\n    }\n\n    // Redshift dosen't support client_min_messages, use 'ignore' to skip this settings.\n    // If no option, the default value in sequelize is 'warning'\n    if ( !( config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === 'ignore' ||\n            this.sequelize.options.clientMinMessages === false ) ) {\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || 'warning';\n      query += `SET client_min_messages TO ${clientMinMessages};`;\n\n    }\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n    if (Object.keys(this.nameOidMap).length === 0 &&\n      this.enumOids.oids.length === 0 &&\n      this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n    // Don't let a Postgres restart (or error) to take down the whole app\n    connection.on('error', error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n\n    return connection;\n  }\n\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0';\n\n    // Check for supported version\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n\n    const results = await (connection || this.sequelize).query(\n      'WITH ranges AS (' +\n      '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +\n      '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' +\n      '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +\n      ')' +\n      'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +\n      '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' +\n      '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +\n      ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));'\n    );\n\n    let result = Array.isArray(results) ? results.pop() : results;\n\n    // When searchPath is prepended then two statements are executed and the result is\n    // an array of those two statements. First one is the SET search_path and second is\n    // the SELECT query result.\n    if (Array.isArray(result)) {\n      if (result[0].command === 'SET') {\n        result = result.pop();\n      }\n    }\n\n    const newNameOidMap = {};\n    const newEnumOids = { oids: [], arrayOids: [] };\n\n    for (const row of result.rows) {\n      // Mapping enums, handled separatedly\n      if (row.typtype === 'e') {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      }\n\n      // Mapping base types and their arrays\n      newNameOidMap[row.typname] = { oid: row.oid };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n\n      // Mapping ranges(of base types) and their arrays\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    }\n\n    // Replace all OID mappings. Avoids temporary empty OID mappings.\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = { oids: [], arrayOids: [] };\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}