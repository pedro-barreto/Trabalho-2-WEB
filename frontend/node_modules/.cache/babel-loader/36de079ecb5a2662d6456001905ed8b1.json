{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst MySQLQueryGenerator = require(\"../mysql/query-generator\");\n\nconst Utils = require(\"./../../utils\");\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = __spreadValues({\n      charset: null,\n      collate: null\n    }, options);\n    return Utils.joinSQLFragments([\"CREATE SCHEMA IF NOT EXISTS\", this.quoteIdentifier(schema), options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`, options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`, \";\"]);\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n\n  showSchemasQuery(options) {\n    const schemasToSkip = [\"'MYSQL'\", \"'INFORMATION_SCHEMA'\", \"'PERFORMANCE_SCHEMA'\"];\n\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n\n    return Utils.joinSQLFragments([\"SELECT SCHEMA_NAME as schema_name\", \"FROM INFORMATION_SCHEMA.SCHEMATA\", `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(\", \")})`, \";\"]);\n  }\n\n  showTablesQuery(database) {\n    let query = \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\";\n\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += \" AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA')\";\n    }\n\n    return `${query};`;\n  }\n\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n  }\n\n}\n\nmodule.exports = MariaDBQueryGenerator;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\mariadb\\query-generator.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,mBAAA,GAAsB,OAAA,CAAQ,0BAAR,CAA5B;;AACA,MAAM,KAAA,GAAQ,OAAA,CAAQ,eAAR,CAAd;;AAEA,MAAA,qBAAA,SAAoC,mBAApC,CAAwD;AACtD,EAAA,YAAA,CAAa,MAAb,EAAqB,OAArB,EAA8B;AAC5B,IAAA,OAAA,GAAU,cAAA,CAAA;AACR,MAAA,OAAA,EAAS,IADD;AAER,MAAA,OAAA,EAAS;AAFD,KAAA,EAGL,OAHK,CAAV;AAMA,WAAO,KAAA,CAAM,gBAAN,CAAuB,CAC5B,6BAD4B,EAE5B,KAAK,eAAL,CAAqB,MAArB,CAF4B,EAG5B,OAAA,CAAQ,OAAR,IAAmB,yBAAyB,KAAK,MAAL,CAAY,OAAA,CAAQ,OAApB,CAAoB,EAHpC,EAI5B,OAAA,CAAQ,OAAR,IAAmB,mBAAmB,KAAK,MAAL,CAAY,OAAA,CAAQ,OAApB,CAAoB,EAJ9B,EAK5B,GAL4B,CAAvB,CAAP;AAKE;;AAIJ,EAAA,UAAA,CAAW,MAAX,EAAmB;AACjB,WAAO,yBAAyB,KAAK,eAAL,CAAqB,MAArB,CAAqB,GAArD;AAAqD;;AAGvD,EAAA,gBAAA,CAAiB,OAAjB,EAA0B;AACxB,UAAM,aAAA,GAAgB,CACpB,SADoB,EAEpB,sBAFoB,EAGpB,sBAHoB,CAAtB;;AAKA,QAAI,OAAA,CAAQ,IAAR,IAAgB,KAAA,CAAM,OAAN,CAAc,OAAA,CAAQ,IAAtB,CAAhB,IAA+C,OAAA,CAAQ,IAAR,CAAa,MAAb,GAAsB,CAAzE,EAA4E;AAC1E,WAAA,MAAW,UAAX,IAAyB,OAAA,CAAQ,IAAjC,EAAuC;AACrC,QAAA,aAAA,CAAc,IAAd,CAAmB,KAAK,MAAL,CAAY,UAAZ,CAAnB;AAA+B;AAAA;;AAGnC,WAAO,KAAA,CAAM,gBAAN,CAAuB,CAC5B,mCAD4B,EAE5B,kCAF4B,EAG5B,6BAA6B,aAAA,CAAc,IAAd,CAAmB,IAAnB,CAAmB,GAHpB,EAI5B,GAJ4B,CAAvB,CAAP;AAIE;;AAIJ,EAAA,eAAA,CAAgB,QAAhB,EAA0B;AACxB,QAAI,KAAA,GAAQ,gGAAZ;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,KAAA,IAAS,uBAAuB,KAAK,MAAL,CAAY,QAAZ,CAAY,EAA5C;AAA4C,KAD9C,MAEO;AACL,MAAA,KAAA,IAAS,gFAAT;AAAS;;AAEX,WAAO,GAAG,KAAA,GAAV;AAAU;;AAWZ,EAAA,eAAA,CAAgB,UAAhB,EAA4B,KAA5B,EAAmC;AACjC,WAAO,KAAA,CAAM,QAAN,CAAe,KAAA,CAAM,WAAN,CAAkB,UAAlB,EAA8B,GAA9B,CAAf,EAAmD,GAAnD,CAAP;AAA0D;;AA3DN;;AA+DxD,MAAA,CAAO,OAAP,GAAiB,qBAAjB","sourcesContent":["'use strict';\n\nconst MySQLQueryGenerator = require('../mysql/query-generator');\nconst Utils = require('./../../utils');\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE SCHEMA IF NOT EXISTS',\n      this.quoteIdentifier(schema),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n\n  showSchemasQuery(options) {\n    const schemasToSkip = [\n      '\\'MYSQL\\'',\n      '\\'INFORMATION_SCHEMA\\'',\n      '\\'PERFORMANCE_SCHEMA\\''\n    ];\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n    return Utils.joinSQLFragments([\n      'SELECT SCHEMA_NAME as schema_name',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(', ')})`,\n      ';'\n    ]);\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\')';\n    }\n    return `${query};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n}\n\nmodule.exports = MariaDBQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}