{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nclass Transaction {\n  constructor(sequelize, options) {\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = [];\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n    this.options = __spreadValues({\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false\n    }, options);\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n\n  async commit() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n\n    try {\n      return await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n    } finally {\n      this.finished = \"commit\";\n      this.cleanup();\n\n      for (const hook of this._afterCommitHooks) {\n        await hook.apply(this, [this]);\n      }\n    }\n  }\n\n  async rollback() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n\n    if (!this.connection) {\n      throw new Error(\"Transaction cannot be rolled back because it never started\");\n    }\n\n    try {\n      return await this.sequelize.getQueryInterface().rollbackTransaction(this, this.options);\n    } finally {\n      this.cleanup();\n    }\n  }\n\n  async prepareEnvironment(useCLS) {\n    let connectionPromise;\n\n    if (useCLS === void 0) {\n      useCLS = true;\n    }\n\n    if (this.parent) {\n      connectionPromise = Promise.resolve(this.parent.connection);\n    } else {\n      const acquireOptions = {\n        uuid: this.id\n      };\n\n      if (this.options.readOnly) {\n        acquireOptions.type = \"SELECT\";\n      }\n\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n    }\n\n    let result;\n    const connection = await connectionPromise;\n    this.connection = connection;\n    this.connection.uuid = this.id;\n\n    try {\n      await this.begin();\n      result = await this.setDeferrable();\n    } catch (setupErr) {\n      try {\n        result = await this.rollback();\n      } finally {\n        throw setupErr;\n      }\n    }\n\n    if (useCLS && this.sequelize.constructor._cls) {\n      this.sequelize.constructor._cls.set(\"transaction\", this);\n    }\n\n    return result;\n  }\n\n  async setDeferrable() {\n    if (this.options.deferrable) {\n      return await this.sequelize.getQueryInterface().deferConstraints(this, this.options);\n    }\n  }\n\n  async begin() {\n    const queryInterface = this.sequelize.getQueryInterface();\n\n    if (this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction) {\n      await queryInterface.startTransaction(this, this.options);\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    return queryInterface.startTransaction(this, this.options);\n  }\n\n  cleanup() {\n    if (this.parent || this.connection.uuid === void 0) return;\n\n    this._clearCls();\n\n    const res = this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = void 0;\n    return res;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.constructor._cls;\n\n    if (cls) {\n      if (cls.get(\"transaction\") === this) {\n        cls.set(\"transaction\", null);\n      }\n    }\n  }\n\n  afterCommit(fn) {\n    if (!fn || typeof fn !== \"function\") {\n      throw new Error('\"fn\" must be a function');\n    }\n\n    this._afterCommitHooks.push(fn);\n  }\n\n  static get TYPES() {\n    return {\n      DEFERRED: \"DEFERRED\",\n      IMMEDIATE: \"IMMEDIATE\",\n      EXCLUSIVE: \"EXCLUSIVE\"\n    };\n  }\n\n  static get ISOLATION_LEVELS() {\n    return {\n      READ_UNCOMMITTED: \"READ UNCOMMITTED\",\n      READ_COMMITTED: \"READ COMMITTED\",\n      REPEATABLE_READ: \"REPEATABLE READ\",\n      SERIALIZABLE: \"SERIALIZABLE\"\n    };\n  }\n\n  static get LOCK() {\n    return {\n      UPDATE: \"UPDATE\",\n      SHARE: \"SHARE\",\n      KEY_SHARE: \"KEY SHARE\",\n      NO_KEY_UPDATE: \"NO KEY UPDATE\"\n    };\n  }\n\n  get LOCK() {\n    return Transaction.LOCK;\n  }\n\n}\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\transaction.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {@link Sequelize.transaction}\n */\nclass Transaction {\n  /**\n   * Creates a new transaction instance\n   *\n   * @param {Sequelize} sequelize A configured sequelize Instance\n   * @param {object} options An object with options\n   * @param {string} [options.type] Sets the type of the transaction. Sqlite only\n   * @param {string} [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param {string} [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   */\n  constructor(sequelize, options) {\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = [];\n\n    // get dialect specific transaction options\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n\n    this.options = {\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false,\n      ...options\n    };\n\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n\n  /**\n   * Commit the transaction\n   *\n   * @returns {Promise}\n   */\n  async commit() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n\n    try {\n      return await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n    } finally {\n      this.finished = 'commit';\n      this.cleanup();\n      for (const hook of this._afterCommitHooks) {\n        await hook.apply(this, [this]);\n      }\n    }\n  }\n\n  /**\n   * Rollback (abort) the transaction\n   *\n   * @returns {Promise}\n   */\n  async rollback() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n\n    if (!this.connection) {\n      throw new Error('Transaction cannot be rolled back because it never started');\n    }\n\n    try {\n      return await this\n        .sequelize\n        .getQueryInterface()\n        .rollbackTransaction(this, this.options);\n    } finally {\n      this.cleanup();\n    }\n  }\n\n  /**\n   * Called to acquire a connection to use and set the correct options on the connection.\n   * We should ensure all of the environment that's set up is cleaned up in `cleanup()` below.\n   *\n   * @param {boolean} useCLS Defaults to true: Use CLS (Continuation Local Storage) with Sequelize. With CLS, all queries within the transaction callback will automatically receive the transaction object.\n   * @returns {Promise}\n   */\n  async prepareEnvironment(useCLS) {\n    let connectionPromise;\n\n    if (useCLS === undefined) {\n      useCLS = true;\n    }\n\n    if (this.parent) {\n      connectionPromise = Promise.resolve(this.parent.connection);\n    } else {\n      const acquireOptions = { uuid: this.id };\n      if (this.options.readOnly) {\n        acquireOptions.type = 'SELECT';\n      }\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n    }\n\n    let result;\n    const connection = await connectionPromise;\n    this.connection = connection;\n    this.connection.uuid = this.id;\n\n    try {\n      await this.begin();\n      result = await this.setDeferrable();\n    } catch (setupErr) {\n      try {\n        result = await this.rollback();\n      } finally {\n        throw setupErr; // eslint-disable-line no-unsafe-finally\n      }\n    }\n\n    if (useCLS && this.sequelize.constructor._cls) {\n      this.sequelize.constructor._cls.set('transaction', this);\n    }\n\n    return result;\n  }\n\n  async setDeferrable() {\n    if (this.options.deferrable) {\n      return await this\n        .sequelize\n        .getQueryInterface()\n        .deferConstraints(this, this.options);\n    }\n  }\n\n  async begin() {\n    const queryInterface = this.sequelize.getQueryInterface();\n\n    if ( this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction ) {\n      await queryInterface.startTransaction(this, this.options);\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n\n    return queryInterface.startTransaction(this, this.options);\n  }\n\n  cleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection.uuid === undefined) return;\n\n    this._clearCls();\n    const res = this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = undefined;\n    return res;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.constructor._cls;\n\n    if (cls) {\n      if (cls.get('transaction') === this) {\n        cls.set('transaction', null);\n      }\n    }\n  }\n\n  /**\n   * A hook that is run after a transaction is committed\n   *\n   * @param {Function} fn   A callback function that is called with the committed transaction\n   * @name afterCommit\n   * @memberof Sequelize.Transaction\n   */\n  afterCommit(fn) {\n    if (!fn || typeof fn !== 'function') {\n      throw new Error('\"fn\" must be a function');\n    }\n    this._afterCommitHooks.push(fn);\n  }\n\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n   *      // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   */\n  static get TYPES() {\n    return {\n      DEFERRED: 'DEFERRED',\n      IMMEDIATE: 'IMMEDIATE',\n      EXCLUSIVE: 'EXCLUSIVE'\n    };\n  }\n\n  /**\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n   *     // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   */\n  static get ISOLATION_LEVELS() {\n    return {\n      READ_UNCOMMITTED: 'READ UNCOMMITTED',\n      READ_COMMITTED: 'READ COMMITTED',\n      REPEATABLE_READ: 'REPEATABLE READ',\n      SERIALIZABLE: 'SERIALIZABLE'\n    };\n  }\n\n\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * @example\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   *\n   * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   *\n   * # UserModel will be locked but TaskModel won't!\n   *\n   * @example <caption>You can also skip locked rows:</caption>\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: true,\n   *   skipLocked: true\n   * });\n   * # The query will now return any rows that aren't locked by another transaction\n   *\n   * @returns {object}\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   */\n  static get LOCK() {\n    return {\n      UPDATE: 'UPDATE',\n      SHARE: 'SHARE',\n      KEY_SHARE: 'KEY SHARE',\n      NO_KEY_UPDATE: 'NO KEY UPDATE'\n    };\n  }\n\n  /**\n   * Please see {@link Transaction.LOCK}\n   */\n  get LOCK() {\n    return Transaction.LOCK;\n  }\n}\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;\n"]},"metadata":{},"sourceType":"script"}