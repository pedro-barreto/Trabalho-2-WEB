{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst _ = require(\"lodash\");\n\nconst SqlString = require(\"../../sql-string\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nconst Dot = require(\"dottie\");\n\nconst deprecations = require(\"../../utils/deprecations\");\n\nconst uuid = require(\"uuid\").v4;\n\nconst {\n  safeStringifyJson\n} = require(\"../../utils.js\");\n\nclass AbstractQuery {\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = __spreadValues({\n      plain: false,\n      raw: false,\n      logging: console.log\n    }, options);\n    this.checkLoggingOption();\n\n    if (options.rawErrors) {\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n\n    if (typeof replacementFunc !== \"function\") {\n      options = replacementFunc || {};\n      replacementFunc = void 0;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values2) => {\n          if (values2[key] !== void 0) {\n            return match;\n          }\n\n          return void 0;\n        };\n      } else {\n        replacementFunc = (match, key, values2, timeZone2, dialect2) => {\n          if (values2[key] !== void 0) {\n            return SqlString.escape(values2[key], timeZone2, dialect2);\n          }\n\n          return void 0;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n\n      replacementFunc = (match, key, values2, timeZone2, dialect2, options2) => {\n        if (origReplacementFunc(match, key, values2, timeZone2, dialect2, options2) !== void 0) {\n          return match;\n        }\n\n        return void 0;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if (key === \"$\") {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n\n      if (replVal === void 0) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  formatError(error, errStack) {\n    error.stack = errStack;\n    return error;\n  }\n\n  run() {\n    throw new Error(\"The run method wasn't overwritten!\");\n  }\n\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      this.options.logging = console.log;\n    }\n  }\n\n  getInsertIdField() {\n    return \"insertId\";\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : \"Must be unique\";\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, \"\"))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    result = result && this.sql.toLowerCase().startsWith(\"insert into\");\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result2 => _.reduce(fieldMap, (result3, name, field) => {\n        if (result3[field] !== void 0 && name !== field) {\n          result3[name] = result3[field];\n          delete result3[field];\n        }\n\n        return result3;\n      }, result2));\n    }\n\n    if (this.options.raw) {\n      result = results.map(result2 => {\n        let o = {};\n\n        for (const key in result2) {\n          if (Object.prototype.hasOwnProperty.call(result2, key)) {\n            o[key] = result2[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"show\");\n    result = result || this.sql.toLowerCase().startsWith(\"describe\");\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith(\"call\");\n  }\n\n  _logQuery(sql, debugContext, parameters) {\n    const {\n      connection,\n      options\n    } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = \"\";\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(\";\") ? \"\" : \";\";\n      let paramStr;\n\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p => safeStringifyJson(p)).join(\", \");\n      } else {\n        paramStr = safeStringifyJson(parameters);\n      }\n\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n\n    const fmt = `(${connection.uuid || \"default\"}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  static _groupJoinData(rows, includeOptions, options) {\n    if (!rows.length) {\n      return [];\n    }\n\n    let i;\n    let length;\n    let $i;\n    let $length;\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString;\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    let previousPiece;\n\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n\n        includeMap[previousPiece] = $current;\n      }\n    };\n\n    const keyPrefixStringMemo = {};\n\n    const keyPrefixString = (key2, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key2)) {\n        memo[key2] = key2.substr(0, key2.lastIndexOf(\".\"));\n      }\n\n      return memo[key2];\n    };\n\n    const removeKeyPrefixMemo = {};\n\n    const removeKeyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key2)) {\n        const index = key2.lastIndexOf(\".\");\n        removeKeyPrefixMemo[key2] = key2.substr(index === -1 ? 0 : index + 1);\n      }\n\n      return removeKeyPrefixMemo[key2];\n    };\n\n    const keyPrefixMemo = {};\n\n    const keyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key2)) {\n        const prefixString = keyPrefixString(key2, keyPrefixStringMemo);\n\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split(\".\") : [];\n        }\n\n        keyPrefixMemo[key2] = keyPrefixMemo[prefixString];\n      }\n\n      return keyPrefixMemo[key2];\n    };\n\n    const lastKeyPrefixMemo = {};\n\n    const lastKeyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key2)) {\n        const prefix2 = keyPrefix(key2);\n        const length2 = prefix2.length;\n        lastKeyPrefixMemo[key2] = !length2 ? \"\" : prefix2[length2 - 1];\n      }\n\n      return lastKeyPrefixMemo[key2];\n    };\n\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes2 = _.chain(model.uniqueKeys);\n\n      uniqueKeyAttributes2 = uniqueKeyAttributes2.result(`${uniqueKeyAttributes2.findKey()}.fields`).map(field => _.findKey(model.attributes, chr => chr.field === field)).value();\n      return uniqueKeyAttributes2;\n    };\n\n    const stringify = obj => obj instanceof Buffer ? obj.toString(\"hex\") : obj;\n\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = \"\";\n\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        } else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = void 0;\n\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[\"\"] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = void 0;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n\n        if ($prevKeyPrefix !== void 0 && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                } else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            values = {};\n          } else {\n            $current = topValues;\n            length = $keyPrefix.length;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            } else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\abstract\\query.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;;AACA,MAAM,SAAA,GAAY,OAAA,CAAQ,kBAAR,CAAlB;;AACA,MAAM,UAAA,GAAa,OAAA,CAAQ,mBAAR,CAAnB;;AACA,MAAM,GAAA,GAAM,OAAA,CAAQ,QAAR,CAAZ;;AACA,MAAM,YAAA,GAAe,OAAA,CAAQ,0BAAR,CAArB;;AACA,MAAM,IAAA,GAAO,OAAA,CAAQ,MAAR,CAAA,CAAgB,EAA7B;;AACA,MAAM;AAAE,EAAA;AAAF,IAAwB,OAAA,CAAQ,gBAAR,CAA9B;;AAEA,MAAA,aAAA,CAAoB;AAElB,EAAA,WAAA,CAAY,UAAZ,EAAwB,SAAxB,EAAmC,OAAnC,EAA4C;AAC1C,SAAK,IAAL,GAAY,IAAA,EAAZ;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,QAAL,GAAgB,OAAA,CAAQ,QAAxB;AACA,SAAK,KAAL,GAAa,OAAA,CAAQ,KAArB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,OAAL,GAAe,cAAA,CAAA;AACb,MAAA,KAAA,EAAO,KADM;AAEb,MAAA,GAAA,EAAK,KAFQ;AAIb,MAAA,OAAA,EAAS,OAAA,CAAQ;AAJJ,KAAA,EAKV,OALU,CAAf;AAOA,SAAK,kBAAL;;AAEA,QAAI,OAAA,CAAQ,SAAZ,EAAuB;AAKrB,WAAK,WAAL,GAAmB,aAAA,CAAc,SAAd,CAAwB,WAA3C;AAA2C;AAAA;;AAwBxC,SAAA,oBAAA,CAAqB,GAArB,EAA0B,MAA1B,EAAkC,OAAlC,EAA2C,eAA3C,EAA4D,OAA5D,EAAqE;AAC1E,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,CAAC,GAAD,EAAM,EAAN,CAAP;AAAa;;AAGf,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;;AACA,QAAI,OAAO,eAAP,KAA2B,UAA/B,EAA2C;AACzC,MAAA,OAAA,GAAU,eAAA,IAAmB,EAA7B;AACA,MAAA,eAAA,GAAkB,KAAA,CAAlB;AAAkB;;AAGpB,QAAI,CAAC,eAAL,EAAsB;AACpB,UAAI,OAAA,CAAQ,gBAAZ,EAA8B;AAC5B,QAAA,eAAA,GAAkB,CAAC,KAAD,EAAQ,GAAR,EAAa,OAAb,KAAwB;AACxC,cAAI,OAAA,CAAO,GAAP,CAAA,KAAgB,KAAA,CAApB,EAA+B;AAC7B,mBAAO,KAAP;AAAO;;AAET,iBAAO,KAAA,CAAP;AAAO,SAJT;AAIS,OALX,MAOO;AACL,QAAA,eAAA,GAAkB,CAAC,KAAD,EAAQ,GAAR,EAAa,OAAb,EAAqB,SAArB,EAA+B,QAA/B,KAA2C;AAC3D,cAAI,OAAA,CAAO,GAAP,CAAA,KAAgB,KAAA,CAApB,EAA+B;AAC7B,mBAAO,SAAA,CAAU,MAAV,CAAiB,OAAA,CAAO,GAAP,CAAjB,EAA8B,SAA9B,EAAwC,QAAxC,CAAP;AAA+C;;AAEjD,iBAAO,KAAA,CAAP;AAAO,SAJT;AAIS;AAAA,KAbb,MAaa,IAGF,OAAA,CAAQ,gBAHN,EAGwB;AACnC,YAAM,mBAAA,GAAsB,eAA5B;;AACA,MAAA,eAAA,GAAkB,CAAC,KAAD,EAAQ,GAAR,EAAa,OAAb,EAAqB,SAArB,EAA+B,QAA/B,EAAwC,QAAxC,KAAoD;AACpE,YAAI,mBAAA,CAAoB,KAApB,EAA2B,GAA3B,EAAgC,OAAhC,EAAwC,SAAxC,EAAkD,QAAlD,EAA2D,QAA3D,CAAA,KAAwE,KAAA,CAA5E,EAAuF;AACrF,iBAAO,KAAP;AAAO;;AAET,eAAO,KAAA,CAAP;AAAO,OAJT;AAIS;;AAIX,UAAM,QAAA,GAAW,IAAjB;AACA,UAAM,IAAA,GAAO,KAAA,CAAM,OAAN,CAAc,MAAd,CAAb;AACA,IAAA,GAAA,GAAM,GAAA,CAAI,OAAJ,CAAY,eAAZ,EAA6B,CAAC,KAAD,EAAQ,GAAR,KAAgB;AACjD,UAAY,GAAA,KAAR,GAAJ,EAAiB;AACf,eAAO,OAAA,CAAQ,YAAR,GAAuB,KAAvB,GAA+B,GAAtC;AAAsC;;AAGxC,UAAI,OAAJ;;AACA,UAAI,IAAJ,EAAU;AACR,YAAI,GAAA,CAAI,KAAJ,CAAU,YAAV,CAAJ,EAA6B;AAC3B,UAAA,GAAA,GAAM,GAAA,GAAM,CAAZ;AACA,UAAA,OAAA,GAAU,eAAA,CAAgB,KAAhB,EAAuB,GAAvB,EAA4B,MAA5B,EAAoC,QAApC,EAA8C,OAA9C,EAAuD,OAAvD,CAAV;AAAiE;AAAA,OAHrE,MAGqE,IAE1D,CAAC,GAAA,CAAI,KAAJ,CAAU,OAAV,CAFyD,EAErC;AAC9B,QAAA,OAAA,GAAU,eAAA,CAAgB,KAAhB,EAAuB,GAAvB,EAA4B,MAA5B,EAAoC,QAApC,EAA8C,OAA9C,EAAuD,OAAvD,CAAV;AAAiE;;AAEnE,UAAI,OAAA,KAAY,KAAA,CAAhB,EAA2B;AACzB,cAAM,IAAI,KAAJ,CAAU,yBAAyB,KAAA,qCAAnC,CAAN;AAAyC;;AAE3C,aAAO,OAAP;AAAO,KAjBH,CAAN;AAmBA,WAAO,CAAC,GAAD,EAAM,EAAN,CAAP;AAAa;;AAUf,EAAA,WAAA,CAAY,KAAZ,EAAmB,QAAnB,EAA6B;AAG3B,IAAA,KAAA,CAAM,KAAN,GAAc,QAAd;AAEA,WAAO,KAAP;AAAO;;AAYT,EAAA,GAAA,GAAM;AACJ,UAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AAAgB;;AAQlB,EAAA,kBAAA,GAAqB;AACnB,QAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,IAA7B,EAAmC;AACjC,MAAA,YAAA,CAAa,aAAb;AAEA,WAAK,OAAL,CAAa,OAAb,GAAuB,OAAA,CAAQ,GAA/B;AAA+B;AAAA;;AAUnC,EAAA,gBAAA,GAAmB;AACjB,WAAO,UAAP;AAAO;;AAGT,EAAA,+BAAA,CAAgC,KAAhC,EAAuC;AACrC,QAAI,OAAA,GAAU,KAAA,GAAQ,GAAG,KAAA,iBAAX,GAAoC,gBAAlD;;AAEA,QAAI,KAAA,IAAS,KAAK,KAAlB,EAAyB;AACvB,WAAA,MAAW,GAAX,IAAkB,MAAA,CAAO,IAAP,CAAY,KAAK,KAAL,CAAW,UAAvB,CAAlB,EAAsD;AACpD,YAAI,KAAK,KAAL,CAAW,UAAX,CAAsB,GAAtB,EAA2B,MAA3B,CAAkC,QAAlC,CAA2C,KAAA,CAAM,OAAN,CAAc,IAAd,EAAoB,EAApB,CAA3C,CAAJ,EAAyE;AACvE,cAAI,KAAK,KAAL,CAAW,UAAX,CAAsB,GAAtB,EAA2B,GAA/B,EAAoC;AAClC,YAAA,OAAA,GAAU,KAAK,KAAL,CAAW,UAAX,CAAsB,GAAtB,EAA2B,GAArC;AAAqC;AAAA;AAAA;AAAA;;AAK7C,WAAO,OAAP;AAAO;;AAGT,EAAA,UAAA,GAAa;AACX,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,GAAxC;AAAwC;;AAG1C,EAAA,cAAA,GAAiB;AACf,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,OAAxC;AAAwC;;AAG1C,EAAA,aAAA,GAAgB;AACd,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,MAAxC;AAAwC;;AAG1C,EAAA,aAAA,CAAc,OAAd,EAAuB,QAAvB,EAAiC;AAC/B,QAAI,MAAA,GAAS,IAAb;;AAEA,QAAI,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,MAArC,EAA6C;AAC3C,aAAO,IAAP;AAAO;;AAIT,IAAA,MAAA,GAAS,MAAA,IAAU,KAAK,GAAL,CAAS,WAAT,GAAuB,UAAvB,CAAkC,aAAlC,CAAnB;AAGA,IAAA,MAAA,GAAS,MAAA,KAAW,CAAC,OAAD,IAAY,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,OAArC,EAA8C,KAAK,gBAAL,EAA9C,CAAvB,CAAT;AAGA,IAAA,MAAA,GAAS,MAAA,KAAW,CAAC,QAAD,IAAa,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,EAA+C,KAAK,gBAAL,EAA/C,CAAxB,CAAT;AAEA,WAAO,MAAP;AAAO;;AAGT,EAAA,iBAAA,CAAkB,OAAlB,EAA2B,QAA3B,EAAqC;AACnC,QAAI,KAAK,QAAT,EAAmB;AAEjB,YAAM,sBAAA,GAAyB,KAAK,KAAL,CAAW,sBAA1C;AACA,UAAI,EAAA,GAAK,IAAT;AAEA,MAAA,EAAA,GAAK,EAAA,IAAM,OAAA,IAAW,OAAA,CAAQ,KAAK,gBAAL,EAAR,CAAtB;AACA,MAAA,EAAA,GAAK,EAAA,IAAM,QAAA,IAAY,QAAA,CAAS,KAAK,gBAAL,EAAT,CAAvB;AAEA,WAAK,QAAL,CAAc,sBAAd,IAAwC,EAAxC;AAAwC;AAAA;;AAI5C,EAAA,iBAAA,GAAoB;AAClB,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,UAAxC;AAAwC;;AAG1C,EAAA,qBAAA,CAAsB,OAAtB,EAA+B;AAC7B,WAAO,CAAA,CAAE,OAAF,CAAU,OAAA,CAAQ,GAAR,CAAY,SAAA,IAAa,MAAA,CAAO,MAAP,CAAc,SAAd,CAAzB,CAAV,CAAP;AAAwD;;AAG1D,EAAA,kBAAA,GAAqB;AACnB,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,WAAxC;AAAwC;;AAG1C,EAAA,sBAAA,GAAyB;AACvB,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,eAAxC;AAAwC;;AAG1C,EAAA,eAAA,GAAkB;AAChB,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,QAAxC;AAAwC;;AAG1C,EAAA,aAAA,GAAgB;AACd,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,MAAxC;AAAwC;;AAG1C,EAAA,iBAAA,GAAoB;AAClB,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,UAAxC;AAAwC;;AAG1C,EAAA,iBAAA,GAAoB;AAClB,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,UAAxC;AAAwC;;AAG1C,EAAA,kBAAA,GAAqB;AACnB,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,WAAxC;AAAwC;;AAG1C,EAAA,aAAA,GAAgB;AACd,WAAO,KAAK,OAAL,CAAa,IAAb,KAAsB,UAAA,CAAW,MAAxC;AAAwC;;AAG1C,EAAA,iBAAA,CAAkB,OAAlB,EAA2B;AACzB,QAAI,MAAA,GAAS,IAAb;;AAGA,QAAI,KAAK,OAAL,CAAa,QAAjB,EAA2B;AACzB,YAAM,QAAA,GAAW,KAAK,OAAL,CAAa,QAA9B;AACA,MAAA,OAAA,GAAU,OAAA,CAAQ,GAAR,CAAY,OAAA,IAAU,CAAA,CAAE,MAAF,CAAS,QAAT,EAAmB,CAAC,OAAD,EAAS,IAAT,EAAe,KAAf,KAAyB;AAC1E,YAAI,OAAA,CAAO,KAAP,CAAA,KAAkB,KAAA,CAAlB,IAA+B,IAAA,KAAS,KAA5C,EAAmD;AACjD,UAAA,OAAA,CAAO,IAAP,CAAA,GAAe,OAAA,CAAO,KAAP,CAAf;AACA,iBAAO,OAAA,CAAO,KAAP,CAAP;AAAc;;AAEhB,eAAO,OAAP;AAAO,OALuB,EAM7B,OAN6B,CAAtB,CAAV;AAMG;;AAIL,QAAI,KAAK,OAAL,CAAa,GAAjB,EAAsB;AACpB,MAAA,MAAA,GAAS,OAAA,CAAQ,GAAR,CAAY,OAAA,IAAU;AAC7B,YAAI,CAAA,GAAI,EAAR;;AAEA,aAAA,MAAW,GAAX,IAAkB,OAAlB,EAA0B;AACxB,cAAI,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,OAArC,EAA6C,GAA7C,CAAJ,EAAuD;AACrD,YAAA,CAAA,CAAE,GAAF,CAAA,GAAS,OAAA,CAAO,GAAP,CAAT;AAAgB;AAAA;;AAIpB,YAAI,KAAK,OAAL,CAAa,IAAjB,EAAuB;AACrB,UAAA,CAAA,GAAI,GAAA,CAAI,SAAJ,CAAc,CAAd,CAAJ;AAAkB;;AAGpB,eAAO,CAAP;AAAO,OAbA,CAAT;AAaS,KAdX,MAcW,IAGA,KAAK,OAAL,CAAa,OAAb,KAAyB,IAHzB,EAG+B;AACxC,MAAA,OAAA,GAAU,aAAA,CAAc,cAAd,CAA6B,OAA7B,EAAsC;AAC9C,QAAA,KAAA,EAAO,KAAK,KADkC;AAE9C,QAAA,UAAA,EAAY,KAAK,OAAL,CAAa,UAFqB;AAG9C,QAAA,YAAA,EAAc,KAAK,OAAL,CAAa;AAHmB,OAAtC,EAIP;AACD,QAAA,aAAA,EAAe,KAAK,OAAL,CAAa;AAD3B,OAJO,CAAV;AAQA,MAAA,MAAA,GAAS,KAAK,KAAL,CAAW,SAAX,CAAqB,OAArB,EAA8B;AACrC,QAAA,WAAA,EAAa,KADwB;AAErC,QAAA,OAAA,EAAS,KAAK,OAAL,CAAa,OAFe;AAGrC,QAAA,YAAA,EAAc,KAAK,OAAL,CAAa,YAHU;AAIrC,QAAA,UAAA,EAAY,KAAK,OAAL,CAAa,UAJY;AAKrC,QAAA,gBAAA,EAAkB,IALmB;AAMrC,QAAA,UAAA,EAAY,KAAK,OAAL,CAAa,kBAAb,IAAmC,KAAK,OAAL,CAAa,UANvB;AAOrC,QAAA,GAAA,EAAK;AAPgC,OAA9B,CAAT;AAOO,KAnBE,MAsBJ;AACL,MAAA,MAAA,GAAS,KAAK,KAAL,CAAW,SAAX,CAAqB,OAArB,EAA8B;AACrC,QAAA,WAAA,EAAa,KADwB;AAErC,QAAA,GAAA,EAAK,IAFgC;AAGrC,QAAA,UAAA,EAAY,KAAK,OAAL,CAAa,kBAAb,IAAmC,KAAK,OAAL,CAAa;AAHvB,OAA9B,CAAT;AAG8D;;AAKhE,QAAI,KAAK,OAAL,CAAa,KAAjB,EAAwB;AACtB,MAAA,MAAA,GAAS,MAAA,CAAO,MAAP,KAAkB,CAAlB,GAAsB,IAAtB,GAA6B,MAAA,CAAO,CAAP,CAAtC;AAA6C;;AAE/C,WAAO,MAAP;AAAO;;AAGT,EAAA,qBAAA,GAAwB;AACtB,QAAI,MAAA,GAAS,KAAb;AAEA,IAAA,MAAA,GAAS,MAAA,IAAU,KAAK,GAAL,CAAS,WAAT,GAAuB,UAAvB,CAAkC,MAAlC,CAAnB;AACA,IAAA,MAAA,GAAS,MAAA,IAAU,KAAK,GAAL,CAAS,WAAT,GAAuB,UAAvB,CAAkC,UAAlC,CAAnB;AAEA,WAAO,MAAP;AAAO;;AAGT,EAAA,WAAA,GAAc;AACZ,WAAO,KAAK,GAAL,CAAS,WAAT,GAAuB,UAAvB,CAAkC,MAAlC,CAAP;AAAyC;;AAU3C,EAAA,SAAA,CAAU,GAAV,EAAe,YAAf,EAA6B,UAA7B,EAAyC;AACvC,UAAM;AAAE,MAAA,UAAF;AAAc,MAAA;AAAd,QAA0B,IAAhC;AACA,UAAM,SAAA,GAAY,KAAK,SAAL,CAAe,OAAf,CAAuB,SAAvB,IAAoC,OAAA,CAAQ,SAA9D;AACA,UAAM,kBAAA,GAAqB,KAAK,SAAL,CAAe,OAAf,CAAuB,kBAAvB,IAA6C,OAAA,CAAQ,kBAAhF;AACA,UAAM,SAAA,GAAY,IAAA,CAAK,GAAL,EAAlB;AACA,QAAI,YAAA,GAAe,EAAnB;;AAEA,QAAI,kBAAA,IAAsB,UAA1B,EAAsC;AACpC,YAAM,SAAA,GAAY,GAAA,CAAI,QAAJ,CAAa,GAAb,IAAoB,EAApB,GAAyB,GAA3C;AACA,UAAI,QAAJ;;AACA,UAAI,KAAA,CAAM,OAAN,CAAc,UAAd,CAAJ,EAA+B;AAC7B,QAAA,QAAA,GAAW,UAAA,CAAW,GAAX,CAAe,CAAA,IAAG,iBAAA,CAAkB,CAAlB,CAAlB,EAAwC,IAAxC,CAA6C,IAA7C,CAAX;AAAwD,OAD1D,MAEO;AACL,QAAA,QAAA,GAAW,iBAAA,CAAkB,UAAlB,CAAX;AAA6B;;AAE/B,MAAA,YAAA,GAAe,GAAG,SAAA,IAAa,QAAA,EAA/B;AAA+B;;AAEjC,UAAM,GAAA,GAAM,IAAI,UAAA,CAAW,IAAX,IAAmB,SAAA,MAAe,GAAA,GAAM,YAAA,EAAxD;AACA,UAAM,GAAA,GAAM,aAAa,GAAA,EAAzB;AACA,IAAA,YAAA,CAAa,GAAb,CAAA;;AACA,QAAI,CAAC,SAAL,EAAgB;AACd,WAAK,SAAL,CAAe,GAAf,CAAmB,aAAa,GAAA,EAAhC,EAAuC,OAAvC;AAAuC;;AAEzC,WAAO,MAAM;AACX,YAAM,QAAA,GAAW,YAAY,GAAA,EAA7B;AACA,MAAA,YAAA,CAAa,QAAb,CAAA;;AACA,UAAI,SAAJ,EAAe;AACb,aAAK,SAAL,CAAe,GAAf,CAAmB,QAAnB,EAA6B,IAAA,CAAK,GAAL,KAAa,SAA1C,EAAqD,OAArD;AAAqD;AAAA,KAJzD;AAIyD;;AA8CpD,SAAA,cAAA,CAAe,IAAf,EAAqB,cAArB,EAAqC,OAArC,EAA8C;AAcnD,QAAI,CAAC,IAAA,CAAK,MAAV,EAAkB;AAChB,aAAO,EAAP;AAAO;;AAIT,QAAI,CAAJ;AACA,QAAI,MAAJ;AACA,QAAI,EAAJ;AACA,QAAI,OAAJ;AAEA,QAAI,KAAJ;AACA,QAAI,GAAJ;AACA,UAAM,UAAA,GAAa,IAAA,CAAK,MAAxB;AAEA,QAAI,IAAJ;AACA,QAAI,GAAJ;AACA,QAAI,IAAJ;AACA,QAAI,SAAJ;AACA,QAAI,OAAJ;AACA,QAAI,MAAJ;AACA,QAAI,SAAJ;AACA,QAAI,SAAJ;AACA,UAAM,aAAA,GAAgB,OAAA,CAAQ,aAA9B;AAEA,QAAI,QAAJ;AACA,QAAI,UAAJ;AACA,QAAI,OAAJ;AACA,UAAM,OAAA,GAAU,aAAA,GAAgB,EAAhB,GAAqB,IAAI,KAAJ,CAAU,UAAV,CAArC;AACA,UAAM,SAAA,GAAY,EAAlB;AACA,UAAM,UAAA,GAAa,EAAnB;AAEA,QAAI,UAAJ;AACA,QAAI,gBAAJ;AACA,QAAI,oBAAJ;AACA,QAAI,cAAJ;AACA,QAAI,cAAJ;AACA,QAAI,QAAJ;AACA,QAAI,OAAJ;AAEA,QAAI,aAAJ;;AACA,UAAM,eAAA,GAAkB,KAAA,IAAS;AAC/B,UAAI,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAAA,CAAS,UAA9C,EAA0D,KAA1D,CAAJ,EAAsE;AACpE,QAAA,UAAA,CAAW,GAAX,CAAA,GAAkB,QAAA,GAAW,QAAA,CAAS,UAAT,CAAoB,KAApB,CAA7B;;AACA,YAAI,aAAJ,EAAmB;AACjB,UAAA,aAAA,GAAgB,GAAG,aAAA,IAAiB,KAAA,EAApC;AAAoC,SADtC,MAEO;AACL,UAAA,aAAA,GAAgB,KAAhB;AAAgB;;AAElB,QAAA,UAAA,CAAW,aAAX,CAAA,GAA4B,QAA5B;AAA4B;AAAA,KARhC;;AAYA,UAAM,mBAAA,GAAsB,EAA5B;;AACA,UAAM,eAAA,GAAkB,CAAC,IAAD,EAAM,IAAN,KAAe;AACrC,UAAI,CAAC,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,IAArC,EAA2C,IAA3C,CAAL,EAAsD;AACpD,QAAA,IAAA,CAAK,IAAL,CAAA,GAAY,IAAA,CAAI,MAAJ,CAAW,CAAX,EAAc,IAAA,CAAI,WAAJ,CAAgB,GAAhB,CAAd,CAAZ;AAA0C;;AAE5C,aAAO,IAAA,CAAK,IAAL,CAAP;AAAY,KAJd;;AAOA,UAAM,mBAAA,GAAsB,EAA5B;;AACA,UAAM,eAAA,GAAkB,IAAA,IAAO;AAC7B,UAAI,CAAC,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,mBAArC,EAA0D,IAA1D,CAAL,EAAqE;AACnE,cAAM,KAAA,GAAQ,IAAA,CAAI,WAAJ,CAAgB,GAAhB,CAAd;AACA,QAAA,mBAAA,CAAoB,IAApB,CAAA,GAA2B,IAAA,CAAI,MAAJ,CAAW,KAAA,KAAU,CAAA,CAAV,GAAe,CAAf,GAAmB,KAAA,GAAQ,CAAtC,CAA3B;AAAiE;;AAEnE,aAAO,mBAAA,CAAoB,IAApB,CAAP;AAA2B,KAL7B;;AAQA,UAAM,aAAA,GAAgB,EAAtB;;AACA,UAAM,SAAA,GAAY,IAAA,IAAO;AAEvB,UAAI,CAAC,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,aAArC,EAAoD,IAApD,CAAL,EAA+D;AAC7D,cAAM,YAAA,GAAe,eAAA,CAAgB,IAAhB,EAAqB,mBAArB,CAArB;;AACA,YAAI,CAAC,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,aAArC,EAAoD,YAApD,CAAL,EAAwE;AACtE,UAAA,aAAA,CAAc,YAAd,CAAA,GAA8B,YAAA,GAAe,YAAA,CAAa,KAAb,CAAmB,GAAnB,CAAf,GAAyC,EAAvE;AAAuE;;AAEzE,QAAA,aAAA,CAAc,IAAd,CAAA,GAAqB,aAAA,CAAc,YAAd,CAArB;AAAmC;;AAErC,aAAO,aAAA,CAAc,IAAd,CAAP;AAAqB,KATvB;;AAYA,UAAM,iBAAA,GAAoB,EAA1B;;AACA,UAAM,aAAA,GAAgB,IAAA,IAAO;AAC3B,UAAI,CAAC,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,iBAArC,EAAwD,IAAxD,CAAL,EAAmE;AACjE,cAAM,OAAA,GAAS,SAAA,CAAU,IAAV,CAAf;AACA,cAAM,OAAA,GAAS,OAAA,CAAO,MAAtB;AAEA,QAAA,iBAAA,CAAkB,IAAlB,CAAA,GAAyB,CAAC,OAAD,GAAU,EAAV,GAAe,OAAA,CAAO,OAAA,GAAS,CAAhB,CAAxC;AAAwD;;AAE1D,aAAO,iBAAA,CAAkB,IAAlB,CAAP;AAAyB,KAP3B;;AASA,UAAM,sBAAA,GAAyB,KAAA,IAAS;AACtC,UAAI,oBAAA,GAAsB,CAAA,CAAE,KAAF,CAAQ,KAAA,CAAM,UAAd,CAA1B;;AACA,MAAA,oBAAA,GAAsB,oBAAA,CACnB,MADmB,CACZ,GAAG,oBAAA,CAAoB,OAApB,EAAoB,SADX,EAEnB,GAFmB,CAEf,KAAA,IAAS,CAAA,CAAE,OAAF,CAAU,KAAA,CAAM,UAAhB,EAA4B,GAAA,IAAO,GAAA,CAAI,KAAJ,KAAc,KAAjD,CAFM,EAGnB,KAHmB,EAAtB;AAKA,aAAO,oBAAP;AAAO,KAPT;;AASA,UAAM,SAAA,GAAY,GAAA,IAAO,GAAA,YAAe,MAAf,GAAwB,GAAA,CAAI,QAAJ,CAAa,KAAb,CAAxB,GAA8C,GAAvE;;AACA,QAAI,oBAAJ;AACA,QAAI,mBAAJ;AACA,QAAI,MAAJ;;AAEA,SAAK,KAAA,GAAQ,CAAb,EAAgB,KAAA,GAAQ,UAAxB,EAAoC,KAAA,EAApC,EAA6C;AAC3C,MAAA,GAAA,GAAM,IAAA,CAAK,KAAL,CAAN;;AAGA,UAAI,KAAA,KAAU,CAAd,EAAiB;AACf,QAAA,IAAA,GAAO,MAAA,CAAO,IAAP,CAAY,GAAZ,CAAP;AACA,QAAA,SAAA,GAAY,IAAA,CAAK,MAAjB;AAAiB;;AAGnB,UAAI,aAAJ,EAAmB;AACjB,QAAA,SAAA,GAAY,KAAZ;AAGA,QAAA,OAAA,GAAU,cAAA,CAAe,KAAf,CAAqB,oBAArB,CAA0C,MAApD;AACA,QAAA,OAAA,GAAU,EAAV;;AACA,YAAI,OAAA,KAAY,CAAhB,EAAmB;AACjB,UAAA,OAAA,GAAU,SAAA,CAAU,GAAA,CAAI,cAAA,CAAe,KAAf,CAAqB,oBAArB,CAA0C,CAA1C,CAAJ,CAAV,CAAV;AAAkE,SADpE,MACoE,IAE3D,OAAA,GAAU,CAFiD,EAE9C;AACpB,eAAK,EAAA,GAAK,CAAV,EAAa,EAAA,GAAK,OAAlB,EAA2B,EAAA,EAA3B,EAAiC;AAC/B,YAAA,OAAA,IAAW,SAAA,CAAU,GAAA,CAAI,cAAA,CAAe,KAAf,CAAqB,oBAArB,CAA0C,EAA1C,CAAJ,CAAV,CAAX;AAAmE;AAAA,SAJH,MAIG,IAG9D,CAAC,CAAA,CAAE,OAAF,CAAU,cAAA,CAAe,KAAf,CAAqB,UAA/B,CAH6D,EAGjB;AACpD,UAAA,mBAAA,GAAsB,sBAAA,CAAuB,cAAA,CAAe,KAAtC,CAAtB;;AACA,eAAK,EAAA,GAAK,CAAV,EAAa,EAAA,GAAK,mBAAA,CAAoB,MAAtC,EAA8C,EAAA,EAA9C,EAAoD;AAClD,YAAA,OAAA,IAAW,GAAA,CAAI,mBAAA,CAAoB,EAApB,CAAJ,CAAX;AAAmC;AAAA;AAAA;;AAKzC,MAAA,SAAA,GAAY,MAAA,GAAS,EAArB;AACA,MAAA,cAAA,GAAiB,KAAA,CAAjB;;AACA,WAAK,IAAA,GAAO,CAAZ,EAAe,IAAA,GAAO,SAAtB,EAAiC,IAAA,EAAjC,EAAyC;AACvC,QAAA,GAAA,GAAM,IAAA,CAAK,IAAL,CAAN;AAKA,QAAA,gBAAA,GAAmB,eAAA,CAAgB,GAAhB,EAAqB,mBAArB,CAAnB;AACA,QAAA,UAAA,GAAa,SAAA,CAAU,GAAV,CAAb;;AAGA,YAAI,KAAA,KAAU,CAAV,IAAe,CAAC,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,UAArC,EAAiD,GAAjD,CAApB,EAA2E;AACzE,cAAI,CAAC,UAAA,CAAW,MAAhB,EAAwB;AACtB,YAAA,UAAA,CAAW,GAAX,CAAA,GAAkB,UAAA,CAAW,EAAX,CAAA,GAAiB,cAAnC;AAAmC,WADrC,MAEO;AACL,YAAA,QAAA,GAAW,cAAX;AACA,YAAA,aAAA,GAAgB,KAAA,CAAhB;AACA,YAAA,UAAA,CAAW,OAAX,CAAmB,eAAnB;AAAmB;AAAA;;AAIvB,YAAI,cAAA,KAAmB,KAAA,CAAnB,IAAgC,cAAA,KAAmB,UAAvD,EAAmE;AACjE,cAAI,aAAJ,EAAmB;AAGjB,YAAA,MAAA,GAAS,cAAA,CAAe,MAAxB;AACA,YAAA,OAAA,GAAU,IAAV;AACA,YAAA,UAAA,GAAa,IAAb;;AAEA,gBAAI,MAAJ,EAAY;AACV,mBAAK,CAAA,GAAI,CAAT,EAAY,CAAA,GAAI,MAAhB,EAAwB,CAAA,EAAxB,EAA6B;AAC3B,gBAAA,MAAA,GAAS,OAAA,GAAU,GAAG,OAAA,IAAW,cAAA,CAAe,CAAf,CAAe,EAAvC,GAA8C,cAAA,CAAe,CAAf,CAAvD;AACA,gBAAA,oBAAA,GAAuB,UAAA,CAAW,MAAX,CAAA,CAAmB,KAAnB,CAAyB,oBAAhD;AACA,gBAAA,OAAA,GAAU,oBAAA,CAAqB,MAA/B;AACA,gBAAA,QAAA,GAAW,MAAX;;AACA,oBAAI,OAAA,KAAY,CAAhB,EAAmB;AACjB,kBAAA,QAAA,IAAY,SAAA,CAAU,GAAA,CAAI,GAAG,MAAA,IAAU,oBAAA,CAAqB,CAArB,CAAqB,EAAtC,CAAV,CAAZ;AAA4D,iBAD9D,MAC8D,IAErD,OAAA,GAAU,CAF2C,EAExC;AACpB,uBAAK,EAAA,GAAK,CAAV,EAAa,EAAA,GAAK,OAAlB,EAA2B,EAAA,EAA3B,EAAiC;AAC/B,oBAAA,QAAA,IAAY,SAAA,CAAU,GAAA,CAAI,GAAG,MAAA,IAAU,oBAAA,CAAqB,EAArB,CAAqB,EAAtC,CAAV,CAAZ;AAA4D;AAAA,iBAJF,MAIE,IAGvD,CAAC,CAAA,CAAE,OAAF,CAAU,UAAA,CAAW,MAAX,CAAA,CAAmB,KAAnB,CAAyB,UAAnC,CAHsD,EAGN;AACxD,kBAAA,mBAAA,GAAsB,sBAAA,CAAuB,UAAA,CAAW,MAAX,CAAA,CAAmB,KAA1C,CAAtB;;AACA,uBAAK,EAAA,GAAK,CAAV,EAAa,EAAA,GAAK,mBAAA,CAAoB,MAAtC,EAA8C,EAAA,EAA9C,EAAoD;AAClD,oBAAA,QAAA,IAAY,GAAA,CAAI,GAAG,MAAA,IAAU,mBAAA,CAAoB,EAApB,CAAoB,EAArC,CAAZ;AAAiD;AAAA;;AAGrD,oBAAI,CAAC,UAAL,EAAiB;AACf,kBAAA,UAAA,GAAa,OAAb;AAAa;;AAGf,gBAAA,QAAA,GAAW,UAAA,GAAa,QAAxB;AACA,gBAAA,OAAA,GAAU,MAAV;;AACA,oBAAI,CAAA,GAAI,MAAA,GAAS,CAAjB,EAAoB;AAClB,kBAAA,UAAA,GAAa,QAAb;AAAa;AAAA;AAAA,aA3BnB,MA8BO;AACL,cAAA,QAAA,GAAW,OAAX;AAAW;;AAGb,gBAAI,QAAA,KAAa,OAAjB,EAA0B;AACxB,kBAAI,CAAC,SAAA,CAAU,QAAV,CAAL,EAA0B;AACxB,gBAAA,SAAA,CAAU,QAAV,CAAA,GAAsB,MAAtB;AAAsB,eADxB,MAEO;AACL,gBAAA,SAAA,GAAY,IAAZ;AAAY;AAAA,aAJhB,MAIgB,IAEL,CAAC,SAAA,CAAU,QAAV,CAFI,EAEiB;AAC/B,cAAA,OAAA,GAAU,SAAA,CAAU,UAAV,CAAV;AACA,cAAA,cAAA,GAAiB,aAAA,CAAc,OAAd,CAAjB;;AAEA,kBAAI,UAAA,CAAW,OAAX,CAAA,CAAoB,WAApB,CAAgC,mBAApC,EAAyD;AACvD,oBAAI,OAAJ,EAAa;AACX,kBAAA,OAAA,CAAQ,cAAR,CAAA,GAA0B,SAAA,CAAU,QAAV,CAAA,GAAsB,MAAhD;AAAgD;AAAA,eAFpD,MAIO;AACL,oBAAI,CAAC,OAAA,CAAQ,cAAR,CAAL,EAA8B;AAC5B,kBAAA,OAAA,CAAQ,cAAR,CAAA,GAA0B,EAA1B;AAA0B;;AAE5B,gBAAA,OAAA,CAAQ,cAAR,CAAA,CAAwB,IAAxB,CAA6B,SAAA,CAAU,QAAV,CAAA,GAAsB,MAAnD;AAAmD;AAAA;;AAKvD,YAAA,MAAA,GAAS,EAAT;AAAS,WAhEX,MAiEO;AAIL,YAAA,QAAA,GAAW,SAAX;AACA,YAAA,MAAA,GAAS,UAAA,CAAW,MAApB;;AACA,gBAAI,MAAJ,EAAY;AACV,mBAAK,CAAA,GAAI,CAAT,EAAY,CAAA,GAAI,MAAhB,EAAwB,CAAA,EAAxB,EAA6B;AAC3B,oBAAI,CAAA,KAAM,MAAA,GAAS,CAAnB,EAAsB;AACpB,kBAAA,MAAA,GAAS,QAAA,CAAS,UAAA,CAAW,CAAX,CAAT,CAAA,GAA0B,EAAnC;AAAmC;;AAErC,gBAAA,QAAA,GAAW,QAAA,CAAS,UAAA,CAAW,CAAX,CAAT,CAAA,IAA2B,EAAtC;AAAsC;AAAA;AAAA;AAAA;;AAO9C,QAAA,MAAA,CAAO,eAAA,CAAgB,GAAhB,CAAP,CAAA,GAA+B,GAAA,CAAI,GAAJ,CAA/B;AACA,QAAA,OAAA,GAAU,GAAV;AACA,QAAA,cAAA,GAAiB,UAAjB;AACA,QAAA,oBAAA,GAAuB,gBAAvB;AAAuB;;AAGzB,UAAI,aAAJ,EAAmB;AACjB,QAAA,MAAA,GAAS,cAAA,CAAe,MAAxB;AACA,QAAA,OAAA,GAAU,IAAV;AACA,QAAA,UAAA,GAAa,IAAb;;AAEA,YAAI,MAAJ,EAAY;AACV,eAAK,CAAA,GAAI,CAAT,EAAY,CAAA,GAAI,MAAhB,EAAwB,CAAA,EAAxB,EAA6B;AAC3B,YAAA,MAAA,GAAS,OAAA,GAAU,GAAG,OAAA,IAAW,cAAA,CAAe,CAAf,CAAe,EAAvC,GAA8C,cAAA,CAAe,CAAf,CAAvD;AACA,YAAA,oBAAA,GAAuB,UAAA,CAAW,MAAX,CAAA,CAAmB,KAAnB,CAAyB,oBAAhD;AACA,YAAA,OAAA,GAAU,oBAAA,CAAqB,MAA/B;AACA,YAAA,QAAA,GAAW,MAAX;;AACA,gBAAI,OAAA,KAAY,CAAhB,EAAmB;AACjB,cAAA,QAAA,IAAY,SAAA,CAAU,GAAA,CAAI,GAAG,MAAA,IAAU,oBAAA,CAAqB,CAArB,CAAqB,EAAtC,CAAV,CAAZ;AAA4D,aAD9D,MAC8D,IAErD,OAAA,GAAU,CAF2C,EAExC;AACpB,mBAAK,EAAA,GAAK,CAAV,EAAa,EAAA,GAAK,OAAlB,EAA2B,EAAA,EAA3B,EAAiC;AAC/B,gBAAA,QAAA,IAAY,SAAA,CAAU,GAAA,CAAI,GAAG,MAAA,IAAU,oBAAA,CAAqB,EAArB,CAAqB,EAAtC,CAAV,CAAZ;AAA4D;AAAA,aAJF,MAIE,IAGvD,CAAC,CAAA,CAAE,OAAF,CAAU,UAAA,CAAW,MAAX,CAAA,CAAmB,KAAnB,CAAyB,UAAnC,CAHsD,EAGN;AACxD,cAAA,mBAAA,GAAsB,sBAAA,CAAuB,UAAA,CAAW,MAAX,CAAA,CAAmB,KAA1C,CAAtB;;AACA,mBAAK,EAAA,GAAK,CAAV,EAAa,EAAA,GAAK,mBAAA,CAAoB,MAAtC,EAA8C,EAAA,EAA9C,EAAoD;AAClD,gBAAA,QAAA,IAAY,GAAA,CAAI,GAAG,MAAA,IAAU,mBAAA,CAAoB,EAApB,CAAoB,EAArC,CAAZ;AAAiD;AAAA;;AAGrD,gBAAI,CAAC,UAAL,EAAiB;AACf,cAAA,UAAA,GAAa,OAAb;AAAa;;AAGf,YAAA,QAAA,GAAW,UAAA,GAAa,QAAxB;AACA,YAAA,OAAA,GAAU,MAAV;;AACA,gBAAI,CAAA,GAAI,MAAA,GAAS,CAAjB,EAAoB;AAClB,cAAA,UAAA,GAAa,QAAb;AAAa;AAAA;AAAA,SA3BnB,MA8BO;AACL,UAAA,QAAA,GAAW,OAAX;AAAW;;AAGb,YAAI,QAAA,KAAa,OAAjB,EAA0B;AACxB,cAAI,CAAC,SAAA,CAAU,QAAV,CAAL,EAA0B;AACxB,YAAA,SAAA,CAAU,QAAV,CAAA,GAAsB,MAAtB;AAAsB,WADxB,MAEO;AACL,YAAA,SAAA,GAAY,IAAZ;AAAY;AAAA,SAJhB,MAIgB,IAEL,CAAC,SAAA,CAAU,QAAV,CAFI,EAEiB;AAC/B,UAAA,OAAA,GAAU,SAAA,CAAU,UAAV,CAAV;AACA,UAAA,cAAA,GAAiB,aAAA,CAAc,OAAd,CAAjB;;AAEA,cAAI,UAAA,CAAW,OAAX,CAAA,CAAoB,WAApB,CAAgC,mBAApC,EAAyD;AACvD,gBAAI,OAAJ,EAAa;AACX,cAAA,OAAA,CAAQ,cAAR,CAAA,GAA0B,SAAA,CAAU,QAAV,CAAA,GAAsB,MAAhD;AAAgD;AAAA,WAFpD,MAIO;AACL,gBAAI,CAAC,OAAA,CAAQ,cAAR,CAAL,EAA8B;AAC5B,cAAA,OAAA,CAAQ,cAAR,CAAA,GAA0B,EAA1B;AAA0B;;AAE5B,YAAA,OAAA,CAAQ,cAAR,CAAA,CAAwB,IAAxB,CAA6B,SAAA,CAAU,QAAV,CAAA,GAAsB,MAAnD;AAAmD;AAAA;;AAGvD,YAAI,CAAC,SAAL,EAAgB;AACd,UAAA,OAAA,CAAQ,IAAR,CAAa,SAAb;AAAa;AAAA,OA7DjB,MA+DO;AACL,QAAA,OAAA,CAAQ,KAAR,CAAA,GAAiB,SAAjB;AAAiB;AAAA;;AAIrB,WAAO,OAAP;AAAO;;AA5uBS;;AAgvBpB,MAAA,CAAO,OAAP,GAAiB,aAAjB;AACA,MAAA,CAAO,OAAP,CAAe,aAAf,GAA+B,aAA/B;AACA,MAAA,CAAO,OAAP,CAAe,OAAf,GAAyB,aAAzB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst SqlString = require('../../sql-string');\nconst QueryTypes = require('../../query-types');\nconst Dot = require('dottie');\nconst deprecations = require('../../utils/deprecations');\nconst uuid = require('uuid').v4;\nconst { safeStringifyJson } = require('../../utils.js');\n\nclass AbstractQuery {\n\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = {\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      ...options\n    };\n    this.checkLoggingOption();\n\n    if (options.rawErrors) {\n      // The default implementation in AbstractQuery just returns the same\n      // error object. By overidding this.formatError, this saves every dialect\n      // having to check for options.rawErrors in their own formatError\n      // implementations.\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {object} [options]\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Formats a raw database error from the database library into a common Sequelize exception.\n   *\n   * @param {Error} error The exception object.\n   * @param {object} errStack The stack trace that started the database query.\n   * @returns {BaseError} the new formatted error object.\n   */\n  formatError(error, errStack) {\n    // Default implementation, no formatting.\n    // Each dialect overrides this method to parse errors from their respective the database engines.\n    error.stack = errStack;\n\n    return error;\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().startsWith('insert into');\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p=>safeStringifyJson(p)).join(', ');\n      } else {\n        paramStr = safeStringifyJson(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {object} includeOptions\n   * @param {object} options\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        }\n        else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                }\n                else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            }\n            else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"]},"metadata":{},"sourceType":"script"}