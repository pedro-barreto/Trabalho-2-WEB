{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst _ = require(\"lodash\");\n\nconst Utils = require(\"../../utils\");\n\nconst DataTypes = require(\"../../data-types\");\n\nconst Transaction = require(\"../../transaction\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nclass QueryInterface {\n  constructor(sequelize, queryGenerator) {\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n  }\n\n  async createDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async createSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.queryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n\n    const schemas = await this.showAllSchemas(options);\n    return Promise.all(schemas.map(schemaName => this.dropSchema(schemaName, options)));\n  }\n\n  async showAllSchemas(options) {\n    options = __spreadProps(__spreadValues({}, options), {\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    });\n    const showSchemasSql = this.queryGenerator.showSchemasQuery(options);\n    const schemaNames = await this.sequelize.query(showSchemasSql, options);\n    return _.flatten(schemaNames.map(value => value.schema_name ? value.schema_name : value));\n  }\n\n  async databaseVersion(options) {\n    return await this.sequelize.query(this.queryGenerator.versionQuery(), __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.VERSION\n    }));\n  }\n\n  async createTable(tableName, attributes, options, model) {\n    let sql = \"\";\n    options = __spreadValues({}, options);\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === void 0) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = _.mapValues(attributes, attribute => this.sequelize.normalizeAttribute(attribute));\n    await this.ensureEnums(tableName, attributes, options, model);\n\n    if (!tableName.schema && (options.schema || !!model && model._schema)) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, {\n      table: tableName,\n      context: \"createTable\"\n    });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async dropTable(tableName, options) {\n    options = __spreadValues({}, options);\n    options.cascade = options.cascade || options.force || false;\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n    await this.sequelize.query(sql, options);\n  }\n\n  async _dropAllTables(tableNames, skip, options) {\n    for (const tableName of tableNames) {\n      if (!skip.includes(tableName.tableName || tableName)) {\n        await this.dropTable(tableName, __spreadProps(__spreadValues({}, options), {\n          cascade: true\n        }));\n      }\n    }\n  }\n\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n    const tableNames = await this.showAllTables(options);\n    const foreignKeys = await this.getForeignKeysForTables(tableNames, options);\n\n    for (const tableName of tableNames) {\n      let normalizedTableName = tableName;\n\n      if (_.isObject(tableName)) {\n        normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      for (const foreignKey of foreignKeys[normalizedTableName]) {\n        await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n      }\n    }\n\n    await this._dropAllTables(tableNames, skip, options);\n  }\n\n  async renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.queryGenerator.renameTableQuery(before, after);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async showAllTables(options) {\n    options = __spreadProps(__spreadValues({}, options), {\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    });\n    const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);\n    const tableNames = await this.sequelize.query(showTablesSql, options);\n    return _.flatten(tableNames);\n  }\n\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === \"string\") {\n      schema = options;\n    } else if (typeof options === \"object\" && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === \"object\" && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.DESCRIBE\n    });\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === \"ER_NO_SUCH_TABLE\") {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n\n  async addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error(\"addColumn takes at least 3 arguments (table, attribute name, attribute definition)\");\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return await this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n\n  async removeColumn(tableName, attributeName, options) {\n    return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options);\n  }\n\n  normalizeAttribute(dataTypeOrOptions) {\n    let attribute;\n\n    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n      attribute = {\n        type: dataTypeOrOptions,\n        allowNull: true\n      };\n    } else {\n      attribute = dataTypeOrOptions;\n    }\n\n    return this.sequelize.normalizeAttribute(attribute);\n  }\n\n  quoteIdentifier(identifier2, force) {\n    return this.queryGenerator.quoteIdentifier(identifier2, force);\n  }\n\n  quoteIdentifiers(identifiers) {\n    return this.queryGenerator.quoteIdentifiers(identifiers);\n  }\n\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n    const query = this.queryGenerator.attributesToSQL({\n      [attributeName]: this.normalizeAttribute(dataTypeOrOptions)\n    }, {\n      context: \"changeColumn\",\n      table: tableName\n    });\n    const sql = this.queryGenerator.changeColumnQuery(tableName, query);\n    return this.sequelize.query(sql, options);\n  }\n\n  async assertTableHasColumn(tableName, columnName, options) {\n    const description = await this.describeTable(tableName, options);\n\n    if (description[columnName]) {\n      return description;\n    }\n\n    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);\n  }\n\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];\n    const _options = {};\n    _options[attrNameAfter] = {\n      attribute: attrNameAfter,\n      type: data.type,\n      allowNull: data.allowNull,\n      defaultValue: data.defaultValue\n    };\n\n    if (data.defaultValue === null && !data.allowNull) {\n      delete _options[attrNameAfter].defaultValue;\n    }\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, this.queryGenerator.attributesToSQL(_options));\n    return await this.sequelize.query(sql, options);\n  }\n\n  async addIndex(tableName, attributes, options, rawTablename) {\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      supportsSearchPath: false\n    }));\n  }\n\n  async showIndex(tableName, options) {\n    const sql = this.queryGenerator.showIndexesQuery(tableName, options);\n    return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.SHOWINDEXES\n    }));\n  }\n\n  async getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return {};\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const results = await Promise.all(tableNames.map(tableName => this.sequelize.query(this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)));\n    const result = {};\n    tableNames.forEach((tableName, i) => {\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      result[tableName] = Array.isArray(results[i]) ? results[i].map(r => r.constraint_name) : [results[i] && results[i].constraint_name];\n      result[tableName] = result[tableName].filter(_.identity);\n    });\n    return result;\n  }\n\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);\n    return this.sequelize.query(query, queryOptions);\n  }\n\n  async removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error(\"Fields must be specified through options.fields\");\n    }\n\n    if (!options.type) {\n      throw new Error(\"Constraint type must be specified through options.type\");\n    }\n\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async showConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);\n    return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.SHOWCONSTRAINTS\n    }));\n  }\n\n  async removeConstraint(tableName, constraintName, options) {\n    return this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options);\n  }\n\n  async insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n    const results = await this.sequelize.query(sql, options);\n    if (instance) results[0].isNewRecord = false;\n    return results;\n  }\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    const model = options.model;\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = options.conflictFields || [];\n\n    if (options.upsertKeys.length === 0) {\n      const primaryKeys = Object.values(model.primaryKeys).map(item => item.field);\n      const uniqueKeys = Object.values(model.uniqueKeys).filter(c => c.fields.length > 0).map(c => c.fields);\n      const indexKeys = Object.values(model._indexes).filter(c => c.unique && c.fields.length > 0).map(c => c.fields);\n\n      for (const field of options.updateOnDuplicate) {\n        const uniqueKey = uniqueKeys.find(fields => fields.includes(field));\n\n        if (uniqueKey) {\n          options.upsertKeys = uniqueKey;\n          break;\n        }\n\n        const indexKey = indexKeys.find(fields => fields.includes(field));\n\n        if (indexKey) {\n          options.upsertKeys = indexKey;\n          break;\n        }\n      }\n\n      if (options.upsertKeys.length === 0 || _.intersection(options.updateOnDuplicate, primaryKeys).length) {\n        options.upsertKeys = primaryKeys;\n      }\n\n      options.upsertKeys = _.uniq(options.upsertKeys);\n    }\n\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async bulkInsert(tableName, records, options, attributes) {\n    options = __spreadValues({}, options);\n    options.type = QueryTypes.INSERT;\n    const results = await this.sequelize.query(this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes), options);\n    return results[0];\n  }\n\n  async update(instance, tableName, values, identifier2, options) {\n    options = __spreadValues({}, options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier2, options, instance.constructor.rawAttributes);\n    options.type = QueryTypes.UPDATE;\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async bulkUpdate(tableName, values, identifier2, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier2 === \"object\") identifier2 = Utils.cloneDeep(identifier2);\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier2, options, attributes);\n    const table = _.isObject(tableName) ? tableName : {\n      tableName\n    };\n\n    const model = _.find(this.sequelize.modelManager.models, {\n      tableName: table.tableName\n    });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async delete(instance, tableName, identifier2, options) {\n    const cascades = [];\n    const sql = this.queryGenerator.deleteQuery(tableName, identifier2, {}, instance.constructor);\n    options = __spreadValues({}, options);\n\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n\n        if (association.options && association.options.onDelete && association.options.onDelete.toLowerCase() === \"cascade\" && association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    for (const cascade of cascades) {\n      let instances = await instance[cascade](options);\n      if (!instances) continue;\n      if (!Array.isArray(instances)) instances = [instances];\n\n      for (const _instance of instances) await _instance.destroy(options);\n    }\n\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      limit: null\n    });\n\n    if (options.truncate === true) {\n      return this.sequelize.query(this.queryGenerator.truncateTableQuery(tableName, options), options);\n    }\n\n    if (typeof identifier === \"object\") where = Utils.cloneDeep(where);\n    return await this.sequelize.query(this.queryGenerator.deleteQuery(tableName, where, options, model), options);\n  }\n\n  async select(model, tableName, optionsArg) {\n    const options = __spreadProps(__spreadValues({}, optionsArg), {\n      type: QueryTypes.SELECT,\n      model\n    });\n\n    return await this.sequelize.query(this.queryGenerator.selectQuery(tableName, options, model), options);\n  }\n\n  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.arithmeticQuery(\"+\", tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.arithmeticQuery(\"-\", tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n    const sql = this.queryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === void 0) {\n      throw new Error(\"Please pass an attribute selector!\");\n    }\n\n    const data = await this.sequelize.query(sql, options);\n\n    if (!options.plain) {\n      return data;\n    }\n\n    const result = data ? data[attributeSelector] : null;\n\n    if (!options || !options.dataType) {\n      return result;\n    }\n\n    const dataType = options.dataType;\n\n    if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n      if (result !== null) {\n        return parseFloat(result);\n      }\n    }\n\n    if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n      if (result !== null) {\n        return parseInt(result, 10);\n      }\n    }\n\n    if (dataType instanceof DataTypes.DATE) {\n      if (result !== null && !(result instanceof Date)) {\n        return new Date(result);\n      }\n    }\n\n    return result;\n  }\n\n  async createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {\n    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async dropTrigger(tableName, triggerName, options) {\n    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async dropFunction(functionName, params, options) {\n    const sql = this.queryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  ensureEnums() {}\n\n  async setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to set isolation level for a transaction without transaction object!\");\n    }\n\n    if (transaction.parent || !value) {\n      return;\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction\n    });\n    const sql = this.queryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n    if (!sql) return;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to start a transaction without transaction object!\");\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction\n    });\n    options.transaction.name = transaction.parent ? transaction.name : void 0;\n    const sql = this.queryGenerator.startTransactionQuery(transaction);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async deferConstraints(transaction, options) {\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction\n    });\n    const sql = this.queryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to commit a transaction without transaction object!\");\n    }\n\n    if (transaction.parent) {\n      return;\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    });\n    const sql = this.queryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = \"commit\";\n    return await promise;\n  }\n\n  async rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to rollback a transaction without transaction object!\");\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    });\n    options.transaction.name = transaction.parent ? transaction.name : void 0;\n    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = \"rollback\";\n    return await promise;\n  }\n\n}\n\nexports.QueryInterface = QueryInterface;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-interface.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;;AAEA,MAAM,KAAA,GAAQ,OAAA,CAAQ,aAAR,CAAd;;AACA,MAAM,SAAA,GAAY,OAAA,CAAQ,kBAAR,CAAlB;;AACA,MAAM,WAAA,GAAc,OAAA,CAAQ,mBAAR,CAApB;;AACA,MAAM,UAAA,GAAa,OAAA,CAAQ,mBAAR,CAAnB;;AAKA,MAAA,cAAA,CAAqB;AACnB,EAAA,WAAA,CAAY,SAAZ,EAAuB,cAAvB,EAAuC;AACrC,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,cAAL,GAAsB,cAAtB;AAAsB;;AAgBlB,QAAA,cAAA,CAAe,QAAf,EAAyB,OAAzB,EAAkC;AACtC,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,mBAApB,CAAwC,QAAxC,EAAkD,OAAlD,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAWnC,QAAA,YAAA,CAAa,QAAb,EAAuB,OAAvB,EAAgC;AACpC,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,iBAApB,CAAsC,QAAtC,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAWnC,QAAA,YAAA,CAAa,MAAb,EAAqB,OAArB,EAA8B;AAClC,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,YAApB,CAAiC,MAAjC,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAWnC,QAAA,UAAA,CAAW,MAAX,EAAmB,OAAnB,EAA4B;AAChC,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,UAApB,CAA+B,MAA/B,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAUnC,QAAA,cAAA,CAAe,OAAf,EAAwB;AAC5B,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;;AAEA,QAAI,CAAC,KAAK,cAAL,CAAoB,QAApB,CAA6B,QAA7B,CAAsC,OAA3C,EAAoD;AAClD,aAAO,KAAK,SAAL,CAAe,IAAf,CAAoB,OAApB,CAAP;AAA2B;;AAE7B,UAAM,OAAA,GAAU,MAAM,KAAK,cAAL,CAAoB,OAApB,CAAtB;AACA,WAAO,OAAA,CAAQ,GAAR,CAAY,OAAA,CAAQ,GAAR,CAAY,UAAA,IAAc,KAAK,UAAL,CAAgB,UAAhB,EAA4B,OAA5B,CAA1B,CAAZ,CAAP;AAAyE;;AAUrE,QAAA,cAAA,CAAe,OAAf,EAAwB;AAC5B,IAAA,OAAA,GAAU,aAAA,CAAA,cAAA,CAAA,EAAA,EACL,OADK,CAAA,EAAA;AAER,MAAA,GAAA,EAAK,IAFG;AAGR,MAAA,IAAA,EAAM,KAAK,SAAL,CAAe,UAAf,CAA0B;AAHxB,KAAA,CAAV;AAMA,UAAM,cAAA,GAAiB,KAAK,cAAL,CAAoB,gBAApB,CAAqC,OAArC,CAAvB;AAEA,UAAM,WAAA,GAAc,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,cAArB,EAAqC,OAArC,CAA1B;AAEA,WAAO,CAAA,CAAE,OAAF,CAAU,WAAA,CAAY,GAAZ,CAAgB,KAAA,IAAS,KAAA,CAAM,WAAN,GAAoB,KAAA,CAAM,WAA1B,GAAwC,KAAjE,CAAV,CAAP;AAAkF;;AAY9E,QAAA,eAAA,CAAgB,OAAhB,EAAyB;AAC7B,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CACX,KAAK,cAAL,CAAoB,YAApB,EADW,EAEX,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAAc,MAAA,IAAA,EAAM,UAAA,CAAW;AAA/B,KAAA,CAFW,CAAb;AAEiC;;AAyD7B,QAAA,WAAA,CAAY,SAAZ,EAAuB,UAAvB,EAAmC,OAAnC,EAA4C,KAA5C,EAAmD;AACvD,QAAI,GAAA,GAAM,EAAV;AAEA,IAAA,OAAA,GAAU,cAAA,CAAA,EAAA,EAAK,OAAL,CAAV;;AAEA,QAAI,OAAA,IAAW,OAAA,CAAQ,UAAvB,EAAmC;AACjC,MAAA,CAAA,CAAE,MAAF,CAAS,OAAA,CAAQ,UAAjB,EAA6B,SAAA,IAAa;AACxC,YAAI,SAAA,CAAU,WAAV,KAA0B,KAAA,CAA9B,EAAyC;AACvC,UAAA,SAAA,CAAU,WAAV,GAAwB,IAAxB;AAAwB;AAAA,OAF5B;AAE4B;;AAK9B,QAAI,KAAJ,EAAW;AACT,MAAA,OAAA,CAAQ,UAAR,GAAqB,OAAA,CAAQ,UAAR,IAAsB,KAAA,CAAM,UAAjD;AAAiD;;AAGnD,IAAA,UAAA,GAAa,CAAA,CAAE,SAAF,CACX,UADW,EAEX,SAAA,IAAa,KAAK,SAAL,CAAe,kBAAf,CAAkC,SAAlC,CAFF,CAAb;AAMA,UAAM,KAAK,WAAL,CAAiB,SAAjB,EAA4B,UAA5B,EAAwC,OAAxC,EAAiD,KAAjD,CAAN;;AAEA,QACE,CAAC,SAAA,CAAU,MAAX,KACC,OAAA,CAAQ,MAAR,IAAkB,CAAC,CAAC,KAAF,IAAW,KAAA,CAAM,OADpC,CADF,EAGE;AACA,MAAA,SAAA,GAAY,KAAK,cAAL,CAAoB,SAApB,CAA8B;AACxC,QAAA,SADwC;AAExC,QAAA,OAAA,EAAS,CAAC,CAAC,KAAF,IAAW,KAAA,CAAM,OAAjB,IAA4B,OAAA,CAAQ;AAFL,OAA9B,CAAZ;AAE+C;;AAIjD,IAAA,UAAA,GAAa,KAAK,cAAL,CAAoB,eAApB,CAAoC,UAApC,EAAgD;AAAE,MAAA,KAAA,EAAO,SAAT;AAAoB,MAAA,OAAA,EAAS;AAA7B,KAAhD,CAAb;AACA,IAAA,GAAA,GAAM,KAAK,cAAL,CAAoB,gBAApB,CAAqC,SAArC,EAAgD,UAAhD,EAA4D,OAA5D,CAAN;AAEA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAWnC,QAAA,SAAA,CAAU,SAAV,EAAqB,OAArB,EAA8B;AAElC,IAAA,OAAA,GAAU,cAAA,CAAA,EAAA,EAAK,OAAL,CAAV;AACA,IAAA,OAAA,CAAQ,OAAR,GAAkB,OAAA,CAAQ,OAAR,IAAmB,OAAA,CAAQ,KAA3B,IAAoC,KAAtD;AAEA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,cAApB,CAAmC,SAAnC,EAA8C,OAA9C,CAAZ;AAEA,UAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAN;AAAgC;;AAG5B,QAAA,cAAA,CAAe,UAAf,EAA2B,IAA3B,EAAiC,OAAjC,EAA0C;AAC9C,SAAA,MAAW,SAAX,IAAwB,UAAxB,EAAoC;AAElC,UAAI,CAAC,IAAA,CAAK,QAAL,CAAc,SAAA,CAAU,SAAV,IAAuB,SAArC,CAAL,EAAsD;AACpD,cAAM,KAAK,SAAL,CAAe,SAAf,EAA0B,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAAc,UAAA,OAAA,EAAS;AAAvB,SAAA,CAA1B,CAAN;AAAuD;AAAA;AAAA;;AAavD,QAAA,aAAA,CAAc,OAAd,EAAuB;AAC3B,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AACA,UAAM,IAAA,GAAO,OAAA,CAAQ,IAAR,IAAgB,EAA7B;AAEA,UAAM,UAAA,GAAa,MAAM,KAAK,aAAL,CAAmB,OAAnB,CAAzB;AACA,UAAM,WAAA,GAAc,MAAM,KAAK,uBAAL,CAA6B,UAA7B,EAAyC,OAAzC,CAA1B;;AAEA,SAAA,MAAW,SAAX,IAAwB,UAAxB,EAAoC;AAClC,UAAI,mBAAA,GAAsB,SAA1B;;AACA,UAAI,CAAA,CAAE,QAAF,CAAW,SAAX,CAAJ,EAA2B;AACzB,QAAA,mBAAA,GAAsB,GAAG,SAAA,CAAU,MAAA,IAAU,SAAA,CAAU,SAAA,EAAvD;AAAuD;;AAGzD,WAAA,MAAW,UAAX,IAAyB,WAAA,CAAY,mBAAZ,CAAzB,EAA2D;AACzD,cAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,KAAK,cAAL,CAAoB,mBAApB,CAAwC,SAAxC,EAAmD,UAAnD,CAArB,CAAN;AAA8E;AAAA;;AAGlF,UAAM,KAAK,cAAL,CAAoB,UAApB,EAAgC,IAAhC,EAAsC,OAAtC,CAAN;AAA4C;;AAYxC,QAAA,WAAA,CAAY,MAAZ,EAAoB,KAApB,EAA2B,OAA3B,EAAoC;AACxC,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,gBAApB,CAAqC,MAArC,EAA6C,KAA7C,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAanC,QAAA,aAAA,CAAc,OAAd,EAAuB;AAC3B,IAAA,OAAA,GAAU,aAAA,CAAA,cAAA,CAAA,EAAA,EACL,OADK,CAAA,EAAA;AAER,MAAA,GAAA,EAAK,IAFG;AAGR,MAAA,IAAA,EAAM,UAAA,CAAW;AAHT,KAAA,CAAV;AAMA,UAAM,aAAA,GAAgB,KAAK,cAAL,CAAoB,eAApB,CAAoC,KAAK,SAAL,CAAe,MAAf,CAAsB,QAA1D,CAAtB;AACA,UAAM,UAAA,GAAa,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,aAArB,EAAoC,OAApC,CAAzB;AACA,WAAO,CAAA,CAAE,OAAF,CAAU,UAAV,CAAP;AAAiB;;AA4Bb,QAAA,aAAA,CAAc,SAAd,EAAyB,OAAzB,EAAkC;AACtC,QAAI,MAAA,GAAS,IAAb;AACA,QAAI,eAAA,GAAkB,IAAtB;;AAEA,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,MAAA,MAAA,GAAS,OAAT;AAAS,KADX,MACW,IACA,OAAO,OAAP,KAAmB,QAAnB,IAA+B,OAAA,KAAY,IAD3C,EACiD;AAC1D,MAAA,MAAA,GAAS,OAAA,CAAQ,MAAR,IAAkB,IAA3B;AACA,MAAA,eAAA,GAAkB,OAAA,CAAQ,eAAR,IAA2B,IAA7C;AAA6C;;AAG/C,QAAI,OAAO,SAAP,KAAqB,QAArB,IAAiC,SAAA,KAAc,IAAnD,EAAyD;AACvD,MAAA,MAAA,GAAS,SAAA,CAAU,MAAnB;AACA,MAAA,SAAA,GAAY,SAAA,CAAU,SAAtB;AAAsB;;AAGxB,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,kBAApB,CAAuC,SAAvC,EAAkD,MAAlD,EAA0D,eAA1D,CAAZ;AACA,IAAA,OAAA,GAAU,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAAc,MAAA,IAAA,EAAM,UAAA,CAAW;AAA/B,KAAA,CAAV;;AAEA,QAAI;AACF,YAAM,IAAA,GAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAnB;;AAMA,UAAI,CAAA,CAAE,OAAF,CAAU,IAAV,CAAJ,EAAqB;AACnB,cAAM,IAAI,KAAJ,CAAU,6BAA6B,SAAA,gFAAvC,CAAN;AAA6C;;AAG/C,aAAO,IAAP;AAAO,KAXT,CAWS,OACA,CADA,EACP;AACA,UAAI,CAAA,CAAE,QAAF,IAAc,CAAA,CAAE,QAAF,CAAW,IAAX,KAAoB,kBAAtC,EAA0D;AACxD,cAAM,IAAI,KAAJ,CAAU,6BAA6B,SAAA,gFAAvC,CAAN;AAA6C;;AAG/C,YAAM,CAAN;AAAM;AAAA;;AAoBJ,QAAA,SAAA,CAAU,KAAV,EAAiB,GAAjB,EAAsB,SAAtB,EAAiC,OAAjC,EAA0C;AAC9C,QAAI,CAAC,KAAD,IAAU,CAAC,GAAX,IAAkB,CAAC,SAAvB,EAAkC;AAChC,YAAM,IAAI,KAAJ,CAAU,oFAAV,CAAN;AAAgB;;AAGlB,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AACA,IAAA,SAAA,GAAY,KAAK,SAAL,CAAe,kBAAf,CAAkC,SAAlC,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,KAAK,cAAL,CAAoB,cAApB,CAAmC,KAAnC,EAA0C,GAA1C,EAA+C,SAA/C,CAArB,EAAgF,OAAhF,CAAb;AAA6F;;AAUzF,QAAA,YAAA,CAAa,SAAb,EAAwB,aAAxB,EAAuC,OAAvC,EAAgD;AACpD,WAAO,KAAK,SAAL,CAAe,KAAf,CAAqB,KAAK,cAAL,CAAoB,iBAApB,CAAsC,SAAtC,EAAiD,aAAjD,CAArB,EAAsF,OAAtF,CAAP;AAA6F;;AAG/F,EAAA,kBAAA,CAAmB,iBAAnB,EAAsC;AACpC,QAAI,SAAJ;;AACA,QAAI,MAAA,CAAO,MAAP,CAAc,SAAd,EAAyB,QAAzB,CAAkC,iBAAlC,CAAJ,EAA0D;AACxD,MAAA,SAAA,GAAY;AAAE,QAAA,IAAA,EAAM,iBAAR;AAA2B,QAAA,SAAA,EAAW;AAAtC,OAAZ;AAAkD,KADpD,MAEO;AACL,MAAA,SAAA,GAAY,iBAAZ;AAAY;;AAGd,WAAO,KAAK,SAAL,CAAe,kBAAf,CAAkC,SAAlC,CAAP;AAAyC;;AAW3C,EAAA,eAAA,CAAgB,WAAhB,EAA4B,KAA5B,EAAmC;AACjC,WAAO,KAAK,cAAL,CAAoB,eAApB,CAAoC,WAApC,EAAgD,KAAhD,CAAP;AAAuD;;AAUzD,EAAA,gBAAA,CAAiB,WAAjB,EAA8B;AAC5B,WAAO,KAAK,cAAL,CAAoB,gBAApB,CAAqC,WAArC,CAAP;AAA4C;;AAWxC,QAAA,YAAA,CAAa,SAAb,EAAwB,aAAxB,EAAuC,iBAAvC,EAA0D,OAA1D,EAAmE;AACvE,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AAEA,UAAM,KAAA,GAAQ,KAAK,cAAL,CAAoB,eAApB,CAAoC;AAAA,OAC/C,aAD+C,GAC/B,KAAK,kBAAL,CAAwB,iBAAxB;AAD+B,KAApC,EAEX;AACD,MAAA,OAAA,EAAS,cADR;AAED,MAAA,KAAA,EAAO;AAFN,KAFW,CAAd;AAMA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,iBAApB,CAAsC,SAAtC,EAAiD,KAAjD,CAAZ;AAEA,WAAO,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAP;AAAiC;;AAW7B,QAAA,oBAAA,CAAqB,SAArB,EAAgC,UAAhC,EAA4C,OAA5C,EAAqD;AACzD,UAAM,WAAA,GAAc,MAAM,KAAK,aAAL,CAAmB,SAAnB,EAA8B,OAA9B,CAA1B;;AACA,QAAI,WAAA,CAAY,UAAZ,CAAJ,EAA6B;AAC3B,aAAO,WAAP;AAAO;;AAET,UAAM,IAAI,KAAJ,CAAU,SAAS,SAAA,4BAAqC,UAAA,EAAxD,CAAN;AAA8D;;AAa1D,QAAA,YAAA,CAAa,SAAb,EAAwB,cAAxB,EAAwC,aAAxC,EAAuD,OAAvD,EAAgE;AACpE,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AACA,UAAM,IAAA,GAAQ,CAAA,MAAM,KAAK,oBAAL,CAA0B,SAA1B,EAAqC,cAArC,EAAqD,OAArD,CAAN,EAAqE,cAArE,CAAd;AAEA,UAAM,QAAA,GAAW,EAAjB;AAEA,IAAA,QAAA,CAAS,aAAT,CAAA,GAA0B;AACxB,MAAA,SAAA,EAAW,aADa;AAExB,MAAA,IAAA,EAAM,IAAA,CAAK,IAFa;AAGxB,MAAA,SAAA,EAAW,IAAA,CAAK,SAHQ;AAIxB,MAAA,YAAA,EAAc,IAAA,CAAK;AAJK,KAA1B;;AAQA,QAAI,IAAA,CAAK,YAAL,KAAsB,IAAtB,IAA8B,CAAC,IAAA,CAAK,SAAxC,EAAmD;AACjD,aAAO,QAAA,CAAS,aAAT,CAAA,CAAwB,YAA/B;AAA+B;;AAGjC,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,iBAApB,CACV,SADU,EAEV,cAFU,EAGV,KAAK,cAAL,CAAoB,eAApB,CAAoC,QAApC,CAHU,CAAZ;AAKA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAqBnC,QAAA,QAAA,CAAS,SAAT,EAAoB,UAApB,EAAgC,OAAhC,EAAyC,YAAzC,EAAuD;AAE3D,QAAI,CAAC,KAAA,CAAM,OAAN,CAAc,UAAd,CAAL,EAAgC;AAC9B,MAAA,YAAA,GAAe,OAAf;AACA,MAAA,OAAA,GAAU,UAAV;AACA,MAAA,UAAA,GAAa,OAAA,CAAQ,MAArB;AAAqB;;AAGvB,QAAI,CAAC,YAAL,EAAmB;AAEjB,MAAA,YAAA,GAAe,SAAf;AAAe;;AAGjB,IAAA,OAAA,GAAU,KAAA,CAAM,SAAN,CAAgB,OAAhB,CAAV;AACA,IAAA,OAAA,CAAQ,MAAR,GAAiB,UAAjB;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,aAApB,CAAkC,SAAlC,EAA6C,OAA7C,EAAsD,YAAtD,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAAc,MAAA,kBAAA,EAAoB;AAAlC,KAAA,CAA1B,CAAb;AAAyE;;AAYrE,QAAA,SAAA,CAAU,SAAV,EAAqB,OAArB,EAA8B;AAClC,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,gBAApB,CAAqC,SAArC,EAAgD,OAAhD,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAAc,MAAA,IAAA,EAAM,UAAA,CAAW;AAA/B,KAAA,CAA1B,CAAb;AAAsE;;AAYlE,QAAA,uBAAA,CAAwB,UAAxB,EAAoC,OAApC,EAA6C;AACjD,QAAI,UAAA,CAAW,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAO,EAAP;AAAO;;AAGT,IAAA,OAAA,GAAU,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAAc,MAAA,IAAA,EAAM,UAAA,CAAW;AAA/B,KAAA,CAAV;AAEA,UAAM,OAAA,GAAU,MAAM,OAAA,CAAQ,GAAR,CAAY,UAAA,CAAW,GAAX,CAAe,SAAA,IAC/C,KAAK,SAAL,CAAe,KAAf,CAAqB,KAAK,cAAL,CAAoB,mBAApB,CAAwC,SAAxC,EAAmD,KAAK,SAAL,CAAe,MAAf,CAAsB,QAAzE,CAArB,EAAyG,OAAzG,CADgC,CAAZ,CAAtB;AAGA,UAAM,MAAA,GAAS,EAAf;AAEA,IAAA,UAAA,CAAW,OAAX,CAAmB,CAAC,SAAD,EAAY,CAAZ,KAAkB;AACnC,UAAI,CAAA,CAAE,QAAF,CAAW,SAAX,CAAJ,EAA2B;AACzB,QAAA,SAAA,GAAY,GAAG,SAAA,CAAU,MAAA,IAAU,SAAA,CAAU,SAAA,EAA7C;AAA6C;;AAG/C,MAAA,MAAA,CAAO,SAAP,CAAA,GAAoB,KAAA,CAAM,OAAN,CAAc,OAAA,CAAQ,CAAR,CAAd,IAChB,OAAA,CAAQ,CAAR,CAAA,CAAW,GAAX,CAAe,CAAA,IAAK,CAAA,CAAE,eAAtB,CADgB,GAEhB,CAAC,OAAA,CAAQ,CAAR,CAAA,IAAc,OAAA,CAAQ,CAAR,CAAA,CAAW,eAA1B,CAFJ;AAIA,MAAA,MAAA,CAAO,SAAP,CAAA,GAAoB,MAAA,CAAO,SAAP,CAAA,CAAkB,MAAlB,CAAyB,CAAA,CAAE,QAA3B,CAApB;AAA+C,KATjD;AAYA,WAAO,MAAP;AAAO;;AAcH,QAAA,+BAAA,CAAgC,SAAhC,EAA2C,OAA3C,EAAoD;AACxD,UAAM,YAAA,GAAe,aAAA,CAAA,cAAA,CAAA,EAAA,EAChB,OADgB,CAAA,EAAA;AAEnB,MAAA,IAAA,EAAM,UAAA,CAAW;AAFE,KAAA,CAArB;;AAIA,UAAM,KAAA,GAAQ,KAAK,cAAL,CAAoB,mBAApB,CAAwC,SAAxC,EAAmD,KAAK,SAAL,CAAe,MAAf,CAAsB,QAAzE,CAAd;AACA,WAAO,KAAK,SAAL,CAAe,KAAf,CAAqB,KAArB,EAA4B,YAA5B,CAAP;AAAmC;;AAa/B,QAAA,WAAA,CAAY,SAAZ,EAAuB,qBAAvB,EAA8C,OAA9C,EAAuD;AAC3D,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,gBAApB,CAAqC,SAArC,EAAgD,qBAAhD,EAAuE,OAAvE,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAoFnC,QAAA,aAAA,CAAc,SAAd,EAAyB,OAAzB,EAAkC;AACtC,QAAI,CAAC,OAAA,CAAQ,MAAb,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AAAgB;;AAGlB,QAAI,CAAC,OAAA,CAAQ,IAAb,EAAmB;AACjB,YAAM,IAAI,KAAJ,CAAU,wDAAV,CAAN;AAAgB;;AAGlB,IAAA,OAAA,GAAU,KAAA,CAAM,SAAN,CAAgB,OAAhB,CAAV;AAEA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,kBAApB,CAAuC,SAAvC,EAAkD,OAAlD,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAGnC,QAAA,cAAA,CAAe,SAAf,EAA0B,cAA1B,EAA0C,OAA1C,EAAmD;AACvD,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,oBAApB,CAAyC,SAAzC,EAAoD,cAApD,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAAc,MAAA,IAAA,EAAM,UAAA,CAAW;AAA/B,KAAA,CAA1B,CAAb;AAAsE;;AAUlE,QAAA,gBAAA,CAAiB,SAAjB,EAA4B,cAA5B,EAA4C,OAA5C,EAAqD;AACzD,WAAO,KAAK,SAAL,CAAe,KAAf,CAAqB,KAAK,cAAL,CAAoB,qBAApB,CAA0C,SAA1C,EAAqD,cAArD,CAArB,EAA2F,OAA3F,CAAP;AAAkG;;AAG9F,QAAA,MAAA,CAAO,QAAP,EAAiB,SAAjB,EAA4B,MAA5B,EAAoC,OAApC,EAA6C;AACjD,IAAA,OAAA,GAAU,KAAA,CAAM,SAAN,CAAgB,OAAhB,CAAV;AACA,IAAA,OAAA,CAAQ,UAAR,GAAqB,QAAA,IAAY,QAAA,CAAS,WAAT,CAAqB,OAArB,CAA6B,UAA9D;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,MAA3C,EAAmD,QAAA,IAAY,QAAA,CAAS,WAAT,CAAqB,aAApF,EAAmG,OAAnG,CAAZ;AAEA,IAAA,OAAA,CAAQ,IAAR,GAAe,UAAA,CAAW,MAA1B;AACA,IAAA,OAAA,CAAQ,QAAR,GAAmB,QAAnB;AAEA,UAAM,OAAA,GAAU,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAtB;AACA,QAAI,QAAJ,EAAc,OAAA,CAAQ,CAAR,CAAA,CAAW,WAAX,GAAyB,KAAzB;AAEd,WAAO,OAAP;AAAO;;AAcH,QAAA,MAAA,CAAO,SAAP,EAAkB,YAAlB,EAAgC,YAAhC,EAA8C,KAA9C,EAAqD,OAArD,EAA8D;AAClE,IAAA,OAAA,GAAU,cAAA,CAAA,EAAA,EAAK,OAAL,CAAV;AAEA,UAAM,KAAA,GAAQ,OAAA,CAAQ,KAAtB;AAEA,IAAA,OAAA,CAAQ,IAAR,GAAe,UAAA,CAAW,MAA1B;AACA,IAAA,OAAA,CAAQ,iBAAR,GAA4B,MAAA,CAAO,IAAP,CAAY,YAAZ,CAA5B;AACA,IAAA,OAAA,CAAQ,UAAR,GAAqB,OAAA,CAAQ,cAAR,IAA0B,EAA/C;;AAEA,QAAI,OAAA,CAAQ,UAAR,CAAmB,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,YAAM,WAAA,GAAc,MAAA,CAAO,MAAP,CAAc,KAAA,CAAM,WAApB,EAAiC,GAAjC,CAAqC,IAAA,IAAQ,IAAA,CAAK,KAAlD,CAApB;AACA,YAAM,UAAA,GAAa,MAAA,CAAO,MAAP,CAAc,KAAA,CAAM,UAApB,EAAgC,MAAhC,CAAuC,CAAA,IAAK,CAAA,CAAE,MAAF,CAAS,MAAT,GAAkB,CAA9D,EAAiE,GAAjE,CAAqE,CAAA,IAAK,CAAA,CAAE,MAA5E,CAAnB;AACA,YAAM,SAAA,GAAY,MAAA,CAAO,MAAP,CAAc,KAAA,CAAM,QAApB,EAA8B,MAA9B,CAAqC,CAAA,IAAK,CAAA,CAAE,MAAF,IAAY,CAAA,CAAE,MAAF,CAAS,MAAT,GAAkB,CAAxE,EAA2E,GAA3E,CAA+E,CAAA,IAAK,CAAA,CAAE,MAAtF,CAAlB;;AAGA,WAAA,MAAW,KAAX,IAAoB,OAAA,CAAQ,iBAA5B,EAA+C;AAC7C,cAAM,SAAA,GAAY,UAAA,CAAW,IAAX,CAAgB,MAAA,IAAU,MAAA,CAAO,QAAP,CAAgB,KAAhB,CAA1B,CAAlB;;AACA,YAAI,SAAJ,EAAe;AACb,UAAA,OAAA,CAAQ,UAAR,GAAqB,SAArB;AACA;AAAA;;AAGF,cAAM,QAAA,GAAW,SAAA,CAAU,IAAV,CAAe,MAAA,IAAU,MAAA,CAAO,QAAP,CAAgB,KAAhB,CAAzB,CAAjB;;AACA,YAAI,QAAJ,EAAc;AACZ,UAAA,OAAA,CAAQ,UAAR,GAAqB,QAArB;AACA;AAAA;AAAA;;AAKJ,UACE,OAAA,CAAQ,UAAR,CAAmB,MAAnB,KAA8B,CAA9B,IACG,CAAA,CAAE,YAAF,CAAe,OAAA,CAAQ,iBAAvB,EAA0C,WAA1C,EAAuD,MAF5D,EAGE;AACA,QAAA,OAAA,CAAQ,UAAR,GAAqB,WAArB;AAAqB;;AAGvB,MAAA,OAAA,CAAQ,UAAR,GAAqB,CAAA,CAAE,IAAF,CAAO,OAAA,CAAQ,UAAf,CAArB;AAAoC;;AAGtC,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,YAA3C,EAAyD,KAAA,CAAM,aAA/D,EAA8E,OAA9E,CAAZ;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAwBnC,QAAA,UAAA,CAAW,SAAX,EAAsB,OAAtB,EAA+B,OAA/B,EAAwC,UAAxC,EAAoD;AACxD,IAAA,OAAA,GAAU,cAAA,CAAA,EAAA,EAAK,OAAL,CAAV;AACA,IAAA,OAAA,CAAQ,IAAR,GAAe,UAAA,CAAW,MAA1B;AAEA,UAAM,OAAA,GAAU,MAAM,KAAK,SAAL,CAAe,KAAf,CACpB,KAAK,cAAL,CAAoB,eAApB,CAAoC,SAApC,EAA+C,OAA/C,EAAwD,OAAxD,EAAiE,UAAjE,CADoB,EAEpB,OAFoB,CAAtB;AAKA,WAAO,OAAA,CAAQ,CAAR,CAAP;AAAe;;AAGX,QAAA,MAAA,CAAO,QAAP,EAAiB,SAAjB,EAA4B,MAA5B,EAAoC,WAApC,EAAgD,OAAhD,EAAyD;AAC7D,IAAA,OAAA,GAAU,cAAA,CAAA,EAAA,EAAK,OAAL,CAAV;AACA,IAAA,OAAA,CAAQ,UAAR,GAAqB,QAAA,IAAY,QAAA,CAAS,WAAT,CAAqB,OAArB,CAA6B,UAA9D;AAEA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,MAA3C,EAAmD,WAAnD,EAA+D,OAA/D,EAAwE,QAAA,CAAS,WAAT,CAAqB,aAA7F,CAAZ;AAEA,IAAA,OAAA,CAAQ,IAAR,GAAe,UAAA,CAAW,MAA1B;AAEA,IAAA,OAAA,CAAQ,QAAR,GAAmB,QAAnB;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAsBnC,QAAA,UAAA,CAAW,SAAX,EAAsB,MAAtB,EAA8B,WAA9B,EAA0C,OAA1C,EAAmD,UAAnD,EAA+D;AACnE,IAAA,OAAA,GAAU,KAAA,CAAM,SAAN,CAAgB,OAAhB,CAAV;AACA,QAAI,OAAO,WAAP,KAAsB,QAA1B,EAAoC,WAAA,GAAa,KAAA,CAAM,SAAN,CAAgB,WAAhB,CAAb;AAEpC,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,MAA3C,EAAmD,WAAnD,EAA+D,OAA/D,EAAwE,UAAxE,CAAZ;AACA,UAAM,KAAA,GAAQ,CAAA,CAAE,QAAF,CAAW,SAAX,IAAwB,SAAxB,GAAoC;AAAE,MAAA;AAAF,KAAlD;;AACA,UAAM,KAAA,GAAQ,CAAA,CAAE,IAAF,CAAO,KAAK,SAAL,CAAe,YAAf,CAA4B,MAAnC,EAA2C;AAAE,MAAA,SAAA,EAAW,KAAA,CAAM;AAAnB,KAA3C,CAAd;;AAEA,IAAA,OAAA,CAAQ,IAAR,GAAe,UAAA,CAAW,UAA1B;AACA,IAAA,OAAA,CAAQ,KAAR,GAAgB,KAAhB;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAGnC,QAAA,MAAA,CAAO,QAAP,EAAiB,SAAjB,EAA4B,WAA5B,EAAwC,OAAxC,EAAiD;AACrD,UAAM,QAAA,GAAW,EAAjB;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,WAA3C,EAAuD,EAAvD,EAA2D,QAAA,CAAS,WAApE,CAAZ;AAEA,IAAA,OAAA,GAAU,cAAA,CAAA,EAAA,EAAK,OAAL,CAAV;;AAGA,QAAI,CAAC,CAAC,QAAA,CAAS,WAAX,IAA0B,CAAC,CAAC,QAAA,CAAS,WAAT,CAAqB,YAArD,EAAmE;AACjE,YAAM,IAAA,GAAO,MAAA,CAAO,IAAP,CAAY,QAAA,CAAS,WAAT,CAAqB,YAAjC,CAAb;AACA,YAAM,MAAA,GAAS,IAAA,CAAK,MAApB;AACA,UAAI,WAAJ;;AAEA,WAAA,IAAS,CAAA,GAAI,CAAb,EAAgB,CAAA,GAAI,MAApB,EAA4B,CAAA,EAA5B,EAAiC;AAC/B,QAAA,WAAA,GAAc,QAAA,CAAS,WAAT,CAAqB,YAArB,CAAkC,IAAA,CAAK,CAAL,CAAlC,CAAd;;AACA,YAAI,WAAA,CAAY,OAAZ,IAAuB,WAAA,CAAY,OAAZ,CAAoB,QAA3C,IACF,WAAA,CAAY,OAAZ,CAAoB,QAApB,CAA6B,WAA7B,OAA+C,SAD7C,IAEF,WAAA,CAAY,OAAZ,CAAoB,QAApB,KAAiC,IAFnC,EAEyC;AACvC,UAAA,QAAA,CAAS,IAAT,CAAc,WAAA,CAAY,SAAZ,CAAsB,GAApC;AAAoC;AAAA;AAAA;;AAK1C,SAAA,MAAW,OAAX,IAAsB,QAAtB,EAAgC;AAC9B,UAAI,SAAA,GAAY,MAAM,QAAA,CAAS,OAAT,CAAA,CAAkB,OAAlB,CAAtB;AAEA,UAAI,CAAC,SAAL,EAAgB;AAChB,UAAI,CAAC,KAAA,CAAM,OAAN,CAAc,SAAd,CAAL,EAA+B,SAAA,GAAY,CAAC,SAAD,CAAZ;;AAC/B,WAAA,MAAW,SAAX,IAAwB,SAAxB,EAAmC,MAAM,SAAA,CAAU,OAAV,CAAkB,OAAlB,CAAN;AAAwB;;AAE7D,IAAA,OAAA,CAAQ,QAAR,GAAmB,QAAnB;AACA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAgBnC,QAAA,UAAA,CAAW,SAAX,EAAsB,KAAtB,EAA6B,OAA7B,EAAsC,KAAtC,EAA6C;AACjD,IAAA,OAAA,GAAU,KAAA,CAAM,SAAN,CAAgB,OAAhB,CAAV;AACA,IAAA,OAAA,GAAU,CAAA,CAAE,QAAF,CAAW,OAAX,EAAoB;AAAE,MAAA,KAAA,EAAO;AAAT,KAApB,CAAV;;AAEA,QAAI,OAAA,CAAQ,QAAR,KAAqB,IAAzB,EAA+B;AAC7B,aAAO,KAAK,SAAL,CAAe,KAAf,CACL,KAAK,cAAL,CAAoB,kBAApB,CAAuC,SAAvC,EAAkD,OAAlD,CADK,EAEL,OAFK,CAAP;AAEE;;AAIJ,QAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC,KAAA,GAAQ,KAAA,CAAM,SAAN,CAAgB,KAAhB,CAAR;AAEpC,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CACX,KAAK,cAAL,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,KAA3C,EAAkD,OAAlD,EAA2D,KAA3D,CADW,EAEX,OAFW,CAAb;AAEE;;AAIE,QAAA,MAAA,CAAO,KAAP,EAAc,SAAd,EAAyB,UAAzB,EAAqC;AACzC,UAAM,OAAA,GAAU,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,UAAL,CAAA,EAAA;AAAiB,MAAA,IAAA,EAAM,UAAA,CAAW,MAAlC;AAA0C,MAAA;AAA1C,KAAA,CAAhB;;AAEA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CACX,KAAK,cAAL,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,OAA3C,EAAoD,KAApD,CADW,EAEX,OAFW,CAAb;AAEE;;AAIE,QAAA,SAAA,CAAU,KAAV,EAAiB,SAAjB,EAA4B,KAA5B,EAAmC,uBAAnC,EAA4D,0BAA5D,EAAwF,OAAxF,EAAiG;AACrG,IAAA,OAAA,GAAU,KAAA,CAAM,SAAN,CAAgB,OAAhB,CAAV;AAEA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,eAApB,CAAoC,GAApC,EAAyC,SAAzC,EAAoD,KAApD,EAA2D,uBAA3D,EAAoF,0BAApF,EAAgH,OAAhH,CAAZ;AAEA,IAAA,OAAA,CAAQ,IAAR,GAAe,UAAA,CAAW,MAA1B;AACA,IAAA,OAAA,CAAQ,KAAR,GAAgB,KAAhB;AAEA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAGnC,QAAA,SAAA,CAAU,KAAV,EAAiB,SAAjB,EAA4B,KAA5B,EAAmC,uBAAnC,EAA4D,0BAA5D,EAAwF,OAAxF,EAAiG;AACrG,IAAA,OAAA,GAAU,KAAA,CAAM,SAAN,CAAgB,OAAhB,CAAV;AAEA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,eAApB,CAAoC,GAApC,EAAyC,SAAzC,EAAoD,KAApD,EAA2D,uBAA3D,EAAoF,0BAApF,EAAgH,OAAhH,CAAZ;AAEA,IAAA,OAAA,CAAQ,IAAR,GAAe,UAAA,CAAW,MAA1B;AACA,IAAA,OAAA,CAAQ,KAAR,GAAgB,KAAhB;AAEA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAGnC,QAAA,SAAA,CAAU,SAAV,EAAqB,OAArB,EAA8B,iBAA9B,EAAiD,KAAjD,EAAwD;AAC5D,IAAA,OAAA,GAAU,KAAA,CAAM,SAAN,CAAgB,OAAhB,CAAV;AACA,IAAA,OAAA,GAAU,CAAA,CAAE,QAAF,CAAW,OAAX,EAAoB;AAC5B,MAAA,GAAA,EAAK,IADuB;AAE5B,MAAA,KAAA,EAAO,IAFqB;AAG5B,MAAA,IAAA,EAAM,UAAA,CAAW;AAHW,KAApB,CAAV;AAMA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,OAA3C,EAAoD,KAApD,CAAZ;;AAEA,QAAI,iBAAA,KAAsB,KAAA,CAA1B,EAAqC;AACnC,YAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AAAgB;;AAGlB,UAAM,IAAA,GAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAnB;;AACA,QAAI,CAAC,OAAA,CAAQ,KAAb,EAAoB;AAClB,aAAO,IAAP;AAAO;;AAGT,UAAM,MAAA,GAAS,IAAA,GAAO,IAAA,CAAK,iBAAL,CAAP,GAAiC,IAAhD;;AAEA,QAAI,CAAC,OAAD,IAAY,CAAC,OAAA,CAAQ,QAAzB,EAAmC;AACjC,aAAO,MAAP;AAAO;;AAGT,UAAM,QAAA,GAAW,OAAA,CAAQ,QAAzB;;AAEA,QAAI,QAAA,YAAoB,SAAA,CAAU,OAA9B,IAAyC,QAAA,YAAoB,SAAA,CAAU,KAA3E,EAAkF;AAChF,UAAI,MAAA,KAAW,IAAf,EAAqB;AACnB,eAAO,UAAA,CAAW,MAAX,CAAP;AAAkB;AAAA;;AAGtB,QAAI,QAAA,YAAoB,SAAA,CAAU,OAA9B,IAAyC,QAAA,YAAoB,SAAA,CAAU,MAA3E,EAAmF;AACjF,UAAI,MAAA,KAAW,IAAf,EAAqB;AACnB,eAAO,QAAA,CAAS,MAAT,EAAiB,EAAjB,CAAP;AAAwB;AAAA;;AAG5B,QAAI,QAAA,YAAoB,SAAA,CAAU,IAAlC,EAAwC;AACtC,UAAI,MAAA,KAAW,IAAX,IAAmB,EAAE,MAAA,YAAkB,IAApB,CAAvB,EAAkD;AAChD,eAAO,IAAI,IAAJ,CAAS,MAAT,CAAP;AAAgB;AAAA;;AAGpB,WAAO,MAAP;AAAO;;AAGH,QAAA,aAAA,CACJ,SADI,EAEJ,WAFI,EAGJ,UAHI,EAIJ,WAJI,EAKJ,YALI,EAMJ,cANI,EAOJ,YAPI,EAQJ,OARI,EASJ;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,aAApB,CAAkC,SAAlC,EAA6C,WAA7C,EAA0D,UAA1D,EAAsE,WAAtE,EAAmF,YAAnF,EAAiG,cAAjG,EAAiH,YAAjH,CAAZ;AACA,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;;AACA,QAAI,GAAJ,EAAS;AACP,aAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;AAAA;;AAIrC,QAAA,WAAA,CAAY,SAAZ,EAAuB,WAAvB,EAAoC,OAApC,EAA6C;AACjD,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,WAA3C,CAAZ;AACA,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;;AAEA,QAAI,GAAJ,EAAS;AACP,aAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;AAAA;;AAIrC,QAAA,aAAA,CAAc,SAAd,EAAyB,cAAzB,EAAyC,cAAzC,EAAyD,OAAzD,EAAkE;AACtE,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,aAApB,CAAkC,SAAlC,EAA6C,cAA7C,EAA6D,cAA7D,CAAZ;AACA,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;;AAEA,QAAI,GAAJ,EAAS;AACP,aAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;AAAA;;AAyCrC,QAAA,cAAA,CAAe,YAAf,EAA6B,MAA7B,EAAqC,UAArC,EAAiD,QAAjD,EAA2D,IAA3D,EAAiE,YAAjE,EAA+E,OAA/E,EAAwF;AAC5F,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,cAApB,CAAmC,YAAnC,EAAiD,MAAjD,EAAyD,UAAzD,EAAqE,QAArE,EAA+E,IAA/E,EAAqF,YAArF,EAAmG,OAAnG,CAAZ;AACA,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;;AAEA,QAAI,GAAJ,EAAS;AACP,aAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;AAAA;;AAsBrC,QAAA,YAAA,CAAa,YAAb,EAA2B,MAA3B,EAAmC,OAAnC,EAA4C;AAChD,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,YAApB,CAAiC,YAAjC,EAA+C,MAA/C,CAAZ;AACA,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;;AAEA,QAAI,GAAJ,EAAS;AACP,aAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;AAAA;;AAwBrC,QAAA,cAAA,CAAe,eAAf,EAAgC,MAAhC,EAAwC,eAAxC,EAAyD,OAAzD,EAAkE;AACtE,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,cAApB,CAAmC,eAAnC,EAAoD,MAApD,EAA4D,eAA5D,CAAZ;AACA,IAAA,OAAA,GAAU,OAAA,IAAW,EAArB;;AAEA,QAAI,GAAJ,EAAS;AACP,aAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;AAAA;;AAS3C,EAAA,WAAA,GAAc,CAAA;;AAIR,QAAA,iBAAA,CAAkB,WAAlB,EAA+B,KAA/B,EAAsC,OAAtC,EAA+C;AACnD,QAAI,CAAC,WAAD,IAAgB,EAAE,WAAA,YAAuB,WAAzB,CAApB,EAA2D;AACzD,YAAM,IAAI,KAAJ,CAAU,6EAAV,CAAN;AAAgB;;AAGlB,QAAI,WAAA,CAAY,MAAZ,IAAsB,CAAC,KAA3B,EAAkC;AAEhC;AAAA;;AAGF,IAAA,OAAA,GAAU,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAAc,MAAA,WAAA,EAAa,WAAA,CAAY,MAAZ,IAAsB;AAAjD,KAAA,CAAV;AAEA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,sBAApB,CAA2C,KAA3C,EAAkD;AAC5D,MAAA,MAAA,EAAQ,WAAA,CAAY;AADwC,KAAlD,CAAZ;AAIA,QAAI,CAAC,GAAL,EAAU;AAEV,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAGnC,QAAA,gBAAA,CAAiB,WAAjB,EAA8B,OAA9B,EAAuC;AAC3C,QAAI,CAAC,WAAD,IAAgB,EAAE,WAAA,YAAuB,WAAzB,CAApB,EAA2D;AACzD,YAAM,IAAI,KAAJ,CAAU,2DAAV,CAAN;AAAgB;;AAGlB,IAAA,OAAA,GAAU,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAAc,MAAA,WAAA,EAAa,WAAA,CAAY,MAAZ,IAAsB;AAAjD,KAAA,CAAV;AACA,IAAA,OAAA,CAAQ,WAAR,CAAoB,IAApB,GAA2B,WAAA,CAAY,MAAZ,GAAqB,WAAA,CAAY,IAAjC,GAAwC,KAAA,CAAnE;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,qBAApB,CAA0C,WAA1C,CAAZ;AAEA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;;AAGnC,QAAA,gBAAA,CAAiB,WAAjB,EAA8B,OAA9B,EAAuC;AAC3C,IAAA,OAAA,GAAU,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,OAAL,CAAA,EAAA;AAAc,MAAA,WAAA,EAAa,WAAA,CAAY,MAAZ,IAAsB;AAAjD,KAAA,CAAV;AAEA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,qBAApB,CAA0C,OAA1C,CAAZ;;AAEA,QAAI,GAAJ,EAAS;AACP,aAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAb;AAAuC;AAAA;;AAIrC,QAAA,iBAAA,CAAkB,WAAlB,EAA+B,OAA/B,EAAwC;AAC5C,QAAI,CAAC,WAAD,IAAgB,EAAE,WAAA,YAAuB,WAAzB,CAApB,EAA2D;AACzD,YAAM,IAAI,KAAJ,CAAU,4DAAV,CAAN;AAAgB;;AAElB,QAAI,WAAA,CAAY,MAAhB,EAAwB;AAEtB;AAAA;;AAGF,IAAA,OAAA,GAAU,aAAA,CAAA,cAAA,CAAA,EAAA,EACL,OADK,CAAA,EAAA;AAER,MAAA,WAAA,EAAa,WAAA,CAAY,MAAZ,IAAsB,WAF3B;AAGR,MAAA,kBAAA,EAAoB,KAHZ;AAIR,MAAA,oBAAA,EAAsB;AAJd,KAAA,CAAV;AAOA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,sBAApB,CAA2C,WAA3C,CAAZ;AACA,UAAM,OAAA,GAAU,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAhB;AAEA,IAAA,WAAA,CAAY,QAAZ,GAAuB,QAAvB;AAEA,WAAO,MAAM,OAAb;AAAa;;AAGT,QAAA,mBAAA,CAAoB,WAApB,EAAiC,OAAjC,EAA0C;AAC9C,QAAI,CAAC,WAAD,IAAgB,EAAE,WAAA,YAAuB,WAAzB,CAApB,EAA2D;AACzD,YAAM,IAAI,KAAJ,CAAU,8DAAV,CAAN;AAAgB;;AAGlB,IAAA,OAAA,GAAU,aAAA,CAAA,cAAA,CAAA,EAAA,EACL,OADK,CAAA,EAAA;AAER,MAAA,WAAA,EAAa,WAAA,CAAY,MAAZ,IAAsB,WAF3B;AAGR,MAAA,kBAAA,EAAoB,KAHZ;AAIR,MAAA,oBAAA,EAAsB;AAJd,KAAA,CAAV;AAMA,IAAA,OAAA,CAAQ,WAAR,CAAoB,IAApB,GAA2B,WAAA,CAAY,MAAZ,GAAqB,WAAA,CAAY,IAAjC,GAAwC,KAAA,CAAnE;AACA,UAAM,GAAA,GAAM,KAAK,cAAL,CAAoB,wBAApB,CAA6C,WAA7C,CAAZ;AACA,UAAM,OAAA,GAAU,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAhB;AAEA,IAAA,WAAA,CAAY,QAAZ,GAAuB,UAAvB;AAEA,WAAO,MAAM,OAAb;AAAa;;AArvCI;;AAyvCrB,OAAA,CAAQ,cAAR,GAAyB,cAAzB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst Transaction = require('../../transaction');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk to all databases\n */\nclass QueryInterface {\n  constructor(sequelize, queryGenerator) {\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n  }\n\n  /**\n   * Create a database\n   *\n   * @param {string} database  Database name to create\n   * @param {object} [options] Query options\n   * @param {string} [options.charset] Database default character set, MYSQL only\n   * @param {string} [options.collate] Database default collation\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\n   *\n   * @returns {Promise}\n   */\n  async createDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a database\n   *\n   * @param {string} database  Database name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Create a schema\n   *\n   * @param {string} schema    Schema name to create\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async createSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a schema\n   *\n   * @param {string} schema    Schema name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.queryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n    const schemas = await this.showAllSchemas(options);\n    return Promise.all(schemas.map(schemaName => this.dropSchema(schemaName, options)));\n  }\n\n  /**\n   * Show all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<Array>}\n   */\n  async showAllSchemas(options) {\n    options = {\n      ...options,\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    };\n\n    const showSchemasSql = this.queryGenerator.showSchemasQuery(options);\n\n    const schemaNames = await this.sequelize.query(showSchemasSql, options);\n\n    return _.flatten(schemaNames.map(value => value.schema_name ? value.schema_name : value));\n  }\n\n  /**\n   * Return database version\n   *\n   * @param {object}    [options]      Query options\n   * @param {QueryType} [options.type] Query type\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async databaseVersion(options) {\n    return await this.sequelize.query(\n      this.queryGenerator.versionQuery(),\n      { ...options, type: QueryTypes.VERSION }\n    );\n  }\n\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: Sequelize.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     updatedAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     attr1: Sequelize.STRING,\n   *     attr2: Sequelize.INTEGER,\n   *     attr3: {\n   *       type: Sequelize.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: Sequelize.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public',    // default: public, PostgreSQL only.\n   *     comment: 'my table', // comment for table\n   *     collate: 'latin1_danish_ci' // collation, MYSQL only\n   *   }\n   * )\n   * ```\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of table attributes to create\n   * @param {object} [options] create table and query options\n   * @param {Model}  [model] model class\n   *\n   * @returns {Promise}\n   */\n  async createTable(tableName, attributes, options, model) {\n    let sql = '';\n\n    options = { ...options };\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === undefined) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = _.mapValues(\n      attributes,\n      attribute => this.sequelize.normalizeAttribute(attribute)\n    );\n\n    // Postgres requires special SQL commands for ENUM/ENUM[]\n    await this.ensureEnums(tableName, attributes, options, model);\n\n    if (\n      !tableName.schema &&\n      (options.schema || !!model && model._schema)\n    ) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: 'createTable' });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a table from database\n   *\n   * @param {string} tableName Table name to drop\n   * @param {object} options   Query options\n   *\n   * @returns {Promise}\n   */\n  async dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = { ...options };\n    options.cascade = options.cascade || options.force || false;\n\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n\n    await this.sequelize.query(sql, options);\n  }\n\n  async _dropAllTables(tableNames, skip, options) {\n    for (const tableName of tableNames) {\n      // if tableName is not in the Array of tables names then don't drop it\n      if (!skip.includes(tableName.tableName || tableName)) {\n        await this.dropTable(tableName, { ...options, cascade: true } );\n      }\n    }\n  }\n\n  /**\n   * Drop all tables from database\n   *\n   * @param {object} [options] query options\n   * @param {Array}  [options.skip] List of table to skip\n   *\n   * @returns {Promise}\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    const foreignKeys = await this.getForeignKeysForTables(tableNames, options);\n\n    for (const tableName of tableNames) {\n      let normalizedTableName = tableName;\n      if (_.isObject(tableName)) {\n        normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      for (const foreignKey of foreignKeys[normalizedTableName]) {\n        await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n      }\n    }\n    await this._dropAllTables(tableNames, skip, options);\n  }\n\n  /**\n   * Rename a table\n   *\n   * @param {string} before    Current name of table\n   * @param {string} after     New name from table\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.queryGenerator.renameTableQuery(before, after);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Get all tables in current database\n   *\n   * @param {object}    [options] Query options\n   * @param {boolean}   [options.raw=true] Run query in raw mode\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showAllTables(options) {\n    options = {\n      ...options,\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    };\n\n    const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);\n    const tableNames = await this.sequelize.query(showTablesSql, options);\n    return _.flatten(tableNames);\n  }\n\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param {string} tableName table name\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<object>}\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n\n  /**\n   * Add a new column to a table\n   *\n   * ```js\n   * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\n   *    after: 'columnB' // after option is only supported by MySQL\n   * });\n   * ```\n   *\n   * @param {string} table     Table to add column to\n   * @param {string} key       Column name\n   * @param {object} attribute Attribute definition\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes at least 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return await this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n\n  /**\n   * Remove a column from a table\n   *\n   * @param {string} tableName      Table to remove column from\n   * @param {string} attributeName  Column name to remove\n   * @param {object} [options]      Query options\n   */\n  async removeColumn(tableName, attributeName, options) {\n    return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options);\n  }\n\n  normalizeAttribute(dataTypeOrOptions) {\n    let attribute;\n    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n      attribute = { type: dataTypeOrOptions, allowNull: true };\n    } else {\n      attribute = dataTypeOrOptions;\n    }\n\n    return this.sequelize.normalizeAttribute(attribute);\n  }\n\n  /**\n   * Split a list of identifiers by \".\" and quote each part\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return this.queryGenerator.quoteIdentifier(identifier, force);\n  }\n\n  /**\n   * Split a list of identifiers by \".\" and quote each part.\n   *\n   * @param {string} identifiers \n   * \n   * @returns {string}\n   */\n  quoteIdentifiers(identifiers) {\n    return this.queryGenerator.quoteIdentifiers(identifiers);\n  }\n\n  /**\n   * Change a column definition\n   *\n   * @param {string} tableName          Table name to change from\n   * @param {string} attributeName      Column name\n   * @param {object} dataTypeOrOptions  Attribute definition for new column\n   * @param {object} [options]          Query options\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const query = this.queryGenerator.attributesToSQL({\n      [attributeName]: this.normalizeAttribute(dataTypeOrOptions)\n    }, {\n      context: 'changeColumn',\n      table: tableName\n    });\n    const sql = this.queryGenerator.changeColumnQuery(tableName, query);\n\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Rejects if the table doesn't have the specified column, otherwise returns the column description.\n   *\n   * @param {string} tableName\n   * @param {string} columnName\n   * @param {object} options\n   * @private\n   */\n  async assertTableHasColumn(tableName, columnName, options) {\n    const description = await this.describeTable(tableName, options);\n    if (description[columnName]) {\n      return description;\n    }\n    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);\n  }\n\n  /**\n   * Rename a column\n   *\n   * @param {string} tableName        Table name whose column to rename\n   * @param {string} attrNameBefore   Current column name\n   * @param {string} attrNameAfter    New column name\n   * @param {object} [options]        Query option\n   *\n   * @returns {Promise}\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];\n\n    const _options = {};\n\n    _options[attrNameAfter] = {\n      attribute: attrNameAfter,\n      type: data.type,\n      allowNull: data.allowNull,\n      defaultValue: data.defaultValue\n    };\n\n    // fix: a not-null column cannot have null as default value\n    if (data.defaultValue === null && !data.allowNull) {\n      delete _options[attrNameAfter].defaultValue;\n    }\n\n    const sql = this.queryGenerator.renameColumnQuery(\n      tableName,\n      attrNameBefore,\n      this.queryGenerator.attributesToSQL(_options)\n    );\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add an index to a column\n   *\n   * @param {string|object}  tableName Table name to add index on, can be a object with schema\n   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\n   * @param {object}  options          indexes options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created\n   * @param {boolean} [options.unique] Create a unique index\n   * @param {string}  [options.using]  Useful for GIN indexes\n   * @param {string}  [options.operator] Index operator\n   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {object}  [options.where]  Where condition on index, for partial indexes\n   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\n   *\n   * @returns {Promise}\n   */\n  async addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return await this.sequelize.query(sql, { ...options, supportsSearchPath: false });\n  }\n\n  /**\n   * Show indexes on a table\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]   Query options\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showIndex(tableName, options) {\n    const sql = this.queryGenerator.showIndexesQuery(tableName, options);\n    return await this.sequelize.query(sql, { ...options, type: QueryTypes.SHOWINDEXES });\n  }\n\n\n  /**\n   * Returns all foreign key constraints of requested tables\n   *\n   * @param {string[]} tableNames table names\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return {};\n    }\n\n    options = { ...options, type: QueryTypes.FOREIGNKEYS };\n\n    const results = await Promise.all(tableNames.map(tableName =>\n      this.sequelize.query(this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)));\n\n    const result = {};\n\n    tableNames.forEach((tableName, i) => {\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      result[tableName] = Array.isArray(results[i])\n        ? results[i].map(r => r.constraint_name)\n        : [results[i] && results[i].constraint_name];\n\n      result[tableName] = result[tableName].filter(_.identity);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get foreign key references details for the table\n   *\n   * Those details contains constraintSchema, constraintName, constraintCatalog\n   * tableCatalog, tableSchema, tableName, columnName,\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n   * Remind: constraint informations won't return if it's sqlite.\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]  Query options\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);\n    return this.sequelize.query(query, queryOptions);\n  }\n\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {string} tableName                    Table name to drop index from\n   * @param {string|string[]} indexNameOrAttributes  Index name or list of attributes that in the index\n   * @param {object} [options]                    Query options\n   * @param {boolean} [options.concurrently]      Pass CONCURRENTLY so other operations run while the index is created\n   *\n   * @returns {Promise}\n   */\n  async removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add a constraint to a table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (MySQL - Ignored by the database engine )\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * @example <caption>UNIQUE</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['email'],\n   *   type: 'unique',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   *\n   * @example <caption>CHECK</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['roles'],\n   *   type: 'check',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   *\n   * @example <caption>Default - MSSQL only</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['roles'],\n   *    type: 'default',\n   *    defaultValue: 'guest'\n   * });\n   *\n   * @example <caption>Primary Key</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['username'],\n   *    type: 'primary key',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   *\n   * @example <caption>Foreign Key</caption>\n   * queryInterface.addConstraint('Posts', {\n   *   fields: ['username'],\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @example <caption>Composite Foreign Key</caption>\n   * queryInterface.addConstraint('TableName', {\n   *   fields: ['source_column_name', 'other_source_column_name'],\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     fields: ['target_column_name', 'other_target_column_name']\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @param {string} tableName                   Table name where you want to add a constraint\n   * @param {object} options                     An object to define the constraint name, type etc\n   * @param {string} options.type                Type of constraint. One of the values in available constraints(case insensitive)\n   * @param {Array}  options.fields              Array of column names to apply the constraint over\n   * @param {string} [options.name]              Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n   * @param {string} [options.defaultValue]      The value for the default constraint\n   * @param {object} [options.where]             Where clause/expression for the CHECK constraint\n   * @param {object} [options.references]        Object specifying target table, column name to create foreign key constraint\n   * @param {string} [options.references.table]  Target table name\n   * @param {string} [options.references.field]  Target column name\n   * @param {string} [options.references.fields] Target column names for a composite primary key. Must match the order of fields in options.fields.\n   * @param {string} [options.deferrable]        Sets the constraint to be deferred or immediately checked. See Sequelize.Deferrable. PostgreSQL Only\n   *\n   * @returns {Promise}\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async showConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);\n    return await this.sequelize.query(sql, { ...options, type: QueryTypes.SHOWCONSTRAINTS });\n  }\n\n  /**\n   * Remove a constraint from a table\n   *\n   * @param {string} tableName       Table name to drop constraint from\n   * @param {string} constraintName  Constraint name\n   * @param {object} options         Query options\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    return this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options);\n  }\n\n  async insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n\n    const results = await this.sequelize.query(sql, options);\n    if (instance) results[0].isNewRecord = false;\n\n    return results;\n  }\n\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {object} insertValues values to be inserted, mapped to field name\n   * @param {object} updateValues values to be updated, mapped to field name\n   * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails\n   * @param {object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    const model = options.model;\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = options.conflictFields || [];\n\n    if (options.upsertKeys.length === 0) {\n      const primaryKeys = Object.values(model.primaryKeys).map(item => item.field);\n      const uniqueKeys = Object.values(model.uniqueKeys).filter(c => c.fields.length > 0).map(c => c.fields);\n      const indexKeys = Object.values(model._indexes).filter(c => c.unique && c.fields.length > 0).map(c => c.fields);\n      // For fields in updateValues, try to find a constraint or unique index\n      // that includes given field. Only first matching upsert key is used.\n      for (const field of options.updateOnDuplicate) {\n        const uniqueKey = uniqueKeys.find(fields => fields.includes(field));\n        if (uniqueKey) {\n          options.upsertKeys = uniqueKey;\n          break;\n        }\n\n        const indexKey = indexKeys.find(fields => fields.includes(field));\n        if (indexKey) {\n          options.upsertKeys = indexKey;\n          break;\n        }\n      }\n\n      // Always use PK, if no constraint available OR update data contains PK\n      if (\n        options.upsertKeys.length === 0\n        || _.intersection(options.updateOnDuplicate, primaryKeys).length\n      ) {\n        options.upsertKeys = primaryKeys;\n      }\n\n      options.upsertKeys = _.uniq(options.upsertKeys);\n    }\n\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Insert multiple records into a table\n   *\n   * @example\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   *\n   * @param {string} tableName   Table name to insert record to\n   * @param {Array}  records     List of records to insert\n   * @param {object} options     Various options, please see Model.bulkCreate options\n   * @param {object} attributes  Various attributes mapped by field name\n   *\n   * @returns {Promise}\n   */\n  async bulkInsert(tableName, records, options, attributes) {\n    options = { ...options };\n    options.type = QueryTypes.INSERT;\n\n    const results = await this.sequelize.query(\n      this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes),\n      options\n    );\n\n    return results[0];\n  }\n\n  async update(instance, tableName, values, identifier, options) {\n    options = { ...options };\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n\n    options.type = QueryTypes.UPDATE;\n\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Update multiple records of a table\n   *\n   * @example\n   * queryInterface.bulkUpdate('roles', {\n   *     label: 'admin',\n   *   }, {\n   *     userType: 3,\n   *   },\n   * );\n   *\n   * @param {string} tableName     Table name to update\n   * @param {object} values        Values to be inserted, mapped to field name\n   * @param {object} identifier    A hash with conditions OR an ID as integer OR a string with conditions\n   * @param {object} [options]     Various options, please see Model.bulkCreate options\n   * @param {object} [attributes]  Attributes on return objects if supported by SQL dialect\n   *\n   * @returns {Promise}\n   */\n  async bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = _.isObject(tableName) ? tableName : { tableName };\n    const model = _.find(this.sequelize.modelManager.models, { tableName: table.tableName });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.queryGenerator.deleteQuery(tableName, identifier, {}, instance.constructor);\n\n    options = { ...options };\n\n    // Check for a restrict field\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n        if (association.options && association.options.onDelete &&\n          association.options.onDelete.toLowerCase() === 'cascade' &&\n          association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    for (const cascade of cascades) {\n      let instances = await instance[cascade](options);\n      // Check for hasOne relationship with non-existing associate (\"has zero\")\n      if (!instances) continue;\n      if (!Array.isArray(instances)) instances = [instances];\n      for (const _instance of instances) await _instance.destroy(options);\n    }\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Delete multiple records from a table\n   *\n   * @param {string}  tableName            table name from where to delete records\n   * @param {object}  where                where conditions to find records to delete\n   * @param {object}  [options]            options\n   * @param {boolean} [options.truncate]   Use truncate table command\n   * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n   * @param {Model}   [model]              Model\n   *\n   * @returns {Promise}\n   */\n  async bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, { limit: null });\n\n    if (options.truncate === true) {\n      return this.sequelize.query(\n        this.queryGenerator.truncateTableQuery(tableName, options),\n        options\n      );\n    }\n\n    if (typeof identifier === 'object') where = Utils.cloneDeep(where);\n\n    return await this.sequelize.query(\n      this.queryGenerator.deleteQuery(tableName, where, options, model),\n      options\n    );\n  }\n\n  async select(model, tableName, optionsArg) {\n    const options = { ...optionsArg, type: QueryTypes.SELECT, model };\n\n    return await this.sequelize.query(\n      this.queryGenerator.selectQuery(tableName, options, model),\n      options\n    );\n  }\n\n  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.arithmeticQuery('+', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.arithmeticQuery('-', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n\n    const sql = this.queryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    const data = await this.sequelize.query(sql, options);\n    if (!options.plain) {\n      return data;\n    }\n\n    const result = data ? data[attributeSelector] : null;\n\n    if (!options || !options.dataType) {\n      return result;\n    }\n\n    const dataType = options.dataType;\n\n    if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n      if (result !== null) {\n        return parseFloat(result);\n      }\n    }\n    if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n      if (result !== null) {\n        return parseInt(result, 10);\n      }\n    }\n    if (dataType instanceof DataTypes.DATE) {\n      if (result !== null && !(result instanceof Date)) {\n        return new Date(result);\n      }\n    }\n    return result;\n  }\n\n  async createTrigger(\n    tableName,\n    triggerName,\n    timingType,\n    fireOnArray,\n    functionName,\n    functionParams,\n    optionsArray,\n    options\n  ) {\n    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async dropTrigger(tableName, triggerName, options) {\n    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Create an SQL function\n   *\n   * @example\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ],\n   *   {\n   *    variables:\n   *      [\n   *        {type: 'integer', name: 'myVar', default: 100}\n   *      ],\n   *      force: true\n   *   };\n   * );\n   *\n   * @param {string}  functionName  Name of SQL function to create\n   * @param {Array}   params        List of parameters declared for SQL function\n   * @param {string}  returnType    SQL type of function returned value\n   * @param {string}  language      The name of the language that the function is implemented in\n   * @param {string}  body          Source code of function\n   * @param {Array}   optionsArray  Extra-options for creation\n   * @param {object}  [options]     query options\n   * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false\n   * @param {Array<object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.\n   *\n   * @returns {Promise}\n   */\n  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Drop an SQL function\n   *\n   * @example\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   *\n   * @param {string} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {object} [options]    query options\n   *\n   * @returns {Promise}\n   */\n  async dropFunction(functionName, params, options) {\n    const sql = this.queryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Rename an SQL function\n   *\n   * @example\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   *\n   * @param {string} oldFunctionName  Current name of function\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {string} newFunctionName  New name of function\n   * @param {object} [options]        query options\n   *\n   * @returns {Promise}\n   */\n  async renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  // Helper methods useful for querying\n\n  /**\n   * @private\n   */\n  ensureEnums() {\n    // noop by default\n  }\n\n  async setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return;\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n\n    if (!sql) return;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.startTransactionQuery(transaction);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async deferConstraints(transaction, options) {\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return;\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n\n    const sql = this.queryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'commit';\n\n    return await promise;\n  }\n\n  async rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'rollback';\n\n    return await promise;\n  }\n}\n\nexports.QueryInterface = QueryInterface;\n"]},"metadata":{},"sourceType":"script"}