{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst HasOne = require(\"./has-one\");\n\nconst HasMany = require(\"./has-many\");\n\nconst BelongsToMany = require(\"./belongs-to-many\");\n\nconst BelongsTo = require(\"./belongs-to\");\n\nfunction isModel(model, sequelize) {\n  return model && model.prototype && model.prototype instanceof sequelize.Sequelize.Model;\n}\n\nconst Mixin = {\n  hasMany(target) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n    options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    Object.assign(options, _.omit(source.options, [\"hooks\"]));\n\n    if (options.useHooks) {\n      this.runHooks(\"beforeAssociate\", {\n        source,\n        target,\n        type: HasMany\n      }, options);\n    }\n\n    const association = new HasMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks(\"afterAssociate\", {\n        source,\n        target,\n        type: HasMany,\n        association\n      }, options);\n    }\n\n    return association;\n  },\n\n  belongsToMany(target) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n    options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    options.timestamps = options.timestamps === void 0 ? this.sequelize.options.timestamps : options.timestamps;\n    Object.assign(options, _.omit(source.options, [\"hooks\", \"timestamps\", \"scopes\", \"defaultScope\"]));\n\n    if (options.useHooks) {\n      this.runHooks(\"beforeAssociate\", {\n        source,\n        target,\n        type: BelongsToMany\n      }, options);\n    }\n\n    const association = new BelongsToMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks(\"afterAssociate\", {\n        source,\n        target,\n        type: BelongsToMany,\n        association\n      }, options);\n    }\n\n    return association;\n  },\n\n  getAssociations(target) {\n    return Object.values(this.associations).filter(association => association.target.name === target.name);\n  },\n\n  getAssociationForAlias(target, alias) {\n    return this.getAssociations(target).find(association => association.verifyAssociationAlias(alias)) || null;\n  }\n\n};\n\nfunction singleLinked(Type) {\n  return function (target) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const source = this;\n\n    if (!isModel(target, source.sequelize)) {\n      throw new Error(`${source.name}.${_.lowerFirst(Type.name)} called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    if (options.useHooks) {\n      source.runHooks(\"beforeAssociate\", {\n        source,\n        target,\n        type: Type\n      }, options);\n    }\n\n    const association = new Type(source, target, Object.assign(options, source.options));\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      source.runHooks(\"afterAssociate\", {\n        source,\n        target,\n        type: Type,\n        association\n      }, options);\n    }\n\n    return association;\n  };\n}\n\nMixin.hasOne = singleLinked(HasOne);\nMixin.belongsTo = singleLinked(BelongsTo);\nmodule.exports = Mixin;\nmodule.exports.Mixin = Mixin;\nmodule.exports.default = Mixin;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\associations\\mixin.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst HasOne = require('./has-one');\nconst HasMany = require('./has-many');\nconst BelongsToMany = require('./belongs-to-many');\nconst BelongsTo = require('./belongs-to');\n\nfunction isModel(model, sequelize) {\n  return model\n    && model.prototype\n    && model.prototype instanceof sequelize.Sequelize.Model;\n}\n\nconst Mixin = {\n  hasMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    Object.assign(options, _.omit(source.options, ['hooks']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: HasMany }, options);\n    }\n\n    // the id is in the foreign table or in a connecting table\n    const association = new HasMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: HasMany, association }, options);\n    }\n\n    return association;\n  },\n\n  belongsToMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    options.timestamps = options.timestamps === undefined ? this.sequelize.options.timestamps : options.timestamps;\n    Object.assign(options, _.omit(source.options, ['hooks', 'timestamps', 'scopes', 'defaultScope']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: BelongsToMany }, options);\n    }\n    // the id is in the foreign table or in a connecting table\n    const association = new BelongsToMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: BelongsToMany, association }, options);\n    }\n\n    return association;\n  },\n\n  getAssociations(target) {\n    return Object.values(this.associations).filter(association => association.target.name === target.name);\n  },\n\n  getAssociationForAlias(target, alias) {\n    // Two associations cannot have the same alias, so we can use find instead of filter\n    return this.getAssociations(target).find(association => association.verifyAssociationAlias(alias)) || null;\n  }\n};\n\n// The logic for hasOne and belongsTo is exactly the same\nfunction singleLinked(Type) {\n  return function(target, options = {}) {\n    // eslint-disable-next-line no-invalid-this\n    const source = this;\n    if (!isModel(target, source.sequelize)) {\n      throw new Error(`${source.name}.${_.lowerFirst(Type.name)} called with something that's not a subclass of Sequelize.Model`);\n    }\n\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    if (options.useHooks) {\n      source.runHooks('beforeAssociate', { source, target, type: Type }, options);\n    }\n    // the id is in the foreign table\n    const association = new Type(source, target, Object.assign(options, source.options));\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      source.runHooks('afterAssociate', { source, target, type: Type, association }, options);\n    }\n\n    return association;\n  };\n}\n\nMixin.hasOne = singleLinked(HasOne);\nMixin.belongsTo = singleLinked(BelongsTo);\n\nmodule.exports = Mixin;\nmodule.exports.Mixin = Mixin;\nmodule.exports.default = Mixin;\n"]},"metadata":{},"sourceType":"script"}