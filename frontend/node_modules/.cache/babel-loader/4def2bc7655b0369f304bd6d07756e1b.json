{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst DataTypes = require(\"../../data-types\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\n\nconst Utils = require(\"../../utils\");\n\nclass PostgresQueryInterface extends QueryInterface {\n  async ensureEnums(tableName, attributes, options, model) {\n    var _this = this;\n\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n    let sql = \"\";\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n          plain: true,\n          raw: true,\n          type: QueryTypes.SELECT\n        })));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    const addEnumValue = function (field, value, relativeValue) {\n      let position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"before\";\n      let spliceStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : promises.length;\n\n      const valueOptions = __spreadValues({}, options);\n\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case \"after\":\n          valueOptions.after = relativeValue;\n          break;\n\n        case \"before\":\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return _this.sequelize.query(_this.queryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM) {\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), __spreadProps(__spreadValues({}, options), {\n              raw: true\n            }));\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, \"before\", promisesLength);\n            }\n\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, \"after\");\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises.reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n\n    return result;\n  }\n\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n    const result = await this.sequelize.query(query, queryOptions);\n    return result.map(Utils.camelizeObjectKeys);\n  }\n\n  async dropEnum(enumName, options) {\n    options = options || {};\n    return this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)), __spreadProps(__spreadValues({}, options), {\n      raw: true\n    }));\n  }\n\n  async dropAllEnums(options) {\n    options = options || {};\n    const enums = await this.pgListEnums(null, options);\n    return await Promise.all(enums.map(result => this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)), __spreadProps(__spreadValues({}, options), {\n      raw: true\n    }))));\n  }\n\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      plain: false,\n      raw: true,\n      type: QueryTypes.SELECT\n    }));\n  }\n\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, {\n      attribute: \"tableName\"\n    });\n\n    if (!instanceTable) {\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === \"public\" ? \"\" : `${options.schema}_`) + tableName;\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n          raw: true\n        })));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\postgres\\query-interface.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst DataTypes = require('../../data-types');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst Utils = require('../../utils');\n\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\nclass PostgresQueryInterface extends QueryInterface {\n  /**\n   * Ensure enum and their values.\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of normalized table attributes\n   * @param {object} [options]\n   * @param {Model}  [model]\n   *\n   * @protected\n   */\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n\n    let sql = '';\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(\n          sql,\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }\n        ));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = { ...options };\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(\n          tableName, field, value, valueOptions\n        ), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        // If the enum type doesn't exist then create it\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n\n          // Going through already existing values allows us to make queries that depend on those values\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n          // Then we append the rest of new values AFTER the latest already existing value\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            // we go in reverse order so we could stop when we meet old value\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n            }\n\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    // If ENUM processed, then refresh OIDs\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n\n    // postgres needs some special treatment as those field names returned are all lowercase\n    // in order to keep same result with other dialects.\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n    const result = await this.sequelize.query(query, queryOptions);\n    return result.map(Utils.camelizeObjectKeys);\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropEnum(enumName, options) {\n    options = options || {};\n\n    return this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)),\n      { ...options, raw: true }\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllEnums(options) {\n    options = options || {};\n\n    const enums = await this.pgListEnums(null, options);\n\n    return await Promise.all(enums.map(result => this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)),\n      { ...options, raw: true }\n    )));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {object} [options]    Query options\n   *\n   * @returns {Promise}\n   */\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Since postgres has a special case for enums, we should drop the related\n   * enum type within the table and attribute\n   *\n   * @override\n   */\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n    if (!instanceTable) {\n      // Do nothing when model is not available\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, { ...options, raw: true }));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;\n"]},"metadata":{},"sourceType":"script"}