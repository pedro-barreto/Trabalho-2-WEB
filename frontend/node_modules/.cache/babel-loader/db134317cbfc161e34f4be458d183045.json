{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  default: () => bulk_record_error_default\n});\n\nvar import_base_error = __toModule(require(\"./base-error\"));\n\nclass BulkRecordError extends import_base_error.default {\n  constructor(error, record) {\n    super(error.message);\n\n    __publicField(this, \"errors\");\n\n    __publicField(this, \"record\");\n\n    this.name = \"SequelizeBulkRecordError\";\n    this.errors = error;\n    this.record = record;\n  }\n\n}\n\nvar bulk_record_error_default = BulkRecordError;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\errors\\bulk-record-error.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,QAAA,CAAA,OAAA,EAAA;AAAA,EAAA,OAAA,EAAA,MAAA;AAAA,CAAA,CAAA;;AACA,IAAA,iBAAA,GAAsB,UAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAtB;;AASA,MAAA,eAAA,SAA8B,iBAAA,CAAA,OAA9B,CAAwC;AAItC,EAAA,WAAA,CAAY,KAAZ,EAA0B,MAA1B,EAAyC;AACvC,UAAM,KAAA,CAAM,OAAZ;;AAJF,IAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AAIE,SAAK,IAAL,GAAY,0BAAZ;AACA,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,MAAL,GAAc,MAAd;AAAc;;AARsB;;AAYxC,IAAO,yBAAA,GAAQ,eAAf","sourcesContent":["import type { Model } from '../..';\nimport BaseError from './base-error';\n\n/**\n * Thrown when bulk operation fails, it represent per record level error.\n * Used with AggregateError\n *\n * @param error Error for a given record/instance\n * @param record DAO instance that error belongs to\n */\nclass BulkRecordError extends BaseError {\n  errors: Error;\n  record: Model;\n\n  constructor(error: Error, record: Model) {\n    super(error.message);\n    this.name = 'SequelizeBulkRecordError';\n    this.errors = error;\n    this.record = record;\n  }\n}\n\nexport default BulkRecordError;\n"]},"metadata":{},"sourceType":"script"}