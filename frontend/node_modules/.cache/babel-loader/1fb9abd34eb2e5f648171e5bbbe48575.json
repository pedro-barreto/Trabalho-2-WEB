{"ast":null,"code":"\"use strict\";\n\nconst Toposort = require(\"toposort-class\");\n\nconst _ = require(\"lodash\");\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: \"name\"\n    });\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models[tableName] = model;\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep2 => tableName !== dep2);\n      sorter.add(tableName, deps);\n    }\n\n    sorted = sorter.sort();\n\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\model-manager.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name'\n    });\n\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {object} [options] iterator options\n   * @private\n   */\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models[tableName] = model;\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    sorted = sorter.sort();\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;\n"]},"metadata":{},"sourceType":"script"}