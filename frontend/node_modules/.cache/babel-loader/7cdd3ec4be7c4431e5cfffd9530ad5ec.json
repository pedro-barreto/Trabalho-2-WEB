{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst debug = logger.debugContext(\"sql:pg\");\n\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === \"string\" ? value.replace(/\\0/g, \"\\\\0\") : value;\n\n    let bindParam;\n\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n        skipValueReplace: true\n      })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n\n      const replacementFunc = (match, key, values2) => {\n        if (seen[key] !== void 0) {\n          return seen[key];\n        }\n\n        if (values2[key] !== void 0) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values2[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n\n        return void 0;\n      };\n\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const {\n      connection\n    } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases).sort((a, b) => b[1].length - a[1].length).forEach(_ref => {\n        let [alias, original] = _ref;\n        const reg = new RegExp(_.escapeRegExp(original), \"g\");\n        sql = sql.replace(reg, alias);\n      });\n    }\n\n    this.sql = sql;\n    const query = parameters && parameters.length ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result))) : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (err) {\n      if (err.code === \"ECONNRESET\") {\n        connection._invalid = true;\n      }\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err, errForStack.stack);\n    }\n\n    complete();\n    let rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;\n    const rowCount = Array.isArray(queryResult) ? queryResult.reduce((count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count, 0) : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows.map(row => _.toPairs(row).reduce((acc, _ref2) => {\n        let [key, value] = _ref2;\n        const mapping = this.options.aliasesMapping.get(key);\n        acc[mapping || key] = value;\n        return acc;\n      }, {}));\n    }\n\n    const isTableNameQuery = sql.startsWith(\"SELECT table_name FROM information_schema.tables\");\n    const isRelNameQuery = sql.startsWith(\"SELECT relname FROM pg_class WHERE oid IN\");\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split(\"_\")[0]\n      }));\n    }\n\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== void 0) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: \"23505\",\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(\",\");\n\n        const columns = _.zipObject(row.column_indexes, this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names));\n\n        delete row.column_indexes;\n        delete row.column_names;\n        let field;\n        let attribute;\n        row.fields = row.indkey.split(\" \").map((indKey, index) => {\n          field = columns[indKey];\n\n          if (!field) {\n            return null;\n          }\n\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : void 0,\n            order: attribute.includes(\"DESC\") ? \"DESC\" : attribute.includes(\"ASC\") ? \"ASC\" : void 0,\n            length: void 0\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n\n      return rows;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n\n      for (const row of rows) {\n        let defParts;\n\n        if (row.condef !== void 0 && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n\n        result.push(row);\n      }\n\n      return result;\n    }\n\n    if (this.isSelectQuery()) {\n      let result = rows;\n\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n\n            if (typeof targetAttr === \"string\" && targetAttr !== key) {\n              return targetAttr;\n            }\n\n            return key;\n          });\n        });\n      }\n\n      return this.handleSelectQuery(result);\n    }\n\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === \"YES\",\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === \"PRIMARY KEY\"\n        };\n\n        if (result[row.Field].type === \"BOOLEAN\") {\n          result[row.Field].defaultValue = {\n            \"false\": false,\n            \"true\": true\n          }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === void 0) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === \"string\") {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, \"\");\n\n          if (result[row.Field].defaultValue.includes(\"::\")) {\n            const split = result[row.Field].defaultValue.split(\"::\");\n\n            if (split[1].toLowerCase() !== \"regclass)\") {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n\n      return this.handleSelectQuery(rows);\n    }\n\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [this.instance, null];\n      }\n\n      return [this.instance || rows && (this.options.plain && rows[0] || rows) || void 0, rowCount];\n    }\n\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case \"23503\":\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : void 0;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : void 0;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n\n      case \"23505\":\n        if (errDetail && (match = errDetail.replace(/\"/g, \"\").match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n          errors = [];\n          message = \"Validation error\";\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case \"23P01\":\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n        }\n\n        message = \"Exclusion constraint error\";\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case \"42704\":\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = \"Unknown constraint error\";\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : void 0;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : void 0;\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return \"id\";\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)\n        .forEach(([alias, original]) => {\n          const reg = new RegExp(_.escapeRegExp(original), 'g');\n\n          sql = sql.replace(reg, alias);\n        });\n    }\n\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (err) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (err.code === 'ECONNRESET') {\n        connection._invalid = true;\n      }\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err, errForStack.stack);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n        (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n        0\n      )\n      : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows\n        .map(row => _.toPairs(row)\n          .reduce((acc, [key, value]) => {\n            const mapping = this.options.aliasesMapping.get(key);\n            acc[mapping || key] = value;\n            return acc;\n          }, {})\n        );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n        // Map column index in table to column name\n        const columns = _.zipObject(\n          row.column_indexes,\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey];\n          // for functional indices indKey = 0\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}