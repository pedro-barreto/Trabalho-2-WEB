{"ast":null,"code":"\"use strict\";\n\nconst moment = require(\"moment\");\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx\");\n\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = void 0;\n      dataType.options.length = void 0;\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          warn(\"MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.\");\n          return \"VARBINARY(256)\";\n        }\n\n        warn(\"MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.\");\n      }\n\n      return \"VARBINARY(MAX)\";\n    }\n\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n\n      return `BINARY(${this._length})`;\n    }\n\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n\n      return options.escape(value);\n    }\n\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          warn(\"MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.\");\n          return \"NVARCHAR(256)\";\n        }\n\n        warn(\"MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.\");\n      }\n\n      return \"NVARCHAR(MAX)\";\n    }\n\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BIT\";\n    }\n\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"CHAR(36)\";\n    }\n\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return \"GETDATE()\";\n    }\n\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"DATETIMEOFFSET\";\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format(\"YYYY-MM-DD\");\n    }\n\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn(\"MSSQL does not support REAL with options. Plain `REAL` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._unsigned = void 0;\n        this._zerofill = void 0;\n      }\n    }\n\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n\n      if (this._decimals) {\n        warn(\"MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n      }\n\n      if (this._unsigned) {\n        warn(\"MSSQL does not support Float unsigned. `UNSIGNED` was removed.\");\n        this._unsigned = void 0;\n      }\n\n      if (this._zerofill) {\n        warn(\"MSSQL does not support Float zerofill. `ZEROFILL` was removed.\");\n        this._zerofill = void 0;\n      }\n    }\n\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"VARCHAR(255)\";\n    }\n\n  }\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\mssql\\data-types.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\n\n  /**\n   * Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types: [hex, ...]\n   *\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.ts\n   */\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\n          return 'VARBINARY(256)';\n        }\n        warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\n      }\n      return 'VARBINARY(MAX)';\n    }\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n  }\n\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n      return `BINARY(${this._length})`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\n      // Using unicode is just future proof\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\n          return 'NVARCHAR(256)';\n        }\n        warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\n      }\n      return 'NVARCHAR(MAX)';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BIT';\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36)';\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'GETDATE()';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'DATETIMEOFFSET';\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does not support any options for real\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes storage size)\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n      }\n      if (this._unsigned) {\n        warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script"}