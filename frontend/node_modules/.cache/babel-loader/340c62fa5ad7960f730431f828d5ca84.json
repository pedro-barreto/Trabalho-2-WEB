{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst parserStore = require(\"../parserStore\")(\"db2\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst moment = require(\"moment\");\n\nconst debug = logger.debugContext(\"sql:db2\");\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"id\";\n  }\n\n  getSQLTypeFromJsType(value) {\n    const param = {\n      ParamType: \"INPUT\",\n      Data: value\n    };\n\n    if (Buffer.isBuffer(value)) {\n      param.DataType = \"BLOB\";\n      return param;\n    }\n\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${this.connection.uuid || \"default\"}): ${this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n    return new Promise((resolve, reject) => {\n      if (_.startsWith(this.sql, \"BEGIN TRANSACTION\")) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"COMMIT TRANSACTION\")) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"ROLLBACK TRANSACTION\")) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"SAVE TRANSACTION\")) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err2 => {\n              if (err2) {\n                reject(this.formatError(err2, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n\n        if ((this.isSelectQuery() || _.startsWith(SQL, \"SELECT \")) && SQL.indexOf(\" FROM \", 8) === -1) {\n          if (this.sql.charAt(this.sql.length - 1) === \";\") {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n\n          newSql += \" FROM SYSIBM.SYSDUMMY1;\";\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err2, result, outparams) => {\n            debug(`executed(${this.connection.uuid || \"default\"}):${newSql} ${parameters ? JSON.stringify(parameters) : \"\"}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || \"default\"}): ${newSql} ${parameters ? JSON.stringify(parameters) : \"\"}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err2 && err2.message) {\n              err2 = this.filterSQLError(err2, this.sql, connection);\n\n              if (err2 === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n\n            if (err2) {\n              err2.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err2, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n\n              if (typeof result === \"object\") {\n                if (_.startsWith(this.sql, \"DELETE FROM \")) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n\n                result.closeSync();\n              }\n\n              stmt.closeSync();\n              const datalen = data.length;\n\n              if (datalen > 0) {\n                const coltypes = {};\n\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] = metadata[i].SQL_DESC_TYPE_NAME;\n                }\n\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === \"TIMESTAMP\") {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === \"BLOB\") {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf(\"FOR BIT DATA\") > 0) {\n                        data[i][column] = new Buffer.from(value, \"hex\");\n                      }\n                    }\n                  }\n                }\n\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n\n    const replacementFunc = (match, key, values2) => {\n      if (values2[key] !== void 0) {\n        bindParam[key] = values2[key];\n        return \"?\";\n      }\n\n      return void 0;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    if (Array.isArray(values) && typeof values[0] === \"object\") {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search(\"SQL0204N\") != -1 && _.startsWith(sql, \"DROP \")) {\n      err = null;\n    } else if (err.message.search(\"SQL0443N\") != -1) {\n      if (this.isDropSchemaQuery()) {\n        connection.querySync(\"DROP TABLE ERRORSCHEMA.ERRORTABLE;\");\n        connection.querySync(this.sql);\n      }\n\n      err = null;\n    } else if (err.message.search(\"SQL0601N\") != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n\n      if (match && match.length > 1 && match[2] === \"TABLE\") {\n        let table;\n        const mtarray = match[1].split(\".\");\n\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        } else {\n          err = null;\n        }\n      } else {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0911N\") != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0605W\") != -1) {\n      err = null;\n    } else if (err.message.search(\"SQL0668N\") != -1 && _.startsWith(sql, \"ALTER TABLE \")) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(\" \")[0]}')`);\n      err = connection.querySync(sql);\n    }\n\n    if (err && err.length === 0) {\n      err = null;\n    }\n\n    return err;\n  }\n\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === \"Y\" ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === \"Y\" ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n\n      if (conn) {\n        const query = \"DROP TABLE ERRORSCHEMA.ERRORTABLE\";\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, \"SQL\");\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err[\"message\"] = \"No error message found.\";\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n\n    if (match && match.length > 0) {\n      let uniqueIndexName = \"\";\n      let uniqueKey = \"\";\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0][\"INDNAME\"];\n      }\n\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where && this.options.where[uniqueKey.column] !== void 0) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues && this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters[\"0\"];\n        }\n      }\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) || err.message.match(/SQL0530N/) || err.message.match(/SQL0531N/);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : void 0;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, {\n      stack: errStack\n    });\n  }\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, \"CALL SYSPROC.ADMIN_DROP_SCHEMA\")) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === \"P\",\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === \"U\",\n          type: item.type\n        };\n\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => {\n          return ` ${x}`;\n        }).split(\" \"), column => {\n          let columnName = column.trim();\n\n          if (columnName) {\n            columnName = columnName.replace(/\\+|-/, \"\");\n            currItem.fields.push({\n              attribute: columnName,\n              length: void 0,\n              order: column.indexOf(\"-\") === -1 ? \"ASC\" : \"DESC\",\n              collate: void 0\n            });\n          }\n        });\n\n        result.push(currItem);\n      }\n    });\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\db2\\query.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('db2');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\nconst moment = require('moment');\nconst debug = logger.debugContext('sql:db2');\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    const param = { ParamType: 'INPUT', Data: value };\n    if (Buffer.isBuffer(value)) {\n      param.DataType = 'BLOB';\n      return param;\n    }\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\t\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${ this.connection.uuid || 'default' }): ${ this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n\n    return new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err => {\n              if (err) {\n                reject(this.formatError(err, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, 'SELECT ')) &&\n            SQL.indexOf(' FROM ', 8) === -1 ) {\n          if (this.sql.charAt(this.sql.length - 1) === ';') {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n          newSql += ' FROM SYSIBM.SYSDUMMY1;';\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err, result, outparams) => {\n            debug(`executed(${this.connection.uuid || 'default'}):${newSql} ${parameters ? JSON.stringify(parameters) : ''}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${ this.connection.uuid || 'default' }): ${ newSql} ${parameters ? JSON.stringify(parameters) : ''}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err && err.message) {\n              err = this.filterSQLError(err, this.sql, connection);\n              if (err === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n            if (err) {\n              err.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === 'object') {\n                if (_.startsWith(this.sql, 'DELETE FROM ')) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n                result.closeSync();\n              }\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] =\n                      metadata[i].SQL_DESC_TYPE_NAME;\n                }\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === 'TIMESTAMP') {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === 'BLOB') {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf('FOR BIT DATA') > 0) {\n                        data[i][column] = new Buffer.from(value, 'hex');\n                      }\n                    }\n                  }\n                }\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === 'object') {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search('SQL0204N') != -1 && _.startsWith(sql, 'DROP ')) {\n      err = null; // Ignore table not found error for drop table.\n    } else if (err.message.search('SQL0443N') != -1) {\n      if (this.isDropSchemaQuery()) {\n        // Delete ERRORSCHEMA.ERRORTABLE if it exist.\n        connection.querySync('DROP TABLE ERRORSCHEMA.ERRORTABLE;');\n        // Retry deleting the schema\n        connection.querySync(this.sql);\n      }\n      err = null; // Ignore drop schema error.\n    } else if (err.message.search('SQL0601N') != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === 'TABLE') {\n        let table;\n        const mtarray = match[1].split('.');\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        }\n        else {\n          err = null;\n        }\n      } else {\n        err = null; // Ignore create schema error.\n      }\n    } else if (err.message.search('SQL0911N') != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null; // Ignore deadlock error due to program logic.\n      }\n    } else if (err.message.search('SQL0605W') != -1) {\n      err = null; // Ignore warning.\n    } else if (err.message.search('SQL0668N') != -1 &&\n      _.startsWith(sql, 'ALTER TABLE ')) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(' ')[0]}')`);\n      err = connection.querySync(sql);\n    }\n    if (err && err.length === 0) { err = null; }\n    return err;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {Integer} rowCount - The number of affected rows.\n   * @param {Array} metadata - Metadata of the returned result set.\n   * @param {object} conn - The connection object.\n   * @private\n   */\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'Y' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === 'Y' ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = 'DROP TABLE ERRORSCHEMA.ERRORTABLE';\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // Db2 returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    // Remove SQL Contraints from constraints list.\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, 'SQL');\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err['message'] = 'No error message found.';\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = '';\n      let uniqueKey = '';\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0]['INDNAME'];\n      }\n\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where &&\n          this.options.where[uniqueKey.column] !== undefined) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues &&\n          this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters['0'];\n        }\n      }\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) ||\n      err.message.match(/SQL0530N/) ||\n      err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, 'CALL SYSPROC.ADMIN_DROP_SCHEMA')) {\n      result = true;\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n  isShowIndexesQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n  \n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === 'P',\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === 'U',\n          type: item.type\n        };\n        \n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => { return ` ${ x}`; }).split(' '), column => {\n          let columnName = column.trim();\n          if ( columnName ) {\n            columnName = columnName.replace(/\\+|-/, '');\n            currItem.fields.push({\n              attribute: columnName,\n              length: undefined,\n              order: column.indexOf('-') === -1 ? 'ASC' : 'DESC',\n              collate: undefined\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    });\n    return result;    \n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n          this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}