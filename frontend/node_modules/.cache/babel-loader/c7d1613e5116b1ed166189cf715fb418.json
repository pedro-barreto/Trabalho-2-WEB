{"ast":null,"code":"\"use strict\";\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://www.sqlite.org/datatype3.html\");\n\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n\n  BaseTypes.DATE.types.sqlite = [\"DATETIME\"];\n  BaseTypes.STRING.types.sqlite = [\"VARCHAR\", \"VARCHAR BINARY\"];\n  BaseTypes.CHAR.types.sqlite = [\"CHAR\", \"CHAR BINARY\"];\n  BaseTypes.TEXT.types.sqlite = [\"TEXT\"];\n  BaseTypes.TINYINT.types.sqlite = [\"TINYINT\"];\n  BaseTypes.SMALLINT.types.sqlite = [\"SMALLINT\"];\n  BaseTypes.MEDIUMINT.types.sqlite = [\"MEDIUMINT\"];\n  BaseTypes.INTEGER.types.sqlite = [\"INTEGER\"];\n  BaseTypes.BIGINT.types.sqlite = [\"BIGINT\"];\n  BaseTypes.FLOAT.types.sqlite = [\"FLOAT\"];\n  BaseTypes.TIME.types.sqlite = [\"TIME\"];\n  BaseTypes.DATEONLY.types.sqlite = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.sqlite = [\"TINYINT\"];\n  BaseTypes.BLOB.types.sqlite = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.sqlite = [\"DECIMAL\"];\n  BaseTypes.UUID.types.sqlite = [\"UUID\"];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = [\"REAL\"];\n  BaseTypes.DOUBLE.types.sqlite = [\"DOUBLE PRECISION\"];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = [\"JSON\", \"JSONB\"];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes(\"+\")) {\n        return new Date(date + options.timezone);\n      }\n\n      return new Date(date);\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n\n      return super.toSql(this);\n    }\n\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn(\"SQLite does not support TEXT with options. Plain `TEXT` will be used instead.\");\n        this._length = void 0;\n      }\n\n      return \"TEXT\";\n    }\n\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return \"TEXT COLLATE NOCASE\";\n    }\n\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n\n      return super.toSql();\n    }\n\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n\n      if (this._unsigned) {\n        result += \" UNSIGNED\";\n      }\n\n      if (this._zerofill) {\n        result += \" ZEROFILL\";\n      }\n\n      if (this._length) {\n        result += `(${this._length}`;\n\n        if (typeof this._decimals === \"number\") {\n          result += `,${this._decimals}`;\n        }\n\n        result += \")\";\n      }\n\n      return result;\n    }\n\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {}\n\n  class DOUBLE extends BaseTypes.DOUBLE {}\n\n  class REAL extends BaseTypes.REAL {}\n\n  function parseFloating(value) {\n    if (typeof value !== \"string\") {\n      return value;\n    }\n\n    if (value === \"NaN\") {\n      return NaN;\n    }\n\n    if (value === \"Infinity\") {\n      return Infinity;\n    }\n\n    if (value === \"-Infinity\") {\n      return -Infinity;\n    }\n  }\n\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"TEXT\";\n    }\n\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    \"DOUBLE PRECISION\": DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\sqlite\\data-types.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n\n  /**\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes('+')) {\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n        return new Date(date + options.timezone);\n      }\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return 'TEXT COLLATE NOCASE';\n    }\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        result += ' ZEROFILL';\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n  }\n\n  class REAL extends BaseTypes.REAL { }\n\n  function parseFloating(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    if (value === 'NaN') {\n      return NaN;\n    }\n    if (value === 'Infinity') {\n      return Infinity;\n    }\n    if (value === '-Infinity') {\n      return -Infinity;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script"}