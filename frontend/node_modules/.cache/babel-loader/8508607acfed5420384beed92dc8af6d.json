{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst Utils = require(\"./../utils\");\n\nconst Helpers = require(\"./helpers\");\n\nconst _ = require(\"lodash\");\n\nconst Association = require(\"./base\");\n\nconst BelongsTo = require(\"./belongs-to\");\n\nconst HasMany = require(\"./has-many\");\n\nconst HasOne = require(\"./has-one\");\n\nconst AssociationError = require(\"../errors\").AssociationError;\n\nconst EmptyResultError = require(\"../errors\").EmptyResultError;\n\nconst Op = require(\"../operators\");\n\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    if (this.options.through === void 0 || this.options.through === true || this.options.through === null) {\n      throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);\n    }\n\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n\n    this.associationType = \"BelongsToMany\";\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = __spreadValues({}, this.options.through);\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError(\"'as' must be defined for many-to-many self-associations\");\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    this.combinedTableName = Utils.combineTableNames(this.source.tableName, this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName);\n\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    _.each(this.target.associations, association => {\n      if (association.associationType !== \"BelongsToMany\") return;\n      if (association.target !== this.source) return;\n\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    if (this.options.targetKey) {\n      this.targetKey = this.options.targetKey;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    } else {\n      this.targetKeyDefault = true;\n      this.targetKey = this.target.primaryKeyAttribute;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    }\n\n    this._createForeignAndOtherKeys();\n\n    if (typeof this.through.model === \"string\") {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {\n          tableName: this.through.model,\n          indexes: [],\n          paranoid: this.through.paranoid ? this.through.paranoid : false,\n          validate: {}\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n\n    Object.assign(this.options, _.pick(this.through.model.options, [\"timestamps\", \"createdAt\", \"updatedAt\", \"deletedAt\", \"paranoid\"]));\n\n    if (this.paired) {\n      let needInjectPaired = false;\n\n      if (this.targetKeyDefault) {\n        this.targetKey = this.paired.sourceKey;\n        this.targetKeyField = this.paired.sourceKeyField;\n\n        this._createForeignAndOtherKeys();\n      }\n\n      if (this.paired.targetKeyDefault) {\n        if (this.paired.targetKey !== this.sourceKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.targetKey = this.sourceKey;\n          this.paired.targetKeyField = this.sourceKeyField;\n\n          this.paired._createForeignAndOtherKeys();\n\n          needInjectPaired = true;\n        }\n      }\n\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n\n      if (this.paired.otherKeyDefault) {\n        if (this.paired.otherKey !== this.foreignKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.otherKey = this.foreignKey;\n          needInjectPaired = true;\n        }\n      }\n\n      if (needInjectPaired) {\n        this.paired._injectAttributes();\n      }\n    }\n\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n    this.associationAccessor = this.as;\n\n    const plural = _.upperFirst(this.options.name.plural);\n\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  _createForeignAndOtherKeys() {\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelize([this.source.options.name.singular, this.sourceKey].join(\"_\"));\n    }\n\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelize([this.isSelfAssociation ? Utils.singularize(this.as) : this.target.options.name.singular, this.targetKey].join(\"_\"));\n    }\n  }\n\n  _injectAttributes() {\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey;\n\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if ([this.foreignKey, this.otherKey].includes(attributeName)) {\n          attribute.primaryKey = false;\n        } else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n\n        this.primaryKeyDeleted = true;\n      }\n    });\n\n    const sourceKey = this.source.rawAttributes[this.sourceKey];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = this.sourceKeyField;\n    const targetKey = this.target.rawAttributes[this.targetKey];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = this.targetKeyField;\n\n    const sourceAttribute = __spreadValues({\n      type: sourceKeyType\n    }, this.foreignKeyAttribute);\n\n    const targetAttribute = __spreadValues({\n      type: targetKeyType\n    }, this.otherKeyAttribute);\n\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      let uniqueKey;\n\n      if (typeof this.options.uniqueKey === \"string\" && this.options.uniqueKey !== \"\") {\n        uniqueKey = this.options.uniqueKey;\n      } else {\n        uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, \"unique\"].join(\"_\");\n      }\n\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key: sourceKeyField\n      };\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n      if (!sourceAttribute.onDelete) sourceAttribute.onDelete = \"CASCADE\";\n      if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = \"CASCADE\";\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key: targetKeyField\n      };\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n      if (!targetAttribute.onDelete) targetAttribute.onDelete = \"CASCADE\";\n      if (!targetAttribute.onUpdate) targetAttribute.onUpdate = \"CASCADE\";\n    }\n\n    Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n    this.through.model.refreshAttributes();\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n\n    if (this.options.sequelize.options.dialect === \"db2\" && this.source.rawAttributes[this.sourceKey].primaryKey !== true) {\n      this.source.rawAttributes[this.sourceKey].unique = true;\n    }\n\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      sourceKey: this.sourceKey,\n      as: this.through.model.name\n    });\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      sourceKey: this.targetKey,\n      as: this.through.model.name\n    });\n\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        sourceKey: this.paired.targetKey,\n        as: this.paired.through.model.name\n      });\n    }\n\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = [\"get\", \"count\", \"hasSingle\", \"hasAll\", \"set\", \"add\", \"addMultiple\", \"remove\", \"removeMultiple\", \"create\"];\n    const aliases = {\n      hasSingle: \"has\",\n      hasAll: \"has\",\n      addMultiple: \"add\",\n      removeMultiple: \"remove\"\n    };\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  async get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n    const through = this.through;\n    let scopeWhere;\n    let throughWhere;\n\n    if (this.scope) {\n      scopeWhere = __spreadValues({}, this.scope);\n    }\n\n    options.where = {\n      [Op.and]: [scopeWhere, options.where]\n    };\n\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[this.foreignKey] = instance.get(this.sourceKey);\n\n      if (through.scope) {\n        Object.assign(throughWhere, through.scope);\n      }\n\n      if (options.through && options.through.where) {\n        throughWhere = {\n          [Op.and]: [throughWhere, options.through.where]\n        };\n      }\n\n      options.include = options.include || [];\n      options.include.push({\n        association: this.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        paranoid: _.get(options.through, \"paranoid\", true),\n        where: throughWhere\n      });\n    }\n\n    let model = this.target;\n\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return model.findAll(options);\n  }\n\n  async count(instance, options) {\n    const sequelize = this.target.sequelize;\n    options = Utils.cloneDeep(options);\n    options.attributes = [[sequelize.fn(\"COUNT\", sequelize.col([this.target.name, this.targetKeyField].join(\".\"))), \"count\"]];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n    const result = await this.get(instance, options);\n    return parseInt(result.count, 10);\n  }\n\n  async has(sourceInstance, instances, options) {\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n\n    options = __spreadProps(__spreadValues({\n      raw: true\n    }, options), {\n      scope: false,\n      attributes: [this.targetKey],\n      joinTableAttributes: []\n    });\n    const instancePrimaryKeys = instances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n\n      return {\n        [this.targetKey]: instance\n      };\n    });\n    options.where = {\n      [Op.and]: [{\n        [Op.or]: instancePrimaryKeys\n      }, options.where]\n    };\n    const associatedObjects = await this.get(sourceInstance, options);\n    return _.differenceWith(instancePrimaryKeys, associatedObjects, (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;\n  }\n\n  async set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n    const sourceKey = this.sourceKey;\n    const targetKey = this.targetKey;\n    const identifier = this.identifier;\n    const foreignIdentifier = this.foreignIdentifier;\n\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);\n    }\n\n    const where = __spreadValues({\n      [identifier]: sourceInstance.get(sourceKey)\n    }, this.through.scope);\n\n    const updateAssociations = currentRows => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      const defaultAttributes = options.through || {};\n      const unassociatedObjects = newAssociatedObjects.filter(obj => !currentRows.some(currentRow => currentRow[foreignIdentifier] === obj.get(targetKey)));\n\n      for (const currentRow of currentRows) {\n        const newObj = newAssociatedObjects.find(obj => currentRow[foreignIdentifier] === obj.get(targetKey));\n\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[this.through.model.name];\n\n          if (throughAttributes instanceof this.through.model) {\n            throughAttributes = {};\n          }\n\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n          if (Object.keys(attributes).length) {\n            promises.push(this.through.model.update(attributes, Object.assign(options, {\n              where: {\n                [identifier]: sourceInstance.get(sourceKey),\n                [foreignIdentifier]: newObj.get(targetKey)\n              }\n            })));\n          }\n        }\n      }\n\n      if (obsoleteAssociations.length > 0) {\n        promises.push(this.through.model.destroy(__spreadProps(__spreadValues({}, options), {\n          where: __spreadValues({\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: obsoleteAssociations.map(obsoleteAssociation => obsoleteAssociation[foreignIdentifier])\n          }, this.through.scope)\n        })));\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          return __spreadValues(__spreadProps(__spreadValues(__spreadValues({}, defaultAttributes), unassociatedObject[this.through.model.name]), {\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: unassociatedObject.get(targetKey)\n          }), this.through.scope);\n        });\n        promises.push(this.through.model.bulkCreate(bulk, __spreadValues({\n          validate: true\n        }, options)));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await this.through.model.findAll(__spreadProps(__spreadValues({}, options), {\n        where,\n        raw: true\n      }));\n      return await updateAssociations(currentRows);\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations([]);\n      throw error;\n    }\n  }\n\n  async add(sourceInstance, newInstances, options) {\n    if (!newInstances) return Promise.resolve();\n    options = __spreadValues({}, options);\n    const association = this;\n    const sourceKey = association.sourceKey;\n    const targetKey = association.targetKey;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = options.through || {};\n    newInstances = association.toInstanceArray(newInstances);\n\n    const where = __spreadValues({\n      [identifier]: sourceInstance.get(sourceKey),\n      [foreignIdentifier]: newInstances.map(newInstance => newInstance.get(targetKey))\n    }, association.through.scope);\n\n    const updateAssociations = currentRows => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n\n      for (const obj of newInstances) {\n        const existingAssociation = currentRows && currentRows.find(current => current[foreignIdentifier] === obj.get(targetKey));\n\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n          if (Object.keys(attributes).some(attribute => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n          Object.assign(attributes, association.through.scope);\n          return attributes;\n        });\n        promises.push(association.through.model.bulkCreate(bulk, __spreadValues({\n          validate: true\n        }, options)));\n      }\n\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n\n        const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n\n        promises.push(association.through.model.update(attributes, Object.assign(options, {\n          where: {\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: assoc.get(targetKey)\n          }\n        })));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await association.through.model.findAll(__spreadProps(__spreadValues({}, options), {\n        where,\n        raw: true\n      }));\n      const [associations] = await updateAssociations(currentRows);\n      return associations;\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations();\n      throw error;\n    }\n  }\n\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n    options = options || {};\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n    const where = {\n      [association.identifier]: sourceInstance.get(association.sourceKey),\n      [association.foreignIdentifier]: oldAssociatedObjects.map(newInstance => newInstance.get(association.targetKey))\n    };\n    return association.through.model.destroy(__spreadProps(__spreadValues({}, options), {\n      where\n    }));\n  }\n\n  async create(sourceInstance, values, options) {\n    const association = this;\n    options = options || {};\n    values = values || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (association.scope) {\n      Object.assign(values, association.scope);\n\n      if (options.fields) {\n        options.fields = options.fields.concat(Object.keys(association.scope));\n      }\n    }\n\n    const newAssociatedObject = await association.target.create(values, options);\n    await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, [\"fields\"]));\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n\n}\n\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\associations\\belongs-to-many.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst BelongsTo = require('./belongs-to');\nconst HasMany = require('./has-many');\nconst HasOne = require('./has-one');\nconst AssociationError = require('../errors').AssociationError;\nconst EmptyResultError = require('../errors').EmptyResultError;\nconst Op = require('../operators');\n\n/**\n * Many-to-many association with a join table.\n *\n * When the join table has additional attributes, these can be passed in the options object:\n *\n * ```js\n * UserProject = sequelize.define('user_project', {\n *   role: Sequelize.STRING\n * });\n * User.belongsToMany(Project, { through: UserProject });\n * Project.belongsToMany(User, { through: UserProject });\n * // through is required!\n *\n * user.addProject(project, { through: { role: 'manager' }});\n * ```\n *\n * All methods allow you to pass either a persisted instance, its primary key, or a mixture:\n *\n * ```js\n * const project = await Project.create({ id: 11 });\n * await user.addProjects([project, 12]);\n * ```\n *\n * If you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:\n *\n * ```js\n * p1.UserProjects = {\n *   started: true\n * }\n * user.setProjects([p1, p2], { through: { started: false }}) // The default value is false, but p1 overrides that.\n * ```\n *\n * Similarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.\n * ```js\n * const projects = await user.getProjects();\n * const p1 = projects[0];\n * p1.UserProjects.started // Is this project started yet?\n * ```\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsToMany(Project)` the getter will be `user.getProjects()`.\n *\n * @see {@link Model.belongsToMany}\n */\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    if (this.options.through === undefined || this.options.through === true || this.options.through === null) {\n      throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);\n    }\n\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n\n    this.associationType = 'BelongsToMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = { ...this.options.through };\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError('\\'as\\' must be defined for many-to-many self-associations');\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    this.combinedTableName = Utils.combineTableNames(\n      this.source.tableName,\n      this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName\n    );\n\n    /*\n    * If self association, this is the target association - Unless we find a pairing association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    /*\n    * Find paired association (if exists)\n    */\n    _.each(this.target.associations, association => {\n      if (association.associationType !== 'BelongsToMany') return;\n      if (association.target !== this.source) return;\n\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n\n    /*\n    * Default/generated source/target keys\n    */\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    if (this.options.targetKey) {\n      this.targetKey = this.options.targetKey;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    } else {\n      this.targetKeyDefault = true;\n      this.targetKey = this.target.primaryKeyAttribute;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    }\n\n    this._createForeignAndOtherKeys();\n\n    if (typeof this.through.model === 'string') {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {\n          tableName: this.through.model,\n          indexes: [], //we don't want indexes here (as referenced in #2416)\n          paranoid: this.through.paranoid ? this.through.paranoid : false, // Default to non-paranoid join (referenced in #11991)\n          validate: {} // Don't propagate model-level validations\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n\n    Object.assign(this.options, _.pick(this.through.model.options, [\n      'timestamps', 'createdAt', 'updatedAt', 'deletedAt', 'paranoid'\n    ]));\n\n    if (this.paired) {\n      let needInjectPaired = false;\n\n      if (this.targetKeyDefault) {\n        this.targetKey = this.paired.sourceKey;\n        this.targetKeyField = this.paired.sourceKeyField;\n        this._createForeignAndOtherKeys();\n      }\n      if (this.paired.targetKeyDefault) {\n        // in this case paired.otherKey depends on paired.targetKey,\n        // so cleanup previously wrong generated otherKey\n        if (this.paired.targetKey !== this.sourceKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.targetKey = this.sourceKey;\n          this.paired.targetKeyField = this.sourceKeyField;\n          this.paired._createForeignAndOtherKeys();\n          needInjectPaired = true;\n        }\n      }\n\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n      if (this.paired.otherKeyDefault) {\n        // If paired otherKey was inferred we should make sure to clean it up\n        // before adding a new one that matches the foreignKey\n        if (this.paired.otherKey !== this.foreignKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.otherKey = this.foreignKey;\n          needInjectPaired = true;\n        }\n      }\n\n      if (needInjectPaired) {\n        this.paired._injectAttributes();\n      }\n    }\n\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n\n    this.associationAccessor = this.as;\n\n    // Get singular and plural names, trying to uppercase the first letter, unless the model forbids it\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  _createForeignAndOtherKeys() {\n    /*\n    * Default/generated foreign/other keys\n    */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelize(\n        [\n          this.source.options.name.singular,\n          this.sourceKey\n        ].join('_')\n      );\n    }\n\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelize(\n        [\n          this.isSelfAssociation ? Utils.singularize(this.as) : this.target.options.name.singular,\n          this.targetKey\n        ].join('_')\n      );\n    }\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  _injectAttributes() {\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey;\n\n    // remove any PKs previously defined by sequelize\n    // but ignore any keys that are part of this association (#5865)\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if ([this.foreignKey, this.otherKey].includes(attributeName)) {\n          // this key is still needed as it's part of the association\n          // so just set primaryKey to false\n          attribute.primaryKey = false;\n        }\n        else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n        this.primaryKeyDeleted = true;\n      }\n    });\n\n    const sourceKey = this.source.rawAttributes[this.sourceKey];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = this.sourceKeyField;\n    const targetKey = this.target.rawAttributes[this.targetKey];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = this.targetKeyField;\n    const sourceAttribute = { type: sourceKeyType, ...this.foreignKeyAttribute };\n    const targetAttribute = { type: targetKeyType, ...this.otherKeyAttribute };\n\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      let uniqueKey;\n      if (typeof this.options.uniqueKey === 'string' && this.options.uniqueKey !== '') {\n        uniqueKey = this.options.uniqueKey;\n      } else {\n        uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, 'unique'].join('_');\n      }\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key: sourceKeyField\n      };\n      // For the source attribute the passed option is the priority\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n\n      if (!sourceAttribute.onDelete) sourceAttribute.onDelete = 'CASCADE';\n      if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = 'CASCADE';\n\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key: targetKeyField\n      };\n      // But the for target attribute the previously defined option is the priority (since it could've been set by another belongsToMany call)\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n\n      if (!targetAttribute.onDelete) targetAttribute.onDelete = 'CASCADE';\n      if (!targetAttribute.onUpdate) targetAttribute.onUpdate = 'CASCADE';\n    }\n\n    Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n\n    this.through.model.refreshAttributes();\n\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n\n    // For Db2 server, a reference column of a FOREIGN KEY must be unique\n    // else, server throws SQL0573N error. Hence, setting it here explicitly\n    // for non primary columns.\n    if (this.options.sequelize.options.dialect === 'db2' &&\n        this.source.rawAttributes[this.sourceKey].primaryKey !== true) {\n      this.source.rawAttributes[this.sourceKey].unique = true;\n    }\n\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      sourceKey: this.sourceKey,\n      as: this.through.model.name\n    });\n\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      sourceKey: this.targetKey,\n      as: this.through.model.name\n    });\n\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        sourceKey: this.paired.targetKey,\n        as: this.paired.through.model.name\n      });\n    }\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @see\n   * {@link Model} for a full explanation of options\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   * @param {object} [options.through.where] An optional where clause applied to through model (join table)\n   * @param {boolean} [options.through.paranoid=true] If true, only non-deleted records will be returned from the join table. If false, both deleted and non-deleted records will be returned. Only applies if through model is paranoid\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  async get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n\n    const through = this.through;\n    let scopeWhere;\n    let throughWhere;\n\n    if (this.scope) {\n      scopeWhere = { ...this.scope };\n    }\n\n    options.where = {\n      [Op.and]: [\n        scopeWhere,\n        options.where\n      ]\n    };\n\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[this.foreignKey] = instance.get(this.sourceKey);\n\n      if (through.scope) {\n        Object.assign(throughWhere, through.scope);\n      }\n\n      //If a user pass a where on the options through options, make an \"and\" with the current throughWhere\n      if (options.through && options.through.where) {\n        throughWhere = {\n          [Op.and]: [throughWhere, options.through.where]\n        };\n      }\n\n      options.include = options.include || [];\n      options.include.push({\n        association: this.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        paranoid: _.get(options.through, 'paranoid', true),\n        where: throughWhere\n      });\n    }\n\n    let model = this.target;\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return model.findAll(options);\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n  async count(instance, options) {\n    const sequelize = this.target.sequelize;\n\n    options = Utils.cloneDeep(options);\n    options.attributes = [\n      [sequelize.fn('COUNT', sequelize.col([this.target.name, this.targetKeyField].join('.'))), 'count']\n    ];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n\n    const result = await this.get(instance, options);\n\n    return parseInt(result.count, 10);\n  }\n\n  /**\n   * Check if one or more instance(s) are associated with this. If a list of instances is passed, the function returns true if _all_ instances are associated\n   *\n   * @param {Model} sourceInstance source instance to check for an association with\n   * @param {Model|Model[]|string[]|string|number[]|number} [instances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise<boolean>}\n   */\n  async has(sourceInstance, instances, options) {\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n\n    options = {\n      raw: true,\n      ...options,\n      scope: false,\n      attributes: [this.targetKey],\n      joinTableAttributes: []\n    };\n\n    const instancePrimaryKeys = instances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.targetKey]: instance\n      };\n    });\n\n    options.where = {\n      [Op.and]: [\n        { [Op.or]: instancePrimaryKeys },\n        options.where\n      ]\n    };\n\n    const associatedObjects = await this.get(sourceInstance, options);\n\n    return _.differenceWith(instancePrimaryKeys, associatedObjects,\n      (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;\n  }\n\n  /**\n   * Set the associated models by passing an array of instances or their primary keys.\n   * Everything that it not in the passed array will be un-associated.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newAssociatedObjects] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`\n   * @param {object} [options.validate] Run validation for the join model\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n\n    const sourceKey = this.sourceKey;\n    const targetKey = this.targetKey;\n    const identifier = this.identifier;\n    const foreignIdentifier = this.foreignIdentifier;\n\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);\n    }\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      ...this.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      const defaultAttributes = options.through || {};\n\n      const unassociatedObjects = newAssociatedObjects.filter(obj =>\n        !currentRows.some(currentRow => currentRow[foreignIdentifier] === obj.get(targetKey))\n      );\n\n      for (const currentRow of currentRows) {\n        const newObj = newAssociatedObjects.find(obj => currentRow[foreignIdentifier] === obj.get(targetKey));\n\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[this.through.model.name];\n          // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n          if (throughAttributes instanceof this.through.model) {\n            throughAttributes = {};\n          }\n\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          if (Object.keys(attributes).length) {\n            promises.push(\n              this.through.model.update(attributes, Object.assign(options, {\n                where: {\n                  [identifier]: sourceInstance.get(sourceKey),\n                  [foreignIdentifier]: newObj.get(targetKey)\n                }\n              }\n              ))\n            );\n          }\n        }\n      }\n\n      if (obsoleteAssociations.length > 0) {\n        promises.push(\n          this.through.model.destroy({\n            ...options,\n            where: {\n              [identifier]: sourceInstance.get(sourceKey),\n              [foreignIdentifier]: obsoleteAssociations.map(obsoleteAssociation => obsoleteAssociation[foreignIdentifier]),\n              ...this.through.scope\n            }\n          })\n        );\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          return {\n            ...defaultAttributes,\n            ...unassociatedObject[this.through.model.name],\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: unassociatedObject.get(targetKey),\n            ...this.through.scope\n          };\n        });\n\n        promises.push(this.through.model.bulkCreate(bulk, { validate: true, ...options }));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await this.through.model.findAll({ ...options, where, raw: true });\n      return await updateAssociations(currentRows);\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations([]);\n      throw error;\n    }\n  }\n\n  /**\n   * Associate one or several rows with source instance. It will not un-associate any already associated instance\n   * that may be missing from `newInstances`.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate` and `update`\n   * @param {object} [options.validate] Run validation for the join model.\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n  async add(sourceInstance, newInstances, options) {\n    // If newInstances is null or undefined, no-op\n    if (!newInstances) return Promise.resolve();\n\n    options = { ...options };\n\n    const association = this;\n    const sourceKey = association.sourceKey;\n    const targetKey = association.targetKey;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = options.through || {};\n\n    newInstances = association.toInstanceArray(newInstances);\n\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      [foreignIdentifier]: newInstances.map(newInstance => newInstance.get(targetKey)),\n      ...association.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n      for (const obj of newInstances) {\n        const existingAssociation = currentRows && currentRows.find(current => current[foreignIdentifier] === obj.get(targetKey));\n\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          if (Object.keys(attributes).some(attribute => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n\n          Object.assign(attributes, association.through.scope);\n\n          return attributes;\n        });\n\n        promises.push(association.through.model.bulkCreate(bulk, { validate: true, ...options }));\n      }\n\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n        const attributes = { ...defaultAttributes, ...throughAttributes };\n        // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n\n        promises.push(association.through.model.update(attributes, Object.assign(options, { where: {\n          [identifier]: sourceInstance.get(sourceKey),\n          [foreignIdentifier]: assoc.get(targetKey)\n        } })));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await association.through.model.findAll({ ...options, where, raw: true });\n      const [associations] = await updateAssociations(currentRows);\n      return associations;\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations();\n      throw error;\n    }\n  }\n\n  /**\n   * Un-associate one or more instance(s).\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [oldAssociatedObjects] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `through.destroy`\n   *\n   * @returns {Promise}\n   */\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n\n    options = options || {};\n\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n\n    const where = {\n      [association.identifier]: sourceInstance.get(association.sourceKey),\n      [association.foreignIdentifier]: oldAssociatedObjects.map(newInstance => newInstance.get(association.targetKey))\n    };\n\n    return association.through.model.destroy({ ...options, where });\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model\n   * @param {object} [options] Options passed to create and add\n   * @param {object} [options.through] Additional attributes for the join table\n   *\n   * @returns {Promise}\n   */\n  async create(sourceInstance, values, options) {\n    const association = this;\n\n    options = options || {};\n    values = values || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (association.scope) {\n      Object.assign(values, association.scope);\n      if (options.fields) {\n        options.fields = options.fields.concat(Object.keys(association.scope));\n      }\n    }\n\n    // Create the related model instance\n    const newAssociatedObject = await association.target.create(values, options);\n\n    await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, ['fields']));\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;\n"]},"metadata":{},"sourceType":"script"}