{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  AsyncQueueError: () => AsyncQueueError,\n  default: () => async_queue_default\n});\n\nvar import_base_error = __toModule(require(\"../../errors/base-error\"));\n\nvar import_connection_error = __toModule(require(\"../../errors/connection-error\"));\n\nclass AsyncQueueError extends import_base_error.default {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeAsyncQueueError\";\n  }\n\n}\n\nclass AsyncQueue {\n  constructor() {\n    __publicField(this, \"previous\");\n\n    __publicField(this, \"closed\");\n\n    __publicField(this, \"rejectCurrent\");\n\n    this.previous = Promise.resolve();\n    this.closed = false;\n\n    this.rejectCurrent = () => {};\n  }\n\n  close() {\n    this.closed = true;\n    this.rejectCurrent(new import_connection_error.default(new AsyncQueueError(\"the connection was closed before this query could finish executing\")));\n  }\n\n  enqueue(asyncFunction) {\n    return new Promise((resolve, reject) => {\n      this.previous = this.previous.then(() => {\n        this.rejectCurrent = reject;\n\n        if (this.closed) {\n          return reject(new import_connection_error.default(new AsyncQueueError(\"the connection was closed before this query could be executed\")));\n        }\n\n        return asyncFunction().then(resolve, reject);\n      });\n    });\n  }\n\n}\n\nvar async_queue_default = AsyncQueue;","map":{"version":3,"sources":["C:\\Users\\Pedro\\codigos\\Trabalho-2-WEB\\frontend\\node_modules\\sequelize\\lib\\dialects\\mssql\\async-queue.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,QAAA,CAAA,OAAA,EAAA;AAAA,EAAA,eAAA,EAAA,MAAA,eAAA;AAAA,EAAA,OAAA,EAAA,MAAA;AAAA,CAAA,CAAA;;AAAA,IAAA,iBAAA,GAAsB,UAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAtB;;AACA,IAAA,uBAAA,GAA4B,UAAA,CAAA,OAAA,CAAA,+BAAA,CAAA,CAA5B;;AAKO,MAAA,eAAA,SAA8B,iBAAA,CAAA,OAA9B,CAAwC;AAC7C,EAAA,WAAA,CAAY,OAAZ,EAA6B;AAC3B,UAAM,OAAN;AACA,SAAK,IAAL,GAAY,0BAAZ;AAAY;;AAH+B;;AAO/C,MAAA,UAAA,CAAiB;AAKf,EAAA,WAAA,GAAc;AAJd,IAAA,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,eAAA,CAAA;;AAGE,SAAK,QAAL,GAAgB,OAAA,CAAQ,OAAR,EAAhB;AACA,SAAK,MAAL,GAAc,KAAd;;AACA,SAAK,aAAL,GAAqB,MAAM,CAAA,CAA3B;AAA2B;;AAK7B,EAAA,KAAA,GAAQ;AACN,SAAK,MAAL,GAAc,IAAd;AACA,SAAK,aAAL,CACE,IAAI,uBAAA,CAAA,OAAJ,CACE,IAAI,eAAJ,CACE,oEADF,CADF,CADF;AAGM;;AAMR,EAAA,OAAA,CAAQ,aAAR,EAA6D;AAI3D,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACtC,WAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,IAAd,CAAmB,MAAM;AACvC,aAAK,aAAL,GAAqB,MAArB;;AACA,YAAI,KAAK,MAAT,EAAiB;AACf,iBAAO,MAAA,CACL,IAAI,uBAAA,CAAA,OAAJ,CACE,IAAI,eAAJ,CACE,+DADF,CADF,CADK,CAAP;AAGM;;AAKR,eAAO,aAAA,GAAgB,IAAhB,CAAqB,OAArB,EAA8B,MAA9B,CAAP;AAAqC,OAXvB,CAAhB;AAWuC,KAZlC,CAAP;AAYyC;;AAxC5B;;AA8CjB,IAAO,mBAAA,GAAQ,UAAf","sourcesContent":["import BaseError from '../../errors/base-error';\nimport ConnectionError from '../../errors/connection-error';\n\n/**\n * Thrown when a connection to a database is closed while an operation is in progress\n */\nexport class AsyncQueueError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeAsyncQueueError';\n  }\n}\n\nclass AsyncQueue {\n  previous: Promise<unknown>;\n  closed: boolean;\n  rejectCurrent: (reason?: any) => void;\n\n  constructor() {\n    this.previous = Promise.resolve();\n    this.closed = false;\n    this.rejectCurrent = () => {\n      /** do nothing */\n    };\n  }\n\n  close() {\n    this.closed = true;\n    this.rejectCurrent(\n      new ConnectionError(\n        new AsyncQueueError(\n          'the connection was closed before this query could finish executing'\n        )\n      )\n    );\n  }\n\n  enqueue(asyncFunction: (...args: any[]) => Promise<unknown>) {\n    // This outer promise might seems superflous since down below we return asyncFunction().then(resolve, reject).\n    // However, this ensures that this.previous will never be a rejected promise so the queue will\n    // always keep going, while still communicating rejection from asyncFunction to the user.\n    return new Promise((resolve, reject) => {\n      this.previous = this.previous.then(() => {\n        this.rejectCurrent = reject;\n        if (this.closed) {\n          return reject(\n            new ConnectionError(\n              new AsyncQueueError(\n                'the connection was closed before this query could be executed'\n              )\n            )\n          );\n        }\n        return asyncFunction().then(resolve, reject);\n      });\n    });\n  }\n}\n\nexport default AsyncQueue;\n"]},"metadata":{},"sourceType":"script"}